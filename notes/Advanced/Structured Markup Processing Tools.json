[
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::html}}.{{c2::escape}}({{c3::s}}, {{c4::quote}}={{c5::True}})",
      "Body": "Convert the characters &, < and > in string s to HTML-safe sequences.  Use this if you need to display text that might contain such characters in HTML.  If the optional flag quote is true, the characters (\") and (') are also translated; this helps for inclusion in an HTML attribute value delimited by quotes, as in <a href=\"...\">.",
      "Link": "https://docs.python.org/3/library/html.html#html.escape"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::html}}.{{c2::unescape}}({{c3::s}})",
      "Body": "Convert all named and numeric character references (e.g. &gt;, &#62;, &#x3e;) in the string s to the corresponding Unicode characters.  This function uses the rules defined by the HTML 5 standard for both valid and invalid character references, and the list of HTML 5 named character references.",
      "Link": "https://docs.python.org/3/library/html.html#html.unescape"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::html}}.{{c3::parser}}.{{c4::HTMLParser}}(*, {{c5::convert_charrefs}}={{c6::True}})",
      "Body": "Create a parser instance able to parse invalid markup.",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::feed}}({{c3::data}})",
      "Body": "Feed some text to the parser.  It is processed insofar as it consists of complete elements; incomplete data is buffered until more data is fed or close() is called.  data must be str.",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.feed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::close}}()",
      "Body": "Force processing of all buffered data as if it were followed by an end-of-file mark.  This method may be redefined by a derived class to define additional processing at the end of the input, but the redefined version should always call the HTMLParser base class method close().",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::reset}}()",
      "Body": "Reset the instance.  Loses all unprocessed data.  This is called implicitly at instantiation time.",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.reset"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::getpos}}()",
      "Body": "Return current line number and offset.",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.getpos"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::get_starttag_text}}()",
      "Body": "Return the text of the most recently opened start tag.  This should not normally be needed for structured processing, but may be useful in dealing with HTML as deployed or for re-generating input with minimal changes (whitespace between attributes can be preserved, etc.).",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.get_starttag_text"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_starttag}}({{c3::tag}}, {{c4::attrs}})",
      "Body": "This method is called to handle the start of a tag (e.g. <div id=\"main\">).",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_starttag"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_endtag}}({{c3::tag}})",
      "Body": "This method is called to handle the end tag of an element (e.g. </div>).",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_endtag"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_startendtag}}({{c3::tag}}, {{c4::attrs}})",
      "Body": "Similar to handle_starttag(), but called when the parser encounters an XHTML-style empty tag (<img ... />).  This method may be overridden by subclasses which require this particular lexical information; the default implementation simply calls handle_starttag() and handle_endtag().",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_startendtag"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_data}}({{c3::data}})",
      "Body": "This method is called to process arbitrary data (e.g. text nodes and the content of <script>...</script> and <style>...</style>).",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_entityref}}({{c3::name}})",
      "Body": "This method is called to process a named character reference of the form &name; (e.g. &gt;), where name is a general entity reference (e.g. 'gt').  This method is never called if convert_charrefs is True.",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_entityref"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_charref}}({{c3::name}})",
      "Body": "This method is called to process decimal and hexadecimal numeric character references of the form &#NNN; and &#xNNN;.  For example, the decimal equivalent for &gt; is &#62;, whereas the hexadecimal is &#x3E;; in this case the method will receive '62' or 'x3E'.  This method is never called if convert_charrefs is True.",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_charref"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_comment}}({{c3::data}})",
      "Body": "This method is called when a comment is encountered (e.g. <!--comment-->).",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_comment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_decl}}({{c3::decl}})",
      "Body": "This method is called to handle an HTML doctype declaration (e.g. <!DOCTYPE html>).",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_decl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::handle_pi}}({{c3::data}})",
      "Body": "Method called when a processing instruction is encountered.  The data parameter will contain the entire processing instruction. For example, for the processing instruction <?proc color='red'>, this method would be called as handle_pi(\"proc color='red'\").  It is intended to be overridden by a derived class; the base class implementation does nothing.",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_pi"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTMLParser}}.{{c2::unknown_decl}}({{c3::data}})",
      "Body": "This method is called when an unrecognized declaration is read by the parser.",
      "Link": "https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.unknown_decl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::html}}.{{c2::entities}}.{{c3::html}}5",
      "Body": "A dictionary that maps HTML5 named character references [1] to the equivalent Unicode character(s), e.g. html5['gt;'] == '>'. Note that the trailing semicolon is included in the name (e.g. 'gt;'), however some of the names are accepted by the standard even without the semicolon: in this case the name is present with and without the ';'. See also html.unescape().",
      "Link": "https://docs.python.org/3/library/html.entities.html#html.entities.html5"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::html}}.{{c2::entities}}.{{c3::entitydefs}}",
      "Body": "A dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1.",
      "Link": "https://docs.python.org/3/library/html.entities.html#html.entities.entitydefs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::html}}.{{c2::entities}}.{{c3::name}}2{{c4::codepoint}}",
      "Body": "A dictionary that maps HTML entity names to the Unicode code points.",
      "Link": "https://docs.python.org/3/library/html.entities.html#html.entities.name2codepoint"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::html}}.{{c2::entities}}.{{c3::codepoint}}2{{c4::name}}",
      "Body": "A dictionary that maps Unicode code points to HTML entity names.",
      "Link": "https://docs.python.org/3/library/html.entities.html#html.entities.codepoint2name"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Comment}}({{c5::text}}={{c6::None}})",
      "Body": "Comment element factory.  This factory function creates a special element that will be serialized as an XML comment by the standard serializer.  The comment string can be either a bytestring or a Unicode string.  text is a string containing the comment string.  Returns an element instance representing a comment.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Comment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::dump}}({{c5::elem}})",
      "Body": "Writes an element tree or element structure to sys.stdout.  This function should be used for debugging only.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.dump"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::fromstring}}({{c5::text}})",
      "Body": "Parses an XML section from a string constant.  Same as XML().  text is a string containing XML data.  Returns an Element instance.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::fromstringlist}}({{c5::sequence}}, {{c6::parser}}={{c7::None}})",
      "Body": "Parses an XML document from a sequence of string fragments.  sequence is a list or other sequence containing XML data fragments.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns an Element instance.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstringlist"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::iselement}}({{c5::element}})",
      "Body": "Checks if an object appears to be a valid element object.  element is an element instance.  Returns a true value if this is an element object.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iselement"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::iterparse}}({{c5::source}}, {{c6::events}}={{c7::None}}, {{c8::parser}}={{c9::None}})",
      "Body": "Parses an XML section into an element tree incrementally, and reports what's going on to the user.  source is a filename or file object containing XML data.  events is a sequence of events to report back.  The supported events are the strings \"start\", \"end\", \"start-ns\" and \"end-ns\" (the ns events are used to get detailed namespace information).  If events is omitted, only \"end\" events are reported. parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  parser must be a subclass of XMLParser and can only use the default TreeBuilder as a target.  Returns an iterator providing (event, elem) pairs.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::parse}}({{c5::source}}, {{c6::parser}}={{c7::None}})",
      "Body": "Parses an XML section into an element tree.  source is a filename or file object containing XML data.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns an ElementTree instance.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ProcessingInstruction}}({{c5::target}}, {{c6::text}}={{c7::None}})",
      "Body": "PI element factory.  This factory function creates a special element that will be serialized as an XML processing instruction.  target is a string containing the PI target.  text is a string containing the PI contents, if given.  Returns an element instance, representing a processing instruction.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ProcessingInstruction"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::register_namespace}}({{c5::prefix}}, {{c6::uri}})",
      "Body": "Registers a namespace prefix.  The registry is global, and any existing mapping for either the given prefix or the namespace URI will be removed. prefix is a namespace prefix.  uri is a namespace uri.  Tags and attributes in this namespace will be serialized with the given prefix, if at all possible.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::SubElement}}({{c5::parent}}, {{c6::tag}}, {{c7::attrib}}={}, **extra)",
      "Body": "Subelement factory.  This function creates an element instance, and appends it to an existing element.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::tostring}}({{c5::element}}, {{c6::encoding}}=\"{{c7::us}}-{{c8::ascii}}\", {{c9::method}}=\"{{c10::xml}}\", *, {{c11::short_empty_elements}}={{c12::True}})",
      "Body": "Generates a string representation of an XML element, including all subelements.  element is an Element instance.  encoding [1] is the output encoding (default is US-ASCII).  Use encoding=\"unicode\" to generate a Unicode string (otherwise, a bytestring is generated).  method is either \"xml\", \"html\" or \"text\" (default is \"xml\"). short_empty_elements has the same meaning as in ElementTree.write(). Returns an (optionally) encoded string containing the XML data.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::tostringlist}}({{c5::element}}, {{c6::encoding}}=\"{{c7::us}}-{{c8::ascii}}\", {{c9::method}}=\"{{c10::xml}}\", *, {{c11::short_empty_elements}}={{c12::True}})",
      "Body": "Generates a string representation of an XML element, including all subelements.  element is an Element instance.  encoding [1] is the output encoding (default is US-ASCII).  Use encoding=\"unicode\" to generate a Unicode string (otherwise, a bytestring is generated).  method is either \"xml\", \"html\" or \"text\" (default is \"xml\"). short_empty_elements has the same meaning as in ElementTree.write(). Returns a list of (optionally) encoded strings containing the XML data. It does not guarantee any specific sequence, except that b\"\".join(tostringlist(element)) == tostring(element).",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostringlist"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::XML}}({{c5::text}}, {{c6::parser}}={{c7::None}})",
      "Body": "Parses an XML section from a string constant.  This function can be used to embed XML literals in Python code.  text is a string containing XML data.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns an Element instance.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::XMLID}}({{c5::text}}, {{c6::parser}}={{c7::None}})",
      "Body": "Parses an XML section from a string constant, and also returns a dictionary which maps from element id:s to elements.  text is a string containing XML data.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns a tuple containing an Element instance and a dictionary.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLID"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::etree}}.{{c4::ElementTree}}.{{c5::Element}}({{c6::tag}}, {{c7::attrib}}={}, **extra)",
      "Body": "Element class.  This class defines the Element interface, and provides a reference implementation of this interface.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::tag}}",
      "Body": "A string identifying what kind of data this element represents (the element type, in other words).",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.tag"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::text}}",
      "Body": "These attributes can be used to hold additional data associated with the element.  Their values are usually strings but may be any application-specific object.  If the element is created from an XML file, the text attribute holds either the text between the element's start tag and its first child or end tag, or None, and the tail attribute holds either the text between the element's end tag and the next tag, or None.  For the XML data",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.text"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::tail}}",
      "Body": "These attributes can be used to hold additional data associated with the element.  Their values are usually strings but may be any application-specific object.  If the element is created from an XML file, the text attribute holds either the text between the element's start tag and its first child or end tag, or None, and the tail attribute holds either the text between the element's end tag and the next tag, or None.  For the XML data",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.tail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::attrib}}",
      "Body": "A dictionary containing the element's attributes.  Note that while the attrib value is always a real mutable Python dictionary, an ElementTree implementation may choose to use another internal representation, and create the dictionary only if someone asks for it.  To take advantage of such implementations, use the dictionary methods below whenever possible.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.attrib"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::clear}}()",
      "Body": "Resets an element.  This function removes all subelements, clears all attributes, and sets the text and tail attributes to None.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.clear"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::get}}({{c6::key}}, {{c7::default}}={{c8::None}})",
      "Body": "Gets the element attribute named key.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.get"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::items}}()",
      "Body": "Returns the element attributes as a sequence of (name, value) pairs.  The attributes are returned in an arbitrary order.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.items"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::keys}}()",
      "Body": "Returns the elements attribute names as a list.  The names are returned in an arbitrary order.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.keys"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::set}}({{c6::key}}, {{c7::value}})",
      "Body": "Set the attribute key on the element to value.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.set"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::append}}({{c6::subelement}})",
      "Body": "Adds the element subelement to the end of this element's internal list of subelements.  Raises TypeError if subelement is not an Element.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.append"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::extend}}({{c6::subelements}})",
      "Body": "Appends subelements from a sequence object with zero or more elements. Raises TypeError if a subelement is not an Element.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.extend"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::find}}({{c6::match}}, {{c7::namespaces}}={{c8::None}})",
      "Body": "Finds the first subelement matching match.  match may be a tag name or a path.  Returns an element instance or None.  namespaces is an optional mapping from namespace prefix to full name.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::findall}}({{c6::match}}, {{c7::namespaces}}={{c8::None}})",
      "Body": "Finds all matching subelements, by tag name or path.  Returns a list containing all matching elements in document order.  namespaces is an optional mapping from namespace prefix to full name.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.findall"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::findtext}}({{c6::match}}, {{c7::default}}={{c8::None}}, {{c9::namespaces}}={{c10::None}})",
      "Body": "Finds text for the first subelement matching match.  match may be a tag name or a path.  Returns the text content of the first matching element, or default if no element was found. Note that if the matching element has no text content an empty string is returned. namespaces is an optional mapping from namespace prefix to full name.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.findtext"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::getchildren}}()",
      "Body": "Deprecated since version 3.2: Use list(elem) or iteration.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.getchildren"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::getiterator}}({{c6::tag}}={{c7::None}})",
      "Body": "Deprecated since version 3.2: Use method Element.iter() instead.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.getiterator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::insert}}({{c6::index}}, {{c7::subelement}})",
      "Body": "Inserts subelement at the given position in this element.  Raises TypeError if subelement is not an Element.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.insert"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::iter}}({{c6::tag}}={{c7::None}})",
      "Body": "Creates a tree iterator with the current element as the root. The iterator iterates over this element and all elements below it, in document (depth first) order.  If tag is not None or '*', only elements whose tag equals tag are returned from the iterator.  If the tree structure is modified during iteration, the result is undefined.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::iterfind}}({{c6::match}}, {{c7::namespaces}}={{c8::None}})",
      "Body": "Finds all matching subelements, by tag name or path.  Returns an iterable yielding all matching elements in document order. namespaces is an optional mapping from namespace prefix to full name.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iterfind"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::itertext}}()",
      "Body": "Creates a text iterator.  The iterator loops over this element and all subelements, in document order, and returns all inner text.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.itertext"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::makeelement}}({{c6::tag}}, {{c7::attrib}})",
      "Body": "Creates a new element object of the same type as this element.  Do not call this method, use the SubElement() factory function instead.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.makeelement"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::Element}}.{{c5::remove}}({{c6::subelement}})",
      "Body": "Removes subelement from the element.  Unlike the find* methods this method compares elements based on the instance identity, not on tag value or contents.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.remove"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::etree}}.{{c4::ElementTree}}.{{c5::ElementTree}}({{c6::element}}={{c7::None}}, {{c8::file}}={{c9::None}})",
      "Body": "ElementTree wrapper class.  This class represents an entire element hierarchy, and adds some extra support for serialization to and from standard XML.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::_setroot}}({{c6::element}})",
      "Body": "Replaces the root element for this tree.  This discards the current contents of the tree, and replaces it with the given element.  Use with care.  element is an element instance.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree._setroot"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::find}}({{c6::match}}, {{c7::namespaces}}={{c8::None}})",
      "Body": "Same as Element.find(), starting at the root of the tree.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.find"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::findall}}({{c6::match}}, {{c7::namespaces}}={{c8::None}})",
      "Body": "Same as Element.findall(), starting at the root of the tree.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.findall"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::findtext}}({{c6::match}}, {{c7::default}}={{c8::None}}, {{c9::namespaces}}={{c10::None}})",
      "Body": "Same as Element.findtext(), starting at the root of the tree.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.findtext"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::getiterator}}({{c6::tag}}={{c7::None}})",
      "Body": "Deprecated since version 3.2: Use method ElementTree.iter() instead.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.getiterator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::getroot}}()",
      "Body": "Returns the root element for this tree.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.getroot"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::iter}}({{c6::tag}}={{c7::None}})",
      "Body": "Creates and returns a tree iterator for the root element.  The iterator loops over all elements in this tree, in section order.  tag is the tag to look for (default is to return all elements).",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.iter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::iterfind}}({{c6::match}}, {{c7::namespaces}}={{c8::None}})",
      "Body": "Same as Element.iterfind(), starting at the root of the tree.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.iterfind"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::parse}}({{c6::source}}, {{c7::parser}}={{c8::None}})",
      "Body": "Loads an external XML section into this element tree.  source is a file name or file object.  parser is an optional parser instance. If not given, the standard XMLParser parser is used.  Returns the section root element.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ElementTree}}.{{c5::write}}({{c6::file}}, {{c7::encoding}}=\"{{c8::us}}-{{c9::ascii}}\", {{c10::xml_declaration}}={{c11::None}}, {{c12::default_namespace}}={{c13::None}}, {{c14::method}}=\"{{c15::xml}}\", *, {{c16::short_empty_elements}}={{c17::True}})",
      "Body": "Writes the element tree to a file, as XML.  file is a file name, or a file object opened for writing.  encoding [1] is the output encoding (default is US-ASCII). xml_declaration controls if an XML declaration should be added to the file.  Use False for never, True for always, None for only if not US-ASCII or UTF-8 or Unicode (default is None). default_namespace sets the default XML namespace (for xmlns). method is either \"xml\", \"html\" or \"text\" (default is \"xml\"). The keyword-only short_empty_elements parameter controls the formatting of elements that contain no content.  If True (the default), they are emitted as a single self-closed tag, otherwise they are emitted as a pair of start/end tags.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::etree}}.{{c4::ElementTree}}.{{c5::QName}}({{c6::text_or_uri}}, {{c7::tag}}={{c8::None}})",
      "Body": "QName wrapper.  This can be used to wrap a QName attribute value, in order to get proper namespace handling on output.  text_or_uri is a string containing the QName value, in the form {uri}local, or, if the tag argument is given, the URI part of a QName.  If tag is given, the first argument is interpreted as a URI, and this argument is interpreted as a local name. QName instances are opaque.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.QName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::etree}}.{{c4::ElementTree}}.{{c5::TreeBuilder}}({{c6::element_factory}}={{c7::None}})",
      "Body": "Generic element structure builder.  This builder converts a sequence of start, data, and end method calls to a well-formed element structure.  You can use this class to build an element structure using a custom XML parser, or a parser for some other XML-like format.  element_factory, when given, must be a callable accepting two positional arguments: a tag and a dict of attributes.  It is expected to return a new element instance.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::TreeBuilder}}.{{c5::close}}()",
      "Body": "Flushes the builder buffers, and returns the toplevel document element.  Returns an Element instance.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::TreeBuilder}}.{{c5::data}}({{c6::data}})",
      "Body": "Adds text to the current element.  data is a string.  This should be either a bytestring, or a Unicode string.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::TreeBuilder}}.{{c5::end}}({{c6::tag}})",
      "Body": "Closes the current element.  tag is the element name.  Returns the closed element.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.end"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::TreeBuilder}}.{{c5::start}}({{c6::tag}}, {{c7::attrs}})",
      "Body": "Opens a new element.  tag is the element name.  attrs is a dictionary containing element attributes.  Returns the opened element.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.start"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::TreeBuilder}}.{{c5::doctype}}({{c6::name}}, {{c7::pubid}}, {{c8::system}})",
      "Body": "Handles a doctype declaration.  name is the doctype name.  pubid is the public identifier.  system is the system identifier.  This method does not exist on the default TreeBuilder class.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.doctype"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::etree}}.{{c4::ElementTree}}.{{c5::XMLParser}}({{c6::html}}=0, {{c7::target}}={{c8::None}}, {{c9::encoding}}={{c10::None}})",
      "Body": "This class is the low-level building block of the module.  It uses xml.parsers.expat for efficient, event-based parsing of XML.  It can be fed XML data incrementally with the feed() method, and parsing events are translated to a push API - by invoking callbacks on the target object.  If target is omitted, the standard TreeBuilder is used. The html argument was historically used for backwards compatibility and is now deprecated.  If encoding [1] is given, the value overrides the encoding specified in the XML file.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::XMLParser}}.{{c5::close}}()",
      "Body": "Finishes feeding data to the parser.  Returns the result of calling the close() method of the target passed during construction; by default, this is the toplevel document element.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::XMLParser}}.{{c5::doctype}}({{c6::name}}, {{c7::pubid}}, {{c8::system}})",
      "Body": "Deprecated since version 3.2: Define the TreeBuilder.doctype() method on a custom TreeBuilder target.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.doctype"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::XMLParser}}.{{c5::feed}}({{c6::data}})",
      "Body": "Feeds data to the parser.  data is encoded data.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.feed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::etree}}.{{c4::ElementTree}}.{{c5::XMLPullParser}}({{c6::events}}={{c7::None}})",
      "Body": "A pull parser suitable for non-blocking applications.  Its input-side API is similar to that of XMLParser, but instead of pushing calls to a callback target, XMLPullParser collects an internal list of parsing events and lets the user read from it. events is a sequence of events to report back.  The supported events are the strings \"start\", \"end\", \"start-ns\" and \"end-ns\" (the ns events are used to get detailed namespace information).  If events is omitted, only \"end\" events are reported.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::XMLPullParser}}.{{c5::feed}}({{c6::data}})",
      "Body": "Feed the given bytes data to the parser.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser.feed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::XMLPullParser}}.{{c5::close}}()",
      "Body": "Signal the parser that the data stream is terminated. Unlike XMLParser.close(), this method always returns None. Any events not yet retrieved when the parser is closed can still be read with read_events().",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::XMLPullParser}}.{{c5::read_events}}()",
      "Body": "Return an iterator over the events which have been encountered in the data fed to the parser.  The iterator yields (event, elem) pairs, where event is a string representing the type of event (e.g. \"end\") and elem is the encountered Element object.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser.read_events"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::etree}}.{{c4::ElementTree}}.{{c5::ParseError}}",
      "Body": "XML parse error, raised by the various parsing methods in this module when parsing fails.  The string representation of an instance of this exception will contain a user-friendly error message.  In addition, it will have the following attributes available:",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ParseError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ParseError}}.{{c5::code}}",
      "Body": "A numeric error code from the expat parser. See the documentation of xml.parsers.expat for the list of error codes and their meanings.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ParseError.code"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::etree}}.{{c3::ElementTree}}.{{c4::ParseError}}.{{c5::position}}",
      "Body": "A tuple of line, column numbers, specifying where the error occurred.",
      "Link": "https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ParseError.position"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::registerDOMImplementation}}({{c4::name}}, {{c5::factory}})",
      "Body": "Register the factory function with the name name.  The factory function should return an object which implements the DOMImplementation interface.  The factory function can return the same object every time, or a new one for each call, as appropriate for the specific implementation (e.g. if that implementation supports some customization).",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.registerDOMImplementation"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::getDOMImplementation}}({{c4::name}}={{c5::None}}, {{c6::features}}=())",
      "Body": "Return a suitable DOM implementation. The name is either well-known, the module name of a DOM implementation, or None. If it is not None, imports the corresponding module and returns a DOMImplementation object if the import succeeds.  If no name is given, and if the environment variable PYTHON_DOM is set, this variable is used to find the implementation.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.getDOMImplementation"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::EMPTY_NAMESPACE}}",
      "Body": "The value used to indicate that no namespace is associated with a node in the DOM.  This is typically found as the namespaceURI of a node, or used as the namespaceURI parameter to a namespaces-specific method.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.EMPTY_NAMESPACE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::XML_NAMESPACE}}",
      "Body": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.XML_NAMESPACE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::XMLNS_NAMESPACE}}",
      "Body": "The namespace URI for namespace declarations, as defined by Document Object Model (DOM) Level 2 Core Specification (section 1.1.8).",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.XMLNS_NAMESPACE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::XHTML_NAMESPACE}}",
      "Body": "The URI of the XHTML namespace as defined by XHTML 1.0: The Extensible HyperText Markup Language (section 3.1.1).",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.XHTML_NAMESPACE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DOMImplementation}}.{{c2::hasFeature}}({{c3::feature}}, {{c4::version}})",
      "Body": "Return true if the feature identified by the pair of strings feature and version is implemented.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMImplementation.hasFeature"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DOMImplementation}}.{{c2::createDocument}}({{c3::namespaceUri}}, {{c4::qualifiedName}}, {{c5::doctype}})",
      "Body": "Return a new Document object (the root of the DOM), with a child Element object having the given namespaceUri and qualifiedName. The doctype must be a DocumentType object created by createDocumentType(), or None. In the Python DOM API, the first two arguments can also be None in order to indicate that no Element child is to be created.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMImplementation.createDocument"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DOMImplementation}}.{{c2::createDocumentType}}({{c3::qualifiedName}}, {{c4::publicId}}, {{c5::systemId}})",
      "Body": "Return a new DocumentType object that encapsulates the given qualifiedName, publicId, and systemId strings, representing the information contained in an XML document type declaration.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMImplementation.createDocumentType"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::nodeType}}",
      "Body": "An integer representing the node type.  Symbolic constants for the types are on the Node object: ELEMENT_NODE, ATTRIBUTE_NODE, TEXT_NODE, CDATA_SECTION_NODE, ENTITY_NODE, PROCESSING_INSTRUCTION_NODE, COMMENT_NODE, DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.nodeType"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::parentNode}}",
      "Body": "The parent of the current node, or None for the document node. The value is always a Node object or None.  For Element nodes, this will be the parent element, except for the root element, in which case it will be the Document object. For Attr nodes, this is always None. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.parentNode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::attributes}}",
      "Body": "A NamedNodeMap of attribute objects.  Only elements have actual values for this; others provide None for this attribute. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.attributes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::previousSibling}}",
      "Body": "The node that immediately precedes this one with the same parent.  For instance the element with an end-tag that comes just before the self element's start-tag.  Of course, XML documents are made up of more than just elements so the previous sibling could be text, a comment, or something else. If this node is the first child of the parent, this attribute will be None. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.previousSibling"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::nextSibling}}",
      "Body": "The node that immediately follows this one with the same parent.  See also previousSibling.  If this is the last child of the parent, this attribute will be None. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.nextSibling"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::childNodes}}",
      "Body": "A list of nodes contained within this node. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.childNodes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::firstChild}}",
      "Body": "The first child of the node, if there are any, or None. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.firstChild"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::lastChild}}",
      "Body": "The last child of the node, if there are any, or None. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.lastChild"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::localName}}",
      "Body": "The part of the tagName following the colon if there is one, else the entire tagName.  The value is a string.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.localName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::prefix}}",
      "Body": "The part of the tagName preceding the colon if there is one, else the empty string.  The value is a string, or None.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.prefix"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::namespaceURI}}",
      "Body": "The namespace associated with the element name.  This will be a string or None.  This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.namespaceURI"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::nodeName}}",
      "Body": "This has a different meaning for each node type; see the DOM specification for details.  You can always get the information you would get here from another property such as the tagName property for elements or the name property for attributes. For all node types, the value of this attribute will be either a string or None.  This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.nodeName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::nodeValue}}",
      "Body": "This has a different meaning for each node type; see the DOM specification for details.  The situation is similar to that with nodeName.  The value is a string or None.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.nodeValue"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::hasAttributes}}()",
      "Body": "Returns true if the node has any attributes.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.hasAttributes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::hasChildNodes}}()",
      "Body": "Returns true if the node has any child nodes.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.hasChildNodes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::isSameNode}}({{c3::other}})",
      "Body": "Returns true if other refers to the same node as this node. This is especially useful for DOM implementations which use any sort of proxy architecture (because more than one object can refer to the same node).",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.isSameNode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::appendChild}}({{c3::newChild}})",
      "Body": "Add a new child node to this node at the end of the list of children, returning newChild. If the node was already in the tree, it is removed first.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.appendChild"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::insertBefore}}({{c3::newChild}}, {{c4::refChild}})",
      "Body": "Insert a new child node before an existing child.  It must be the case that refChild is a child of this node; if not, ValueError is raised. newChild is returned. If refChild is None, it inserts newChild at the end of the children's list.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.insertBefore"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::removeChild}}({{c3::oldChild}})",
      "Body": "Remove a child node.  oldChild must be a child of this node; if not, ValueError is raised.  oldChild is returned on success.  If oldChild will not be used further, its unlink() method should be called.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.removeChild"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::replaceChild}}({{c3::newChild}}, {{c4::oldChild}})",
      "Body": "Replace an existing node with a new node. It must be the case that  oldChild is a child of this node; if not, ValueError is raised.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.replaceChild"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::normalize}}()",
      "Body": "Join adjacent text nodes so that all stretches of text are stored as single Text instances.  This simplifies processing text from a DOM tree for many applications.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.normalize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::cloneNode}}({{c3::deep}})",
      "Body": "Clone this node.  Setting deep means to clone all child nodes as well.  This returns the clone.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.cloneNode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NodeList}}.{{c2::item}}({{c3::i}})",
      "Body": "Return the i'th item from the sequence, if there is one, or None.  The index i is not allowed to be less than zero or greater than or equal to the length of the sequence.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NodeList.item"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NodeList}}.{{c2::length}}",
      "Body": "The number of nodes in the sequence.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NodeList.length"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocumentType}}.{{c2::publicId}}",
      "Body": "The public identifier for the external subset of the document type definition. This will be a string or None.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DocumentType.publicId"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocumentType}}.{{c2::systemId}}",
      "Body": "The system identifier for the external subset of the document type definition. This will be a URI as a string, or None.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DocumentType.systemId"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocumentType}}.{{c2::internalSubset}}",
      "Body": "A string giving the complete internal subset from the document. This does not include the brackets which enclose the subset.  If the document has no internal subset, this should be None.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DocumentType.internalSubset"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocumentType}}.{{c2::name}}",
      "Body": "The name of the root element as given in the DOCTYPE declaration, if present.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DocumentType.name"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocumentType}}.{{c2::entities}}",
      "Body": "This is a NamedNodeMap giving the definitions of external entities. For entity names defined more than once, only the first definition is provided (others are ignored as required by the XML recommendation).  This may be None if the information is not provided by the parser, or if no entities are defined.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DocumentType.entities"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocumentType}}.{{c2::notations}}",
      "Body": "This is a NamedNodeMap giving the definitions of notations. For notation names defined more than once, only the first definition is provided (others are ignored as required by the XML recommendation).  This may be None if the information is not provided by the parser, or if no notations are defined.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DocumentType.notations"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::documentElement}}",
      "Body": "The one and only root element of the document.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.documentElement"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::createElement}}({{c3::tagName}})",
      "Body": "Create and return a new element node.  The element is not inserted into the document when it is created.  You need to explicitly insert it with one of the other methods such as insertBefore() or appendChild().",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createElement"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::createElementNS}}({{c3::namespaceURI}}, {{c4::tagName}})",
      "Body": "Create and return a new element with a namespace.  The tagName may have a prefix.  The element is not inserted into the document when it is created.  You need to explicitly insert it with one of the other methods such as insertBefore() or appendChild().",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createElementNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::createTextNode}}({{c3::data}})",
      "Body": "Create and return a text node containing the data passed as a parameter.  As with the other creation methods, this one does not insert the node into the tree.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createTextNode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::createComment}}({{c3::data}})",
      "Body": "Create and return a comment node containing the data passed as a parameter.  As with the other creation methods, this one does not insert the node into the tree.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createComment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::createProcessingInstruction}}({{c3::target}}, {{c4::data}})",
      "Body": "Create and return a processing instruction node containing the target and data passed as parameters.  As with the other creation methods, this one does not insert the node into the tree.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createProcessingInstruction"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::createAttribute}}({{c3::name}})",
      "Body": "Create and return an attribute node.  This method does not associate the attribute node with any particular element.  You must use setAttributeNode() on the appropriate Element object to use the newly created attribute instance.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createAttribute"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::createAttributeNS}}({{c3::namespaceURI}}, {{c4::qualifiedName}})",
      "Body": "Create and return an attribute node with a namespace.  The tagName may have a prefix.  This method does not associate the attribute node with any particular element.  You must use setAttributeNode() on the appropriate Element object to use the newly created attribute instance.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createAttributeNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::getElementsByTagName}}({{c3::tagName}})",
      "Body": "Search for all descendants (direct children, children's children, etc.) with a particular element type name.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.getElementsByTagName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Document}}.{{c2::getElementsByTagNameNS}}({{c3::namespaceURI}}, {{c4::localName}})",
      "Body": "Search for all descendants (direct children, children's children, etc.) with a particular namespace URI and localname.  The localname is the part of the namespace after the prefix.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.getElementsByTagNameNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::tagName}}",
      "Body": "The element type name.  In a namespace-using document it may have colons in it. The value is a string.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.tagName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::getElementsByTagName}}({{c3::tagName}})",
      "Body": "Same as equivalent method in the Document class.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getElementsByTagName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::getElementsByTagNameNS}}({{c3::namespaceURI}}, {{c4::localName}})",
      "Body": "Same as equivalent method in the Document class.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getElementsByTagNameNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::hasAttribute}}({{c3::name}})",
      "Body": "Returns true if the element has an attribute named by name.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.hasAttribute"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::hasAttributeNS}}({{c3::namespaceURI}}, {{c4::localName}})",
      "Body": "Returns true if the element has an attribute named by namespaceURI and localName.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.hasAttributeNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::getAttribute}}({{c3::name}})",
      "Body": "Return the value of the attribute named by name as a string. If no such attribute exists, an empty string is returned, as if the attribute had no value.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getAttribute"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::getAttributeNode}}({{c3::attrname}})",
      "Body": "Return the Attr node for the attribute named by attrname.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getAttributeNode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::getAttributeNS}}({{c3::namespaceURI}}, {{c4::localName}})",
      "Body": "Return the value of the attribute named by namespaceURI and localName as a string. If no such attribute exists, an empty string is returned, as if the attribute had no value.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getAttributeNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::getAttributeNodeNS}}({{c3::namespaceURI}}, {{c4::localName}})",
      "Body": "Return an attribute value as a node, given a namespaceURI and localName.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getAttributeNodeNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::removeAttribute}}({{c3::name}})",
      "Body": "Remove an attribute by name.  If there is no matching attribute, a NotFoundErr is raised.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.removeAttribute"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::removeAttributeNode}}({{c3::oldAttr}})",
      "Body": "Remove and return oldAttr from the attribute list, if present. If oldAttr is not present, NotFoundErr is raised.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.removeAttributeNode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::removeAttributeNS}}({{c3::namespaceURI}}, {{c4::localName}})",
      "Body": "Remove an attribute by name.  Note that it uses a localName, not a qname.  No exception is raised if there is no matching attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.removeAttributeNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::setAttribute}}({{c3::name}}, {{c4::value}})",
      "Body": "Set an attribute value from a string.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.setAttribute"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::setAttributeNode}}({{c3::newAttr}})",
      "Body": "Add a new attribute node to the element, replacing an existing attribute if necessary if the name attribute matches.  If a replacement occurs, the old attribute node will be returned.  If newAttr is already in use, InuseAttributeErr will be raised.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.setAttributeNode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::setAttributeNodeNS}}({{c3::newAttr}})",
      "Body": "Add a new attribute node to the element, replacing an existing attribute if necessary if the namespaceURI and localName attributes match. If a replacement occurs, the old attribute node will be returned.  If newAttr is already in use, InuseAttributeErr will be raised.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.setAttributeNodeNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Element}}.{{c2::setAttributeNS}}({{c3::namespaceURI}}, {{c4::qname}}, {{c5::value}})",
      "Body": "Set an attribute value from a string, given a namespaceURI and a qname. Note that a qname is the whole attribute name.  This is different than above.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.setAttributeNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Attr}}.{{c2::name}}",
      "Body": "The attribute name. In a namespace-using document it may include a colon.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Attr.name"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Attr}}.{{c2::localName}}",
      "Body": "The part of the name following the colon if there is one, else the entire name. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Attr.localName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Attr}}.{{c2::prefix}}",
      "Body": "The part of the name preceding the colon if there is one, else the empty string.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Attr.prefix"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Attr}}.{{c2::value}}",
      "Body": "The text value of the attribute.  This is a synonym for the nodeValue attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Attr.value"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NamedNodeMap}}.{{c2::length}}",
      "Body": "The length of the attribute list.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NamedNodeMap.length"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NamedNodeMap}}.{{c2::item}}({{c3::index}})",
      "Body": "Return an attribute with a particular index.  The order you get the attributes in is arbitrary but will be consistent for the life of a DOM.  Each item is an attribute node.  Get its value with the value attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NamedNodeMap.item"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Comment}}.{{c2::data}}",
      "Body": "The content of the comment as a string.  The attribute contains all characters between the leading <!-- and trailing -->, but does not include them.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Comment.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Text}}.{{c2::data}}",
      "Body": "The content of the text node as a string.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.Text.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ProcessingInstruction}}.{{c2::target}}",
      "Body": "The content of the processing instruction up to the first whitespace character. This is a read-only attribute.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.ProcessingInstruction.target"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ProcessingInstruction}}.{{c2::data}}",
      "Body": "The content of the processing instruction following the first whitespace character.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.ProcessingInstruction.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::DOMException}}",
      "Body": "Base exception class used for all specific DOM exceptions.  This exception class cannot be directly instantiated.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::DomstringSizeErr}}",
      "Body": "Raised when a specified range of text does not fit into a string. This is not known to be used in the Python DOM implementations, but may be received from DOM implementations not written in Python.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.DomstringSizeErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::HierarchyRequestErr}}",
      "Body": "Raised when an attempt is made to insert a node where the node type is not allowed.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.HierarchyRequestErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::IndexSizeErr}}",
      "Body": "Raised when an index or size parameter to a method is negative or exceeds the allowed values.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.IndexSizeErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::InuseAttributeErr}}",
      "Body": "Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.InuseAttributeErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::InvalidAccessErr}}",
      "Body": "Raised if a parameter or an operation is not supported on the underlying object.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.InvalidAccessErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::InvalidCharacterErr}}",
      "Body": "This exception is raised when a string parameter contains a character that is not permitted in the context it's being used in by the XML 1.0 recommendation. For example, attempting to create an Element node with a space in the element type name will cause this error to be raised.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.InvalidCharacterErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::InvalidModificationErr}}",
      "Body": "Raised when an attempt is made to modify the type of a node.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.InvalidModificationErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::InvalidStateErr}}",
      "Body": "Raised when an attempt is made to use an object that is not defined or is no longer usable.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.InvalidStateErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::NamespaceErr}}",
      "Body": "If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NamespaceErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::NotFoundErr}}",
      "Body": "Exception when a node does not exist in the referenced context.  For example, NamedNodeMap.removeNamedItem() will raise this if the node passed in does not exist in the map.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NotFoundErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::NotSupportedErr}}",
      "Body": "Raised when the implementation does not support the requested type of object or operation.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NotSupportedErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::NoDataAllowedErr}}",
      "Body": "This is raised if data is specified for a node which does not support data.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NoDataAllowedErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::NoModificationAllowedErr}}",
      "Body": "Raised on attempts to modify an object where modifications are not allowed (such as for read-only nodes).",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.NoModificationAllowedErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::SyntaxErr}}",
      "Body": "Raised when an invalid or illegal string is specified.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.SyntaxErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::dom}}.{{c4::WrongDocumentErr}}",
      "Body": "Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.",
      "Link": "https://docs.python.org/3/library/xml.dom.html#xml.dom.WrongDocumentErr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::minidom}}.{{c4::parse}}({{c5::filename_or_file}}, {{c6::parser}}={{c7::None}}, {{c8::bufsize}}={{c9::None}})",
      "Body": "Return a Document from the given input. filename_or_file may be either a file name, or a file-like object. parser, if given, must be a SAX2 parser object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance.",
      "Link": "https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::minidom}}.{{c4::parseString}}({{c5::string}}, {{c6::parser}}={{c7::None}})",
      "Body": "Return a Document that represents the string. This method creates an io.StringIO object for the string and passes that on to parse().",
      "Link": "https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parseString"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::unlink}}()",
      "Body": "Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC.  Even when cyclic GC is available, using this can make large amounts of memory available sooner, so calling this on DOM objects as soon as they are no longer needed is good practice.  This only needs to be called on the Document object, but may be called on child nodes to discard children of that node.",
      "Link": "https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.Node.unlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::writexml}}({{c3::writer}}, {{c4::indent}}=\"\", {{c5::addindent}}=\"\", {{c6::newl}}=\"\")",
      "Body": "Write XML to the writer object.  The writer should have a write() method which matches that of the file object interface.  The indent parameter is the indentation of the current node.  The addindent parameter is the incremental indentation to use for subnodes of the current one.  The newl parameter specifies the string to use to terminate newlines.",
      "Link": "https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.Node.writexml"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::toxml}}({{c3::encoding}}={{c4::None}})",
      "Body": "Return a string or byte string containing the XML represented by the DOM node.",
      "Link": "https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.Node.toxml"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Node}}.{{c2::toprettyxml}}({{c3::indent}}=\"\", {{c4::newl}}=\"\", {{c5::encoding}}=\"\")",
      "Body": "Return a pretty-printed version of the document. indent specifies the indentation string and defaults to a tabulator; newl specifies the string emitted at the end of each line and defaults to \\n.",
      "Link": "https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.Node.toprettyxml"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::dom}}.{{c4::pulldom}}.{{c5::PullDom}}({{c6::documentFactory}}={{c7::None}})",
      "Body": "Subclass of xml.sax.handler.ContentHandler.",
      "Link": "https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.PullDom"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::dom}}.{{c4::pulldom}}.{{c5::SAX}}2{{c6::DOM}}({{c7::documentFactory}}={{c8::None}})",
      "Body": "Subclass of xml.sax.handler.ContentHandler.",
      "Link": "https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.SAX2DOM"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::pulldom}}.{{c4::parse}}({{c5::stream_or_string}}, {{c6::parser}}={{c7::None}}, {{c8::bufsize}}={{c9::None}})",
      "Body": "Return a DOMEventStream from the given input. stream_or_string may be either a file name, or a file-like object. parser, if given, must be an XMLReader object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance.",
      "Link": "https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::pulldom}}.{{c4::parseString}}({{c5::string}}, {{c6::parser}}={{c7::None}})",
      "Body": "Return a DOMEventStream that represents the (Unicode) string.",
      "Link": "https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.parseString"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::pulldom}}.{{c4::default_bufsize}}",
      "Body": "Default value for the bufsize parameter to parse().",
      "Link": "https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.default_bufsize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::dom}}.{{c4::pulldom}}.{{c5::DOMEventStream}}({{c6::stream}}, {{c7::parser}}, {{c8::bufsize}})",
      "Body": "Return a tuple containing event and the current node as xml.dom.minidom.Document if event equals START_DOCUMENT, xml.dom.minidom.Element if event equals START_ELEMENT or END_ELEMENT or xml.dom.minidom.Text if event equals CHARACTERS. The current node does not contain information about its children, unless expandNode() is called.",
      "Link": "https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.DOMEventStream"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::pulldom}}.{{c4::DOMEventStream}}.{{c5::getEvent}}()",
      "Body": "Return a tuple containing event and the current node as xml.dom.minidom.Document if event equals START_DOCUMENT, xml.dom.minidom.Element if event equals START_ELEMENT or END_ELEMENT or xml.dom.minidom.Text if event equals CHARACTERS. The current node does not contain information about its children, unless expandNode() is called.",
      "Link": "https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.DOMEventStream.getEvent"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::dom}}.{{c3::pulldom}}.{{c4::DOMEventStream}}.{{c5::expandNode}}({{c6::node}})",
      "Body": "Expands all children of node into node. Example:",
      "Link": "https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.DOMEventStream.expandNode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::make_parser}}({{c4::parser_list}}=[])",
      "Body": "Create and return a SAX XMLReader object.  The first parser found will be used.  If parser_list is provided, it must be a sequence of strings which name modules that have a function named create_parser().  Modules listed in parser_list will be used before modules in the default list of parsers.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.make_parser"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::parse}}({{c4::filename_or_stream}}, {{c5::handler}}, {{c6::error_handler}}={{c7::handler}}.{{c8::ErrorHandler}}())",
      "Body": "Create a SAX parser and use it to parse a document.  The document, passed in as filename_or_stream, can be a filename or a file object.  The handler parameter needs to be a SAX ContentHandler instance.  If error_handler is given, it must be a SAX ErrorHandler instance; if omitted,  SAXParseException will be raised on all errors.  There is no return value; all work must be done by the handler passed in.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::parseString}}({{c4::string}}, {{c5::handler}}, {{c6::error_handler}}={{c7::handler}}.{{c8::ErrorHandler}}())",
      "Body": "Similar to parse(), but parses from a buffer string received as a parameter.  string must be a str instance or a bytes-like object.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.parseString"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::sax}}.{{c4::SAXException}}({{c5::msg}}, {{c6::exception}}={{c7::None}})",
      "Body": "Encapsulate an XML error or warning.  This class can contain basic error or warning information from either the XML parser or the application: it can be subclassed to provide additional functionality or to add localization.  Note that although the handlers defined in the ErrorHandler interface receive instances of this exception, it is not required to actually raise the exception  it is also useful as a container for information.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.SAXException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::sax}}.{{c4::SAXParseException}}({{c5::msg}}, {{c6::exception}}, {{c7::locator}})",
      "Body": "Subclass of SAXException raised on parse errors. Instances of this class are passed to the methods of the SAX ErrorHandler interface to provide information about the parse error.  This class supports the SAX Locator interface as well as the SAXException interface.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.SAXParseException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::sax}}.{{c4::SAXNotRecognizedException}}({{c5::msg}}, {{c6::exception}}={{c7::None}})",
      "Body": "Subclass of SAXException raised when a SAX XMLReader is confronted with an unrecognized feature or property.  SAX applications and extensions may use this class for similar purposes.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.SAXNotRecognizedException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::sax}}.{{c4::SAXNotSupportedException}}({{c5::msg}}, {{c6::exception}}={{c7::None}})",
      "Body": "Subclass of SAXException raised when a SAX XMLReader is asked to enable a feature that is not supported, or to set a property to a value that the implementation does not support.  SAX applications and extensions may use this class for similar purposes.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.SAXNotSupportedException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SAXException}}.{{c2::getMessage}}()",
      "Body": "Return a human-readable message describing the error condition.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.SAXException.getMessage"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SAXException}}.{{c2::getException}}()",
      "Body": "Return an encapsulated exception object, or None.",
      "Link": "https://docs.python.org/3/library/xml.sax.html#xml.sax.SAXException.getException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::handler}}.{{c5::ContentHandler}}",
      "Body": "This is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::handler}}.{{c5::DTDHandler}}",
      "Body": "Handle DTD events.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.DTDHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::handler}}.{{c5::EntityResolver}}",
      "Body": "Basic interface for resolving entities. If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.EntityResolver"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::handler}}.{{c5::ErrorHandler}}",
      "Body": "Interface used by the parser to present error and warning messages to the application.  The methods of this object control whether errors are immediately converted to exceptions or are handled in some other way.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ErrorHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::handler}}.{{c4::all_features}}",
      "Body": "List of all features.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.all_features"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::handler}}.{{c4::all_properties}}",
      "Body": "List of all known property names.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.all_properties"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::setDocumentLocator}}({{c3::locator}})",
      "Body": "Called by the parser to give the application a locator for locating the origin of document events.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.setDocumentLocator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::startDocument}}()",
      "Body": "Receive notification of the beginning of a document.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.startDocument"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::endDocument}}()",
      "Body": "Receive notification of the end of a document.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.endDocument"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::startPrefixMapping}}({{c3::prefix}}, {{c4::uri}})",
      "Body": "Begin the scope of a prefix-URI Namespace mapping.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.startPrefixMapping"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::endPrefixMapping}}({{c3::prefix}})",
      "Body": "End the scope of a prefix-URI mapping.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.endPrefixMapping"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::startElement}}({{c3::name}}, {{c4::attrs}})",
      "Body": "Signals the start of an element in non-namespace mode.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.startElement"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::endElement}}({{c3::name}})",
      "Body": "Signals the end of an element in non-namespace mode.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.endElement"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::startElementNS}}({{c3::name}}, {{c4::qname}}, {{c5::attrs}})",
      "Body": "Signals the start of an element in namespace mode.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.startElementNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::endElementNS}}({{c3::name}}, {{c4::qname}})",
      "Body": "Signals the end of an element in namespace mode.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.endElementNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::characters}}({{c3::content}})",
      "Body": "Receive notification of character data.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.characters"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::ignorableWhitespace}}({{c3::whitespace}})",
      "Body": "Receive notification of ignorable whitespace in element content.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.ignorableWhitespace"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::processingInstruction}}({{c3::target}}, {{c4::data}})",
      "Body": "Receive notification of a processing instruction.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.processingInstruction"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ContentHandler}}.{{c2::skippedEntity}}({{c3::name}})",
      "Body": "Receive notification of a skipped entity.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.skippedEntity"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DTDHandler}}.{{c2::notationDecl}}({{c3::name}}, {{c4::publicId}}, {{c5::systemId}})",
      "Body": "Handle a notation declaration event.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.DTDHandler.notationDecl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DTDHandler}}.{{c2::unparsedEntityDecl}}({{c3::name}}, {{c4::publicId}}, {{c5::systemId}}, {{c6::ndata}})",
      "Body": "Handle an unparsed entity declaration event.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.DTDHandler.unparsedEntityDecl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::EntityResolver}}.{{c2::resolveEntity}}({{c3::publicId}}, {{c4::systemId}})",
      "Body": "Resolve the system identifier of an entity and return either the system identifier to read from as a string, or an InputSource to read from. The default implementation returns systemId.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.EntityResolver.resolveEntity"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ErrorHandler}}.{{c2::error}}({{c3::exception}})",
      "Body": "Called when the parser encounters a recoverable error.  If this method does not raise an exception, parsing may continue, but further document information should not be expected by the application.  Allowing the parser to continue may allow additional errors to be discovered in the input document.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ErrorHandler.error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ErrorHandler}}.{{c2::fatalError}}({{c3::exception}})",
      "Body": "Called when the parser encounters an error it cannot recover from; parsing is expected to terminate when this method returns.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ErrorHandler.fatalError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ErrorHandler}}.{{c2::warning}}({{c3::exception}})",
      "Body": "Called when the parser presents minor warning information to the application. Parsing is expected to continue when this method returns, and document information will continue to be passed to the application. Raising an exception in this method will cause parsing to end.",
      "Link": "https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ErrorHandler.warning"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::saxutils}}.{{c4::escape}}({{c5::data}}, {{c6::entities}}={})",
      "Body": "Escape '&', '<', and '>' in a string of data.",
      "Link": "https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.escape"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::saxutils}}.{{c4::unescape}}({{c5::data}}, {{c6::entities}}={})",
      "Body": "Unescape '&amp;', '&lt;', and '&gt;' in a string of data.",
      "Link": "https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.unescape"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::saxutils}}.{{c4::quoteattr}}({{c5::data}}, {{c6::entities}}={})",
      "Body": "Similar to escape(), but also prepares data to be used as an attribute value.  The return value is a quoted version of data with any additional required replacements. quoteattr() will select a quote character based on the content of data, attempting to avoid encoding any quote characters in the string.  If both single- and double-quote characters are already in data, the double-quote characters will be encoded and data will be wrapped in double-quotes.  The resulting string can be used directly as an attribute value:",
      "Link": "https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.quoteattr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::saxutils}}.{{c5::XMLGenerator}}({{c6::out}}={{c7::None}}, {{c8::encoding}}='{{c9::iso}}-8859-1', {{c10::short_empty_elements}}={{c11::False}})",
      "Body": "This class implements the ContentHandler interface by writing SAX events back into an XML document. In other words, using an XMLGenerator as the content handler will reproduce the original document being parsed. out should be a file-like object which will default to sys.stdout. encoding is the encoding of the output stream which defaults to 'iso-8859-1'. short_empty_elements controls the formatting of elements that contain no content:  if False (the default) they are emitted as a pair of start/end tags, if set to True they are emitted as a single self-closed tag.",
      "Link": "https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.XMLGenerator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::saxutils}}.{{c5::XMLFilterBase}}({{c6::base}})",
      "Body": "This class is designed to sit between an XMLReader and the client application's event handlers.  By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through.",
      "Link": "https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.XMLFilterBase"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::sax}}.{{c3::saxutils}}.{{c4::prepare_input_source}}({{c5::source}}, {{c6::base}}='')",
      "Body": "This function takes an input source and an optional base URL and returns a fully resolved InputSource object ready for reading.  The input source can be given as a string, a file-like object, or an InputSource object; parsers will use this function to implement the polymorphic source argument to their parse() method.",
      "Link": "https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.prepare_input_source"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::xmlreader}}.{{c5::XMLReader}}",
      "Body": "Base class which can be inherited by SAX parsers.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::xmlreader}}.{{c5::IncrementalParser}}",
      "Body": "In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available. Note that the reader will normally not read the entire file, but read it in chunks as well; still parse() won't return until the entire document is processed. So these interfaces should be used if the blocking behaviour of parse() is not desirable.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.IncrementalParser"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::xmlreader}}.{{c5::Locator}}",
      "Body": "Interface for associating a SAX event with a document location. A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the results are unpredictable. If information is not available, methods may return None.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Locator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::xmlreader}}.{{c5::InputSource}}({{c6::system_id}}={{c7::None}})",
      "Body": "Encapsulation of the information needed by the XMLReader to read entities.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::xmlreader}}.{{c5::AttributesImpl}}({{c6::attrs}})",
      "Body": "This is an implementation of the Attributes interface (see section The Attributes Interface).  This is a dictionary-like object which represents the element attributes in a startElement() call. In addition to the most useful dictionary operations, it supports a number of other methods as described by the interface. Objects of this class should be instantiated by readers; attrs must be a dictionary-like object containing a mapping from attribute names to attribute values.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.AttributesImpl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xml}}.{{c3::sax}}.{{c4::xmlreader}}.{{c5::AttributesNSImpl}}({{c6::attrs}}, {{c7::qnames}})",
      "Body": "Namespace-aware variant of AttributesImpl, which will be passed to startElementNS(). It is derived from AttributesImpl, but understands attribute names as two-tuples of namespaceURI and localname. In addition, it provides a number of methods expecting qualified names as they appear in the original document.  This class implements the AttributesNS interface (see section The AttributesNS Interface).",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.AttributesNSImpl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::parse}}({{c3::source}})",
      "Body": "Process an input source, producing SAX events. The source object can be a system identifier (a string identifying the input source  typically a file name or a URL), a file-like object, or an InputSource object. When parse() returns, the input is completely processed, and the parser object can be discarded or reset.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::getContentHandler}}()",
      "Body": "Return the current ContentHandler.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.getContentHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::setContentHandler}}({{c3::handler}})",
      "Body": "Set the current ContentHandler.  If no ContentHandler is set, content events will be discarded.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.setContentHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::getDTDHandler}}()",
      "Body": "Return the current DTDHandler.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.getDTDHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::setDTDHandler}}({{c3::handler}})",
      "Body": "Set the current DTDHandler.  If no DTDHandler is set, DTD events will be discarded.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.setDTDHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::getEntityResolver}}()",
      "Body": "Return the current EntityResolver.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.getEntityResolver"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::setEntityResolver}}({{c3::handler}})",
      "Body": "Set the current EntityResolver.  If no EntityResolver is set, attempts to resolve an external entity will result in opening the system identifier for the entity, and fail if it is not available.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.setEntityResolver"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::getErrorHandler}}()",
      "Body": "Return the current ErrorHandler.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.getErrorHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::setErrorHandler}}({{c3::handler}})",
      "Body": "Set the current error handler.  If no ErrorHandler is set, errors will be raised as exceptions, and warnings will be printed.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.setErrorHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::setLocale}}({{c3::locale}})",
      "Body": "Allow an application to set the locale for errors and warnings.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.setLocale"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::getFeature}}({{c3::featurename}})",
      "Body": "Return the current setting for feature featurename.  If the feature is not recognized, SAXNotRecognizedException is raised. The well-known featurenames are listed in the module xml.sax.handler.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.getFeature"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::setFeature}}({{c3::featurename}}, {{c4::value}})",
      "Body": "Set the featurename to value. If the feature is not recognized, SAXNotRecognizedException is raised. If the feature or its setting is not supported by the parser, SAXNotSupportedException is raised.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.setFeature"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::getProperty}}({{c3::propertyname}})",
      "Body": "Return the current setting for property propertyname. If the property is not recognized, a SAXNotRecognizedException is raised. The well-known propertynames are listed in the module xml.sax.handler.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.getProperty"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::XMLReader}}.{{c2::setProperty}}({{c3::propertyname}}, {{c4::value}})",
      "Body": "Set the propertyname to value. If the property is not recognized, SAXNotRecognizedException is raised. If the property or its setting is not supported by the parser, SAXNotSupportedException is raised.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.XMLReader.setProperty"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IncrementalParser}}.{{c2::feed}}({{c3::data}})",
      "Body": "Process a chunk of data.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.IncrementalParser.feed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IncrementalParser}}.{{c2::close}}()",
      "Body": "Assume the end of the document. That will check well-formedness conditions that can be checked only at the end, invoke handlers, and may clean up resources allocated during parsing.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.IncrementalParser.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IncrementalParser}}.{{c2::reset}}()",
      "Body": "This method is called after close has been called to reset the parser so that it is ready to parse new documents. The results of calling parse or feed after close without calling reset are undefined.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.IncrementalParser.reset"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Locator}}.{{c2::getColumnNumber}}()",
      "Body": "Return the column number where the current event begins.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Locator.getColumnNumber"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Locator}}.{{c2::getLineNumber}}()",
      "Body": "Return the line number where the current event begins.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Locator.getLineNumber"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Locator}}.{{c2::getPublicId}}()",
      "Body": "Return the public identifier for the current event.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Locator.getPublicId"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Locator}}.{{c2::getSystemId}}()",
      "Body": "Return the system identifier for the current event.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Locator.getSystemId"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::setPublicId}}({{c3::id}})",
      "Body": "Sets the public identifier of this InputSource.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.setPublicId"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::getPublicId}}()",
      "Body": "Returns the public identifier of this InputSource.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.getPublicId"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::setSystemId}}({{c3::id}})",
      "Body": "Sets the system identifier of this InputSource.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.setSystemId"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::getSystemId}}()",
      "Body": "Returns the system identifier of this InputSource.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.getSystemId"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::setEncoding}}({{c3::encoding}})",
      "Body": "Sets the character encoding of this InputSource.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.setEncoding"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::getEncoding}}()",
      "Body": "Get the character encoding of this InputSource.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.getEncoding"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::setByteStream}}({{c3::bytefile}})",
      "Body": "Set the byte stream (a binary file) for this input source.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.setByteStream"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::getByteStream}}()",
      "Body": "Get the byte stream for this input source.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.getByteStream"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::setCharacterStream}}({{c3::charfile}})",
      "Body": "Set the character stream (a text file) for this input source.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.setCharacterStream"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::InputSource}}.{{c2::getCharacterStream}}()",
      "Body": "Get the character stream for this input source.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.InputSource.getCharacterStream"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Attributes}}.{{c2::getLength}}()",
      "Body": "Return the number of attributes.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Attributes.getLength"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Attributes}}.{{c2::getNames}}()",
      "Body": "Return the names of the attributes.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Attributes.getNames"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Attributes}}.{{c2::getType}}({{c3::name}})",
      "Body": "Returns the type of the attribute name, which is normally 'CDATA'.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Attributes.getType"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Attributes}}.{{c2::getValue}}({{c3::name}})",
      "Body": "Return the value of attribute name.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Attributes.getValue"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AttributesNS}}.{{c2::getValueByQName}}({{c3::name}})",
      "Body": "Return the value for a qualified name.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.AttributesNS.getValueByQName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AttributesNS}}.{{c2::getNameByQName}}({{c3::name}})",
      "Body": "Return the (namespace, localname) pair for a qualified name.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.AttributesNS.getNameByQName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AttributesNS}}.{{c2::getQNameByName}}({{c3::name}})",
      "Body": "Return the qualified name for a (namespace, localname) pair.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.AttributesNS.getQNameByName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AttributesNS}}.{{c2::getQNames}}()",
      "Body": "Return the qualified names of all attributes.",
      "Link": "https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.AttributesNS.getQNames"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::parsers}}.{{c4::expat}}.{{c5::ExpatError}}",
      "Body": "The exception raised when Expat reports an error.  See section ExpatError Exceptions for more information on interpreting Expat errors.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.ExpatError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::xml}}.{{c3::parsers}}.{{c4::expat}}.{{c5::error}}",
      "Body": "Alias for ExpatError.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::XMLParserType}}",
      "Body": "The type of the return values from the ParserCreate() function.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.XMLParserType"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::ErrorString}}({{c5::errno}})",
      "Body": "Returns an explanatory string for a given error number errno.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.ErrorString"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::ParserCreate}}({{c5::encoding}}={{c6::None}}, {{c7::namespace_separator}}={{c8::None}})",
      "Body": "Creates and returns a new xmlparser object.   encoding, if specified, must be a string naming the encoding  used by the XML data.  Expat doesn't support as many encodings as Python does, and its repertoire of encodings can't be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII.  If encoding [1] is given it will override the implicit or explicit encoding of the document.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.ParserCreate"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::Parse}}({{c3::data}}[, {{c4::isfinal}}])",
      "Body": "Parses the contents of the string data, calling the appropriate handler functions to process the parsed data.  isfinal must be true on the final call to this method; it allows the parsing of a single file in fragments, not the submission of multiple files. data can be the empty string at any time.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.Parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ParseFile}}({{c3::file}})",
      "Body": "Parse XML data reading from the object file.  file only needs to provide the read(nbytes) method, returning the empty string when there's no more data.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ParseFile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::SetBase}}({{c3::base}})",
      "Body": "Sets the base to be used for resolving relative URIs in system identifiers in declarations.  Resolving relative identifiers is left to the application: this value will be passed through as the base argument to the ExternalEntityRefHandler(), NotationDeclHandler(), and UnparsedEntityDeclHandler() functions.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.SetBase"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::GetBase}}()",
      "Body": "Returns a string containing the base set by a previous call to SetBase(), or None if  SetBase() hasn't been called.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.GetBase"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::GetInputContext}}()",
      "Body": "Returns the input data that generated the current event as a string. The data is in the encoding of the entity which contains the text. When called while an event handler is not active, the return value is None.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.GetInputContext"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ExternalEntityParserCreate}}({{c3::context}}[, {{c4::encoding}}])",
      "Body": "Create a child parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser.  The context parameter should be the string passed to the ExternalEntityRefHandler() handler function, described below. The child parser is created with the ordered_attributes and specified_attributes set to the values of this parser.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ExternalEntityParserCreate"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::SetParamEntityParsing}}({{c3::flag}})",
      "Body": "Control parsing of parameter entities (including the external DTD subset). Possible flag values are XML_PARAM_ENTITY_PARSING_NEVER, XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE and XML_PARAM_ENTITY_PARSING_ALWAYS.  Return true if setting the flag was successful.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.SetParamEntityParsing"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::UseForeignDTD}}([{{c3::flag}}])",
      "Body": "Calling this with a true value for flag (the default) will cause Expat to call the ExternalEntityRefHandler with None for all arguments to allow an alternate DTD to be loaded.  If the document does not contain a document type declaration, the ExternalEntityRefHandler will still be called, but the StartDoctypeDeclHandler and EndDoctypeDeclHandler will not be called.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.UseForeignDTD"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::buffer_size}}",
      "Body": "The size of the buffer used when buffer_text is true. A new buffer size can be set by assigning a new integer value to this attribute. When the size is changed, the buffer will be flushed.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.buffer_size"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::buffer_text}}",
      "Body": "Setting this to true causes the xmlparser object to buffer textual content returned by Expat to avoid multiple calls to the CharacterDataHandler() callback whenever possible.  This can improve performance substantially since Expat normally breaks character data into chunks at every line ending.  This attribute is false by default, and may be changed at any time.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.buffer_text"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::buffer_used}}",
      "Body": "If buffer_text is enabled, the number of bytes stored in the buffer. These bytes represent UTF-8 encoded text.  This attribute has no meaningful interpretation when buffer_text is false.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.buffer_used"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ordered_attributes}}",
      "Body": "Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.  The attributes are presented in the order found in the document text.  For each attribute, two list entries are presented: the attribute name and the attribute value.  (Older versions of this module also used this format.)  By default, this attribute is false; it may be changed at any time.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ordered_attributes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::specified_attributes}}",
      "Body": "If set to a non-zero integer, the parser will report only those attributes which were specified in the document instance and not those which were derived from attribute declarations.  Applications which set this need to be especially careful to use what additional information is available from the declarations as needed to comply with the standards for the behavior of XML processors.  By default, this attribute is false; it may be changed at any time.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.specified_attributes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ErrorByteIndex}}",
      "Body": "Byte index at which an error occurred.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ErrorByteIndex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ErrorCode}}",
      "Body": "Numeric code specifying the problem.  This value can be passed to the ErrorString() function, or compared to one of the constants defined in the errors object.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ErrorCode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ErrorColumnNumber}}",
      "Body": "Column number at which an error occurred.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ErrorColumnNumber"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ErrorLineNumber}}",
      "Body": "Line number at which an error occurred.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ErrorLineNumber"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::CurrentByteIndex}}",
      "Body": "Current byte index in the parser input.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.CurrentByteIndex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::CurrentColumnNumber}}",
      "Body": "Current column number in the parser input.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.CurrentColumnNumber"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::CurrentLineNumber}}",
      "Body": "Current line number in the parser input.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.CurrentLineNumber"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::XmlDeclHandler}}({{c3::version}}, {{c4::encoding}}, {{c5::standalone}})",
      "Body": "Called when the XML declaration is parsed.  The XML declaration is the (optional) declaration of the applicable version of the XML recommendation, the encoding of the document text, and an optional standalone declaration. version and encoding will be strings, and standalone will be 1 if the document is declared standalone, 0 if it is declared not to be standalone, or -1 if the standalone clause was omitted. This is only available with Expat version 1.95.0 or newer.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.XmlDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::StartDoctypeDeclHandler}}({{c3::doctypeName}}, {{c4::systemId}}, {{c5::publicId}}, {{c6::has_internal_subset}})",
      "Body": "Called when Expat begins parsing the document type declaration (<!DOCTYPE ...).  The doctypeName is provided exactly as presented.  The systemId and publicId parameters give the system and public identifiers if specified, or None if omitted.  has_internal_subset will be true if the document contains and internal document declaration subset. This requires Expat version 1.2 or newer.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.StartDoctypeDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::EndDoctypeDeclHandler}}()",
      "Body": "Called when Expat is done parsing the document type declaration. This requires Expat version 1.2 or newer.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.EndDoctypeDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ElementDeclHandler}}({{c3::name}}, {{c4::model}})",
      "Body": "Called once for each element type declaration.  name is the name of the element type, and model is a representation of the content model.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ElementDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::AttlistDeclHandler}}({{c3::elname}}, {{c4::attname}}, {{c5::type}}, {{c6::default}}, {{c7::required}})",
      "Body": "Called for each declared attribute for an element type.  If an attribute list declaration declares three attributes, this handler is called three times, once for each attribute.  elname is the name of the element to which the declaration applies and attname is the name of the attribute declared.  The attribute type is a string passed as type; the possible values are 'CDATA', 'ID', 'IDREF',  default gives the default value for the attribute used when the attribute is not specified by the document instance, or None if there is no default value (#IMPLIED values).  If the attribute is required to be given in the document instance, required will be true. This requires Expat version 1.95.0 or newer.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.AttlistDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::StartElementHandler}}({{c3::name}}, {{c4::attributes}})",
      "Body": "Called for the start of every element.  name is a string containing the element name, and attributes is the element attributes. If ordered_attributes is true, this is a list (see ordered_attributes for a full description). Otherwise it's a dictionary mapping names to values.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.StartElementHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::EndElementHandler}}({{c3::name}})",
      "Body": "Called for the end of every element.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.EndElementHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ProcessingInstructionHandler}}({{c3::target}}, {{c4::data}})",
      "Body": "Called for every processing instruction.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ProcessingInstructionHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::CharacterDataHandler}}({{c3::data}})",
      "Body": "Called for character data.  This will be called for normal character data, CDATA marked content, and ignorable whitespace.  Applications which must distinguish these cases can use the StartCdataSectionHandler, EndCdataSectionHandler, and ElementDeclHandler callbacks to collect the required information.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.CharacterDataHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::UnparsedEntityDeclHandler}}({{c3::entityName}}, {{c4::base}}, {{c5::systemId}}, {{c6::publicId}}, {{c7::notationName}})",
      "Body": "Called for unparsed (NDATA) entity declarations.  This is only present for version 1.2 of the Expat library; for more recent versions, use EntityDeclHandler instead.  (The underlying function in the Expat library has been declared obsolete.)",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::EntityDeclHandler}}({{c3::entityName}}, {{c4::is_parameter_entity}}, {{c5::value}}, {{c6::base}}, {{c7::systemId}}, {{c8::publicId}}, {{c9::notationName}})",
      "Body": "Called for all entity declarations.  For parameter and internal entities, value will be a string giving the declared contents of the entity; this will be None for external entities.  The notationName parameter will be None for parsed entities, and the name of the notation for unparsed entities. is_parameter_entity will be true if the entity is a parameter entity or false for general entities (most applications only need to be concerned with general entities). This is only available starting with version 1.95.0 of the Expat library.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.EntityDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::NotationDeclHandler}}({{c3::notationName}}, {{c4::base}}, {{c5::systemId}}, {{c6::publicId}})",
      "Body": "Called for notation declarations.  notationName, base, and systemId, and publicId are strings if given.  If the public identifier is omitted, publicId will be None.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.NotationDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::StartNamespaceDeclHandler}}({{c3::prefix}}, {{c4::uri}})",
      "Body": "Called when an element contains a namespace declaration.  Namespace declarations are processed before the StartElementHandler is called for the element on which declarations are placed.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.StartNamespaceDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::EndNamespaceDeclHandler}}({{c3::prefix}})",
      "Body": "Called when the closing tag is reached for an element  that contained a namespace declaration.  This is called once for each namespace declaration on the element in the reverse of the order for which the StartNamespaceDeclHandler was called to indicate the start of each namespace declaration's scope.  Calls to this handler are made after the corresponding EndElementHandler for the end of the element.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.EndNamespaceDeclHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::CommentHandler}}({{c3::data}})",
      "Body": "Called for comments.  data is the text of the comment, excluding the leading '<!--' and trailing '-->'.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.CommentHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::StartCdataSectionHandler}}()",
      "Body": "Called at the start of a CDATA section.  This and EndCdataSectionHandler are needed to be able to identify the syntactical start and end for CDATA sections.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.StartCdataSectionHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::EndCdataSectionHandler}}()",
      "Body": "Called at the end of a CDATA section.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.EndCdataSectionHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::DefaultHandler}}({{c3::data}})",
      "Body": "Called for any characters in the XML document for which no applicable handler has been specified.  This means characters that are part of a construct which could be reported, but for which no handler has been supplied.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.DefaultHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::DefaultHandlerExpand}}({{c3::data}})",
      "Body": "This is the same as the DefaultHandler(),  but doesn't inhibit expansion of internal entities. The entity reference will not be passed to the default handler.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.DefaultHandlerExpand"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::NotStandaloneHandler}}()",
      "Body": "Called if the XML document hasn't been declared as being a standalone document. This happens when there is an external subset or a reference to a parameter entity, but the XML declaration does not set standalone to yes in an XML declaration.  If this handler returns 0, then the parser will raise an XML_ERROR_NOT_STANDALONE error.  If this handler is not set, no exception is raised by the parser for this condition.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.NotStandaloneHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlparser}}.{{c2::ExternalEntityRefHandler}}({{c3::context}}, {{c4::base}}, {{c5::systemId}}, {{c6::publicId}})",
      "Body": "Called for references to external entities.  base is the current base, as set by a previous call to SetBase().  The public and system identifiers, systemId and publicId, are strings if given; if the public identifier is not given, publicId will be None.  The context value is opaque and should only be used as described below.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.xmlparser.ExternalEntityRefHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ExpatError}}.{{c2::code}}",
      "Body": "Expat's internal error number for the specific error.  The errors.messages dictionary maps these error numbers to Expat's error messages.  For example:",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.ExpatError.code"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ExpatError}}.{{c2::lineno}}",
      "Body": "Line number on which the error was detected.  The first line is numbered 1.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.ExpatError.lineno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ExpatError}}.{{c2::offset}}",
      "Body": "Character offset into the line where the error occurred.  The first column is numbered 0.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.ExpatError.offset"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::model}}.{{c5::XML_CTYPE_ANY}}",
      "Body": "The element named by the model name was declared to have a content model of ANY.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.model"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::model}}.{{c5::XML_CTYPE_CHOICE}}",
      "Body": "The named element allows a choice from a number of options; this is used for content models such as (A | B | C).",
      "Link": "https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.model"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::model}}.{{c5::XML_CTYPE_EMPTY}}",
      "Body": "Elements which are declared to be EMPTY have this model type.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.model"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::model}}.{{c5::XML_CTYPE_SEQ}}",
      "Body": "Models which represent a series of models which follow one after the other are indicated with this model type.  This is used for models such as (A, B, C).",
      "Link": "https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.model"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::model}}.{{c5::XML_CQUANT_NONE}}",
      "Body": "No modifier is given, so it can appear exactly once, as for A.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.model"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::model}}.{{c5::XML_CQUANT_OPT}}",
      "Body": "The model is optional: it can appear once or not at all, as for A?.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.model"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::model}}.{{c5::XML_CQUANT_PLUS}}",
      "Body": "The model must occur one or more times (like A+).",
      "Link": "https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.model"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::model}}.{{c5::XML_CQUANT_REP}}",
      "Body": "The model must occur zero or more times, as for A*.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.model"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::codes}}",
      "Body": "A dictionary mapping numeric error codes to their string descriptions.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.codes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::messages}}",
      "Body": "A dictionary mapping string descriptions to their error codes.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.messages"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF}}",
      "Body": "An entity reference in an attribute value referred to an external entity instead of an internal entity.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_BAD_CHAR_REF}}",
      "Body": "A character reference referred to a character which is illegal in XML (for example, character 0, or '&#0;').",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_BINARY_ENTITY_REF}}",
      "Body": "An entity reference referred to an entity which was declared with a notation, so cannot be parsed.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_DUPLICATE_ATTRIBUTE}}",
      "Body": "An attribute was used more than once in a start tag.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_INVALID_TOKEN}}",
      "Body": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_JUNK_AFTER_DOC_ELEMENT}}",
      "Body": "Something other than whitespace occurred after the document element.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_MISPLACED_XML_PI}}",
      "Body": "An XML declaration was found somewhere other than the start of the input data.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_NO_ELEMENTS}}",
      "Body": "The document contains no elements (XML requires all documents to contain exactly one top-level element)..",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_NO_MEMORY}}",
      "Body": "Expat was not able to allocate memory internally.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_PARAM_ENTITY_REF}}",
      "Body": "A parameter entity reference was found where it was not allowed.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_PARTIAL_CHAR}}",
      "Body": "An incomplete character was found in the input.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_RECURSIVE_ENTITY_REF}}",
      "Body": "An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_SYNTAX}}",
      "Body": "Some unspecified syntax error was encountered.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_SYNTAX"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_TAG_MISMATCH}}",
      "Body": "An end tag did not match the innermost open start tag.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_UNCLOSED_TOKEN}}",
      "Body": "Some token (such as a start tag) was not closed before the end of the stream or the next token was encountered.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_UNDEFINED_ENTITY}}",
      "Body": "A reference was made to an entity which was not defined.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_UNKNOWN_ENCODING}}",
      "Body": "The document encoding is not supported by Expat.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_UNCLOSED_CDATA_SECTION}}",
      "Body": "A CDATA marked section was not closed.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_NOT_STANDALONE}}",
      "Body": "The parser determined that the document was not standalone though it declared itself to be in the XML declaration, and the NotStandaloneHandler was set and returned 0.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_FEATURE_REQUIRES_XML_DTD}}",
      "Body": "An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support.  This should never be reported by a standard build of the xml.parsers.expat module.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING}}",
      "Body": "A behavioral change was requested after parsing started that can only be changed before parsing has started.  This is (currently) only raised by UseForeignDTD().",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_UNBOUND_PREFIX}}",
      "Body": "An undeclared prefix was found when namespace processing was enabled.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_UNDECLARING_PREFIX}}",
      "Body": "The document attempted to remove the namespace declaration associated with a prefix.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_INCOMPLETE_PE}}",
      "Body": "A parameter entity contained incomplete markup.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_XML_DECL}}",
      "Body": "The document contained no document element at all.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_XML_DECL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_TEXT_DECL}}",
      "Body": "There was an error parsing a text declaration in an external entity.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_PUBLICID}}",
      "Body": "Characters were found in the public id that are not allowed.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_PUBLICID"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_SUSPENDED}}",
      "Body": "The requested operation was made on a suspended parser, but isn't allowed.  This includes attempts to provide additional input or to stop the parser.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_SUSPENDED"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_NOT_SUSPENDED}}",
      "Body": "An attempt to resume the parser was made when the parser had not been suspended.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_ABORTED}}",
      "Body": "This should not be reported to Python applications.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_ABORTED"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Structured Markup Processing Tools",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xml}}.{{c2::parsers}}.{{c3::expat}}.{{c4::errors}}.{{c5::XML_ERROR_FINISHED}}",
      "Body": "The requested operation was made on a parser which was finished parsing input, but isn't allowed.  This includes attempts to provide additional input or to stop the parser.",
      "Link": "https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_FINISHED"
    },
    "modelName": "ClozePy"
  }
]
