[
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::socket}}.{{c3::error}}",
      "Body": "A deprecated alias of OSError.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::socket}}.{{c3::herror}}",
      "Body": "A subclass of OSError, this exception is raised for address-related errors, i.e. for functions that use h_errno in the POSIX C API, including gethostbyname_ex() and gethostbyaddr(). The accompanying value is a pair (h_errno, string) representing an error returned by a library call.  h_errno is a numeric value, while string represents the description of h_errno, as returned by the hstrerror() C function.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.herror"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::socket}}.{{c3::gaierror}}",
      "Body": "A subclass of OSError, this exception is raised for address-related errors by getaddrinfo() and getnameinfo(). The accompanying value is a pair (error, string) representing an error returned by a library call.  string represents the description of error, as returned by the gai_strerror() C function.  The numeric error value will match one of the EAI_* constants defined in this module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.gaierror"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::socket}}.{{c3::timeout}}",
      "Body": "A subclass of OSError, this exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to settimeout() (or implicitly through setdefaulttimeout()).  The accompanying value is a string whose value is currently always timed out.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.timeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_UNIX}}",
      "Body": "These constants represent the address (and protocol) families, used for the first argument to socket().  If the AF_UNIX constant is not defined then this protocol is unsupported.  More constants may be available depending on the system.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_UNIX"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_INET}}",
      "Body": "These constants represent the address (and protocol) families, used for the first argument to socket().  If the AF_UNIX constant is not defined then this protocol is unsupported.  More constants may be available depending on the system.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_INET"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_INET}}6",
      "Body": "These constants represent the address (and protocol) families, used for the first argument to socket().  If the AF_UNIX constant is not defined then this protocol is unsupported.  More constants may be available depending on the system.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_INET6"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOCK_STREAM}}",
      "Body": "These constants represent the socket types, used for the second argument to socket().  More constants may be available depending on the system. (Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOCK_DGRAM}}",
      "Body": "These constants represent the socket types, used for the second argument to socket().  More constants may be available depending on the system. (Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOCK_DGRAM"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOCK_RAW}}",
      "Body": "These constants represent the socket types, used for the second argument to socket().  More constants may be available depending on the system. (Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOCK_RAW"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOCK_RDM}}",
      "Body": "These constants represent the socket types, used for the second argument to socket().  More constants may be available depending on the system. (Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOCK_RDM"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOCK_SEQPACKET}}",
      "Body": "These constants represent the socket types, used for the second argument to socket().  More constants may be available depending on the system. (Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOCK_SEQPACKET"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOCK_CLOEXEC}}",
      "Body": "These two constants, if defined, can be combined with the socket types and allow you to set some flags atomically (thus avoiding possible race conditions and the need for separate calls).",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOCK_CLOEXEC"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOCK_NONBLOCK}}",
      "Body": "These two constants, if defined, can be combined with the socket types and allow you to set some flags atomically (thus avoiding possible race conditions and the need for separate calls).",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOCK_NONBLOCK"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SO_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOMAXCONN}}",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOMAXCONN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::MSG_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SOL_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SCM_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IPPROTO_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IPPORT_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::INADDR_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IP_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IPV}}6{{c2::_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::EAI_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AI_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NI_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::TCP_}}*",
      "Body": "Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_CAN}}",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_CAN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::PF_CAN}}",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.PF_CAN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SOL_CAN_}}*",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CAN_}}*",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::CAN_BCM}}",
      "Body": "CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol. Broadcast manager constants, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.CAN_BCM"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CAN_BCM_}}*",
      "Body": "CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol. Broadcast manager constants, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::CAN_RAW_FD_FRAMES}}",
      "Body": "Enables CAN FD support in a CAN_RAW socket. This is disabled by default. This allows your application to send both CAN and CAN FD frames; however, you one must accept both CAN and CAN FD frames when reading from the socket.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.CAN_RAW_FD_FRAMES"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::CAN_ISOTP}}",
      "Body": "CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol. ISO-TP constants, documented in the Linux documentation.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.CAN_ISOTP"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_PACKET}}",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_PACKET"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::PF_PACKET}}",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.PF_PACKET"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::PACKET_}}*",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_RDS}}",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_RDS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::PF_RDS}}",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.PF_RDS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOL_RDS}}",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOL_RDS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::RDS_}}*",
      "Body": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SIO_RCVALL}}",
      "Body": "Constants for Windows' WSAIoctl(). The constants are used as arguments to the ioctl() method of socket objects.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SIO_RCVALL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SIO_KEEPALIVE_VALS}}",
      "Body": "Constants for Windows' WSAIoctl(). The constants are used as arguments to the ioctl() method of socket objects.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SIO_KEEPALIVE_VALS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SIO_LOOPBACK_FAST_PATH}}",
      "Body": "Constants for Windows' WSAIoctl(). The constants are used as arguments to the ioctl() method of socket objects.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SIO_LOOPBACK_FAST_PATH"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::RCVALL_}}*",
      "Body": "Constants for Windows' WSAIoctl(). The constants are used as arguments to the ioctl() method of socket objects.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::TIPC_}}*",
      "Body": "TIPC related constants, matching the ones exported by the C socket API. See the TIPC documentation for more information.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_ALG}}",
      "Body": "Constants for Linux Kernel cryptography.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_ALG"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SOL_ALG}}",
      "Body": "Constants for Linux Kernel cryptography.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SOL_ALG"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ALG_}}*",
      "Body": "Constants for Linux Kernel cryptography.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_VSOCK}}",
      "Body": "Constants for Linux host/guest communication.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_VSOCK"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::IOCTL_VM_SOCKETS_GET_LOCAL_CID}}",
      "Body": "Constants for Linux host/guest communication.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::VMADDR}}*",
      "Body": "Constants for Linux host/guest communication.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SO_VM}}*",
      "Body": "Constants for Linux host/guest communication.",
      "Link": "https://docs.python.org/3/library/socket.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::AF_LINK}}",
      "Body": "Availability: BSD, OSX.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.AF_LINK"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::has_ipv}}6",
      "Body": "This constant contains a boolean value which indicates if IPv6 is supported on this platform.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.has_ipv6"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::BDADDR_ANY}}",
      "Body": "These are string constants containing Bluetooth addresses with special meanings. For example, BDADDR_ANY can be used to indicate any address when specifying the binding socket with BTPROTO_RFCOMM.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.BDADDR_ANY"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::BDADDR_LOCAL}}",
      "Body": "These are string constants containing Bluetooth addresses with special meanings. For example, BDADDR_ANY can be used to indicate any address when specifying the binding socket with BTPROTO_RFCOMM.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.BDADDR_LOCAL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::HCI_FILTER}}",
      "Body": "For use with BTPROTO_HCI. HCI_FILTER is not available for NetBSD or DragonFlyBSD. HCI_TIME_STAMP and HCI_DATA_DIR are not available for FreeBSD, NetBSD, or DragonFlyBSD.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.HCI_FILTER"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::HCI_TIME_STAMP}}",
      "Body": "For use with BTPROTO_HCI. HCI_FILTER is not available for NetBSD or DragonFlyBSD. HCI_TIME_STAMP and HCI_DATA_DIR are not available for FreeBSD, NetBSD, or DragonFlyBSD.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.HCI_TIME_STAMP"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::HCI_DATA_DIR}}",
      "Body": "For use with BTPROTO_HCI. HCI_FILTER is not available for NetBSD or DragonFlyBSD. HCI_TIME_STAMP and HCI_DATA_DIR are not available for FreeBSD, NetBSD, or DragonFlyBSD.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.HCI_DATA_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::socket}}({{c3::family}}={{c4::AF_INET}}, {{c5::type}}={{c6::SOCK_STREAM}}, {{c7::proto}}=0, {{c8::fileno}}={{c9::None}})",
      "Body": "Create a new socket using the given address family, socket type and protocol number.  The address family should be AF_INET (the default), AF_INET6, AF_UNIX, AF_CAN, AF_PACKET, or AF_RDS. The socket type should be SOCK_STREAM (the default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other SOCK_ constants. The protocol number is usually zero and may be omitted or in the case where the address family is AF_CAN the protocol should be one of CAN_RAW, CAN_BCM or CAN_ISOTP.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::socketpair}}([{{c3::family}}[, {{c4::type}}[, {{c5::proto}}]]])",
      "Body": "Build a pair of connected socket objects using the given address family, socket type, and protocol number.  Address family, socket type, and protocol number are as for the socket() function above. The default family is AF_UNIX if defined on the platform; otherwise, the default is AF_INET.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socketpair"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::create_connection}}({{c3::address}}[, {{c4::timeout}}[, {{c5::source_address}}]])",
      "Body": "Connect to a TCP service listening on the Internet address (a 2-tuple (host, port)), and return the socket object.  This is a higher-level function than socket.connect(): if host is a non-numeric hostname, it will try to resolve it for both AF_INET and AF_INET6, and then try to connect to all possible addresses in turn until a connection succeeds.  This makes it easy to write clients that are compatible to both IPv4 and IPv6.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.create_connection"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::fromfd}}({{c3::fd}}, {{c4::family}}, {{c5::type}}, {{c6::proto}}=0)",
      "Body": "Duplicate the file descriptor fd (an integer as returned by a file object's fileno() method) and build a socket object from the result.  Address family, socket type and protocol number are as for the socket() function above. The file descriptor should refer to a socket, but this is not checked  subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon).  The socket is assumed to be in blocking mode.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.fromfd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::fromshare}}({{c3::data}})",
      "Body": "Instantiate a socket from data obtained from the socket.share() method.  The socket is assumed to be in blocking mode.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.fromshare"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::SocketType}}",
      "Body": "This is a Python type object that represents the socket object type. It is the same as type(socket(...)).",
      "Link": "https://docs.python.org/3/library/socket.html#socket.SocketType"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::close}}({{c3::fd}})",
      "Body": "Close a socket file descriptor. This is like os.close(), but for sockets. On some platforms (most noticeable Windows) os.close() does not work for socket file descriptors.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getaddrinfo}}({{c3::host}}, {{c4::port}}, {{c5::family}}=0, {{c6::type}}=0, {{c7::proto}}=0, {{c8::flags}}=0)",
      "Body": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. host is a domain name, a string representation of an IPv4/v6 address or None. port is a string service name such as 'http', a numeric port number or None.  By passing None as the value of host and port, you can pass NULL to the underlying C API.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.getaddrinfo"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getfqdn}}([{{c3::name}}])",
      "Body": "Return a fully qualified domain name for name. If name is omitted or empty, it is interpreted as the local host.  To find the fully qualified name, the hostname returned by gethostbyaddr() is checked, followed by aliases for the host, if available.  The first name which includes a period is selected.  In case no fully qualified domain name is available, the hostname as returned by gethostname() is returned.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.getfqdn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::gethostbyname}}({{c3::hostname}})",
      "Body": "Translate a host name to IPv4 address format.  The IPv4 address is returned as a string, such as  '100.50.200.5'.  If the host name is an IPv4 address itself it is returned unchanged.  See gethostbyname_ex() for a more complete interface. gethostbyname() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.gethostbyname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::gethostbyname_ex}}({{c3::hostname}})",
      "Body": "Translate a host name to IPv4 address format, extended interface. Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). gethostbyname_ex() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.gethostbyname_ex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::gethostname}}()",
      "Body": "Return a string containing the hostname of the machine where  the Python interpreter is currently executing.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.gethostname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::gethostbyaddr}}({{c3::ip_address}})",
      "Body": "Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address). To find the fully qualified domain name, use the function getfqdn(). gethostbyaddr() supports both IPv4 and IPv6.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.gethostbyaddr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getnameinfo}}({{c3::sockaddr}}, {{c4::flags}})",
      "Body": "Translate a socket address sockaddr into a 2-tuple (host, port). Depending on the settings of flags, the result can contain a fully-qualified domain name or numeric address representation in host.  Similarly, port can contain a string port name or a numeric port number.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.getnameinfo"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getprotobyname}}({{c3::protocolname}})",
      "Body": "Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function.  This is usually only needed for sockets opened in raw mode (SOCK_RAW); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.getprotobyname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getservbyname}}({{c3::servicename}}[, {{c4::protocolname}}])",
      "Body": "Translate an Internet service name and protocol name to a port number for that service.  The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.getservbyname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getservbyport}}({{c3::port}}[, {{c4::protocolname}}])",
      "Body": "Translate an Internet port number and protocol name to a service name for that service.  The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.getservbyport"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::ntohl}}({{c3::x}})",
      "Body": "Convert 32-bit positive integers from network to host byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.ntohl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::ntohs}}({{c3::x}})",
      "Body": "Convert 16-bit positive integers from network to host byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.ntohs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::htonl}}({{c3::x}})",
      "Body": "Convert 32-bit positive integers from host to network byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.htonl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::htons}}({{c3::x}})",
      "Body": "Convert 16-bit positive integers from host to network byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.htons"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::inet_aton}}({{c3::ip_string}})",
      "Body": "Convert an IPv4 address from dotted-quad string format (for example, '123.45.67.89') to 32-bit packed binary format, as a bytes object four characters in length.  This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary this function returns.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.inet_aton"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::inet_ntoa}}({{c3::packed_ip}})",
      "Body": "Convert a 32-bit packed IPv4 address (a bytes-like object four bytes in length) to its standard dotted-quad string representation (for example, '123.45.67.89').  This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary data this function takes as an argument.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.inet_ntoa"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::inet_pton}}({{c3::address_family}}, {{c4::ip_string}})",
      "Body": "Convert an IP address from its family-specific string format to a packed, binary format. inet_pton() is useful when a library or network protocol calls for an object of type struct in_addr (similar to inet_aton()) or struct in6_addr.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.inet_pton"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::inet_ntop}}({{c3::address_family}}, {{c4::packed_ip}})",
      "Body": "Convert a packed IP address (a bytes-like object of some number of bytes) to its standard, family-specific string representation (for example, '7.10.0.5' or '5aef:2b::8'). inet_ntop() is useful when a library or network protocol returns an object of type struct in_addr (similar to inet_ntoa()) or struct in6_addr.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.inet_ntop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::CMSG_LEN}}({{c3::length}})",
      "Body": "Return the total length, without trailing padding, of an ancillary data item with associated data of the given length.  This value can often be used as the buffer size for recvmsg() to receive a single item of ancillary data, but RFC 3542 requires portable applications to use CMSG_SPACE() and thus include space for padding, even when the item will be the last in the buffer.  Raises OverflowError if length is outside the permissible range of values.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.CMSG_LEN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::CMSG_SPACE}}({{c3::length}})",
      "Body": "Return the buffer size needed for recvmsg() to receive an ancillary data item with associated data of the given length, along with any trailing padding.  The buffer space needed to receive multiple items is the sum of the CMSG_SPACE() values for their associated data lengths.  Raises OverflowError if length is outside the permissible range of values.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.CMSG_SPACE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getdefaulttimeout}}()",
      "Body": "Return the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::setdefaulttimeout}}({{c3::timeout}})",
      "Body": "Set the default timeout in seconds (float) for new socket objects.  When the socket module is first imported, the default is None.  See settimeout() for possible values and their respective meanings.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.setdefaulttimeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::sethostname}}({{c3::name}})",
      "Body": "Set the machine's hostname to name.  This will raise an OSError if you don't have enough rights.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.sethostname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::if_nameindex}}()",
      "Body": "Return a list of network interface information (index int, name string) tuples. OSError if the system call fails.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.if_nameindex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::if_nametoindex}}({{c3::if_name}})",
      "Body": "Return a network interface index number corresponding to an interface name. OSError if no interface with the given name exists.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.if_nametoindex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::if_indextoname}}({{c3::if_index}})",
      "Body": "Return a network interface name corresponding to an interface index number. OSError if no interface with the given index exists.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.if_indextoname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::accept}}()",
      "Body": "Accept a connection. The socket must be bound to an address and listening for connections. The return value is a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.accept"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::bind}}({{c3::address}})",
      "Body": "Bind the socket to address.  The socket must not already be bound. (The format of address depends on the address family  see above.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.bind"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::close}}()",
      "Body": "Mark the socket closed.  The underlying system resource (e.g. a file descriptor) is also closed when all file objects from makefile() are closed.  Once that happens, all future operations on the socket object will fail. The remote end will receive no more data (after queued data is flushed).",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::connect}}({{c3::address}})",
      "Body": "Connect to a remote socket at address. (The format of address depends on the address family  see above.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.connect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::connect_ex}}({{c3::address}})",
      "Body": "Like connect(address), but return an error indicator instead of raising an exception for errors returned by the C-level connect() call (other problems, such as host not found, can still raise exceptions).  The error indicator is 0 if the operation succeeded, otherwise the value of the errno variable.  This is useful to support, for example, asynchronous connects.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.connect_ex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::detach}}()",
      "Body": "Put the socket object into closed state without actually closing the underlying file descriptor.  The file descriptor is returned, and can be reused for other purposes.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.detach"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::dup}}()",
      "Body": "Duplicate the socket.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.dup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::fileno}}()",
      "Body": "Return the socket's file descriptor (a small integer), or -1 on failure. This is useful with select.select().",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::get_inheritable}}()",
      "Body": "Get the inheritable flag of the socket's file descriptor or socket's handle: True if the socket can be inherited in child processes, False if it cannot.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.get_inheritable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getpeername}}()",
      "Body": "Return the remote address to which the socket is connected.  This is useful to find out the port number of a remote IPv4/v6 socket, for instance. (The format of the address returned depends on the address family  see above.)  On some systems this function is not supported.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.getpeername"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getsockname}}()",
      "Body": "Return the socket's own address.  This is useful to find out the port number of an IPv4/v6 socket, for instance. (The format of the address returned depends on the address family  see above.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.getsockname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getsockopt}}({{c3::level}}, {{c4::optname}}[, {{c5::buflen}}])",
      "Body": "Return the value of the given socket option (see the Unix man page getsockopt(2)).  The needed symbolic constants (SO_* etc.) are defined in this module.  If buflen is absent, an integer option is assumed and its integer value is returned by the function.  If buflen is present, it specifies the maximum length of the buffer used to receive the option in, and this buffer is returned as a bytes object.  It is up to the caller to decode the contents of the buffer (see the optional built-in module struct for a way to decode C structures encoded as byte strings).",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.getsockopt"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::getblocking}}()",
      "Body": "Return True if socket is in blocking mode, False if in non-blocking.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.getblocking"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::gettimeout}}()",
      "Body": "Return the timeout in seconds (float) associated with socket operations, or None if no timeout is set.  This reflects the last call to setblocking() or settimeout().",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.gettimeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::ioctl}}({{c3::control}}, {{c4::option}})",
      "Body": "The ioctl() method is a limited interface to the WSAIoctl system interface.  Please refer to the Win32 documentation for more information.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.ioctl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::listen}}([{{c3::backlog}}])",
      "Body": "Enable a server to accept connections.  If backlog is specified, it must be at least 0 (if it is lower, it is set to 0); it specifies the number of unaccepted connections that the system will allow before refusing new connections. If not specified, a default reasonable value is chosen.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.listen"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::makefile}}({{c3::mode}}='{{c4::r}}', {{c5::buffering}}={{c6::None}}, *, {{c7::encoding}}={{c8::None}}, {{c9::errors}}={{c10::None}}, {{c11::newline}}={{c12::None}})",
      "Body": "Return a file object associated with the socket.  The exact returned type depends on the arguments given to makefile().  These arguments are interpreted the same way as by the built-in open() function, except the only supported mode values are 'r' (default), 'w' and 'b'.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.makefile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::recv}}({{c3::bufsize}}[, {{c4::flags}}])",
      "Body": "Receive data from the socket.  The return value is a bytes object representing the data received.  The maximum amount of data to be received at once is specified by bufsize.  See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.recv"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::recvfrom}}({{c3::bufsize}}[, {{c4::flags}}])",
      "Body": "Receive data from the socket.  The return value is a pair (bytes, address) where bytes is a bytes object representing the data received and address is the address of the socket sending the data.  See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero. (The format of address depends on the address family  see above.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.recvfrom"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::recvmsg}}({{c3::bufsize}}[, {{c4::ancbufsize}}[, {{c5::flags}}]])",
      "Body": "Receive normal data (up to bufsize bytes) and ancillary data from the socket.  The ancbufsize argument sets the size in bytes of the internal buffer used to receive the ancillary data; it defaults to 0, meaning that no ancillary data will be received.  Appropriate buffer sizes for ancillary data can be calculated using CMSG_SPACE() or CMSG_LEN(), and items which do not fit into the buffer might be truncated or discarded.  The flags argument defaults to 0 and has the same meaning as for recv().",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.recvmsg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::recvmsg_into}}({{c3::buffers}}[, {{c4::ancbufsize}}[, {{c5::flags}}]])",
      "Body": "Receive normal data and ancillary data from the socket, behaving as recvmsg() would, but scatter the non-ancillary data into a series of buffers instead of returning a new bytes object.  The buffers argument must be an iterable of objects that export writable buffers (e.g. bytearray objects); these will be filled with successive chunks of the non-ancillary data until it has all been written or there are no more buffers.  The operating system may set a limit (sysconf() value SC_IOV_MAX) on the number of buffers that can be used.  The ancbufsize and flags arguments have the same meaning as for recvmsg().",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.recvmsg_into"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::recvfrom_into}}({{c3::buffer}}[, {{c4::nbytes}}[, {{c5::flags}}]])",
      "Body": "Receive data from the socket, writing it into buffer instead of creating a new bytestring.  The return value is a pair (nbytes, address) where nbytes is the number of bytes received and address is the address of the socket sending the data.  See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.  (The format of address depends on the address family  see above.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.recvfrom_into"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::recv_into}}({{c3::buffer}}[, {{c4::nbytes}}[, {{c5::flags}}]])",
      "Body": "Receive up to nbytes bytes from the socket, storing the data into a buffer rather than creating a new bytestring.  If nbytes is not specified (or 0), receive up to the size available in the given buffer.  Returns the number of bytes received.  See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.recv_into"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::send}}({{c3::bytes}}[, {{c4::flags}}])",
      "Body": "Send data to the socket.  The socket must be connected to a remote socket.  The optional flags argument has the same meaning as for recv() above. Returns the number of bytes sent. Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. For further information on this topic, consult the Socket Programming HOWTO.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.send"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::sendall}}({{c3::bytes}}[, {{c4::flags}}])",
      "Body": "Send data to the socket.  The socket must be connected to a remote socket.  The optional flags argument has the same meaning as for recv() above. Unlike send(), this method continues to send data from bytes until either all data has been sent or an error occurs.  None is returned on success.  On error, an exception is raised, and there is no way to determine how much data, if any, was successfully sent.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.sendall"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::sendto}}({{c3::bytes}}, {{c4::address}})",
      "Body": "Send data to the socket.  The socket should not be connected to a remote socket, since the destination socket is specified by address.  The optional flags argument has the same meaning as for recv() above.  Return the number of bytes sent. (The format of address depends on the address family  see above.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.sendto"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::sendto}}({{c3::bytes}}, {{c4::flags}}, {{c5::address}})",
      "Body": "Send data to the socket.  The socket should not be connected to a remote socket, since the destination socket is specified by address.  The optional flags argument has the same meaning as for recv() above.  Return the number of bytes sent. (The format of address depends on the address family  see above.)",
      "Link": "https://docs.python.org/3/library/socket.html#socket-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::sendmsg}}({{c3::buffers}}[, {{c4::ancdata}}[, {{c5::flags}}[, {{c6::address}}]]])",
      "Body": "Send normal and ancillary data to the socket, gathering the non-ancillary data from a series of buffers and concatenating it into a single message.  The buffers argument specifies the non-ancillary data as an iterable of bytes-like objects (e.g. bytes objects); the operating system may set a limit (sysconf() value SC_IOV_MAX) on the number of buffers that can be used.  The ancdata argument specifies the ancillary data (control messages) as an iterable of zero or more tuples (cmsg_level, cmsg_type, cmsg_data), where cmsg_level and cmsg_type are integers specifying the protocol level and protocol-specific type respectively, and cmsg_data is a bytes-like object holding the associated data.  Note that some systems (in particular, systems without CMSG_SPACE()) might support sending only one control message per call.  The flags argument defaults to 0 and has the same meaning as for send().  If address is supplied and not None, it sets a destination address for the message.  The return value is the number of bytes of non-ancillary data sent.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.sendmsg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::sendmsg_afalg}}([{{c3::msg}}, ]*, {{c4::op}}[, {{c5::iv}}[, {{c6::assoclen}}[, {{c7::flags}}]]])",
      "Body": "Specialized version of sendmsg() for AF_ALG socket. Set mode, IV, AEAD associated data length and flags for AF_ALG socket.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.sendmsg_afalg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::sendfile}}({{c3::file}}, {{c4::offset}}=0, {{c5::count}}={{c6::None}})",
      "Body": "Send a file until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent. file must be a regular file object opened in binary mode. If os.sendfile is not available (e.g. Windows) or file is not a regular file send() will be used instead. offset tells from where to start reading the file. If specified, count is the total number of bytes to transmit as opposed to sending the file until EOF is reached. File position is updated on return or also in case of error in which case file.tell() can be used to figure out the number of bytes which were sent. The socket must be of SOCK_STREAM type. Non-blocking sockets are not supported.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.sendfile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::set_inheritable}}({{c3::inheritable}})",
      "Body": "Set the inheritable flag of the socket's file descriptor or socket's handle.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.set_inheritable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::setblocking}}({{c3::flag}})",
      "Body": "Set blocking or non-blocking mode of the socket: if flag is false, the socket is set to non-blocking, else to blocking mode.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.setblocking"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::settimeout}}({{c3::value}})",
      "Body": "Set a timeout on blocking socket operations.  The value argument can be a nonnegative floating point number expressing seconds, or None. If a non-zero value is given, subsequent socket operations will raise a timeout exception if the timeout period value has elapsed before the operation has completed.  If zero is given, the socket is put in non-blocking mode. If None is given, the socket is put in blocking mode.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.settimeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::setsockopt}}({{c3::level}}, {{c4::optname}}, {{c5::None}}, {{c6::optlen}}: {{c7::int}})",
      "Body": "Set the value of the given socket option (see the Unix manual page setsockopt(2)).  The needed symbolic constants are defined in the socket module (SO_* etc.).  The value can be an integer, None or a bytes-like object representing a buffer. In the later case it is up to the caller to ensure that the bytestring contains the proper bits (see the optional built-in module struct for a way to encode C structures as bytestrings). When value is set to None, optlen argument is required. It's equivalent to call setsockopt C function with optval=NULL and optlen=optlen.",
      "Link": "https://docs.python.org/3/library/socket.html#socket-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::shutdown}}({{c3::how}})",
      "Body": "Shut down one or both halves of the connection.  If how is SHUT_RD, further receives are disallowed.  If how is SHUT_WR, further sends are disallowed.  If how is SHUT_RDWR, further sends and receives are disallowed.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.shutdown"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::share}}({{c3::process_id}})",
      "Body": "Duplicate a socket and prepare it for sharing with a target process.  The target process must be provided with process_id.  The resulting bytes object can then be passed to the target process using some form of interprocess communication and the socket can be recreated there using fromshare(). Once this method has been called, it is safe to close the socket since the operating system has already duplicated it for the target process.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.share"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::family}}",
      "Body": "The socket family.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.family"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::type}}",
      "Body": "The socket type.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.type"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socket}}.{{c2::proto}}",
      "Body": "The socket protocol.",
      "Link": "https://docs.python.org/3/library/socket.html#socket.socket.proto"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::create_default_context}}({{c3::purpose}}={{c4::Purpose}}.{{c5::SERVER_AUTH}}, {{c6::cafile}}={{c7::None}}, {{c8::capath}}={{c9::None}}, {{c10::cadata}}={{c11::None}})",
      "Body": "Return a new SSLContext object with default settings for the given purpose.  The settings are chosen by the ssl module, and usually represent a higher security level than when calling the SSLContext constructor directly.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.create_default_context"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ssl}}.{{c3::SSLError}}",
      "Body": "Raised to signal an error from the underlying SSL implementation (currently provided by the OpenSSL library).  This signifies some problem in the higher-level encryption and authentication layer that's superimposed on the underlying network connection.  This error is a subtype of OSError.  The error code and message of SSLError instances are provided by the OpenSSL library.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::SSLError}}.{{c3::library}}",
      "Body": "A string mnemonic designating the OpenSSL submodule in which the error occurred, such as SSL, PEM or X509.  The range of possible values depends on the OpenSSL version.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLError.library"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::SSLError}}.{{c3::reason}}",
      "Body": "A string mnemonic designating the reason this error occurred, for example CERTIFICATE_VERIFY_FAILED.  The range of possible values depends on the OpenSSL version.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLError.reason"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ssl}}.{{c3::SSLZeroReturnError}}",
      "Body": "A subclass of SSLError raised when trying to read or write and the SSL connection has been closed cleanly.  Note that this doesn't mean that the underlying transport (read TCP) has been closed.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLZeroReturnError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ssl}}.{{c3::SSLWantReadError}}",
      "Body": "A subclass of SSLError raised by a non-blocking SSL socket when trying to read or write data, but more data needs to be received on the underlying TCP transport before the request can be fulfilled.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLWantReadError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ssl}}.{{c3::SSLWantWriteError}}",
      "Body": "A subclass of SSLError raised by a non-blocking SSL socket when trying to read or write data, but more data needs to be sent on the underlying TCP transport before the request can be fulfilled.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLWantWriteError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ssl}}.{{c3::SSLSyscallError}}",
      "Body": "A subclass of SSLError raised when a system error was encountered while trying to fulfill an operation on a SSL socket.  Unfortunately, there is no easy way to inspect the original errno number.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSyscallError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ssl}}.{{c3::SSLEOFError}}",
      "Body": "A subclass of SSLError raised when the SSL connection has been terminated abruptly.  Generally, you shouldn't try to reuse the underlying transport when this error is encountered.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLEOFError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ssl}}.{{c3::SSLCertVerificationError}}",
      "Body": "A subclass of SSLError raised when certificate validation has failed.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLCertVerificationError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::SSLCertVerificationError}}.{{c3::verify_code}}",
      "Body": "A numeric error number that denotes the verification error.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLCertVerificationError.verify_code"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::SSLCertVerificationError}}.{{c3::verify_message}}",
      "Body": "A human readable string of the verification error.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLCertVerificationError.verify_message"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ssl}}.{{c3::CertificateError}}",
      "Body": "An alias for SSLCertVerificationError.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.CertificateError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::RAND_bytes}}({{c3::num}})",
      "Body": "Return num cryptographically strong pseudo-random bytes. Raises an SSLError if the PRNG has not been seeded with enough data or if the operation is not supported by the current RAND method. RAND_status() can be used to check the status of the PRNG and RAND_add() can be used to seed the PRNG.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.RAND_bytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::RAND_pseudo_bytes}}({{c3::num}})",
      "Body": "Return (bytes, is_cryptographic): bytes are num pseudo-random bytes, is_cryptographic is True if the bytes generated are cryptographically strong. Raises an SSLError if the operation is not supported by the current RAND method.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.RAND_pseudo_bytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::RAND_status}}()",
      "Body": "Return True if the SSL pseudo-random number generator has been seeded with 'enough' randomness, and False otherwise.  You can use ssl.RAND_egd() and ssl.RAND_add() to increase the randomness of the pseudo-random number generator.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.RAND_status"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::RAND_egd}}({{c3::path}})",
      "Body": "If you are running an entropy-gathering daemon (EGD) somewhere, and path is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys.  This is typically only necessary on systems without better sources of randomness.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.RAND_egd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::RAND_add}}({{c3::bytes}}, {{c4::entropy}})",
      "Body": "Mix the given bytes into the SSL pseudo-random number generator.  The parameter entropy (a float) is a lower bound on the entropy contained in string (so you can always use 0.0).  See RFC 1750 for more information on sources of entropy.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.RAND_add"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::match_hostname}}({{c3::cert}}, {{c4::hostname}})",
      "Body": "Verify that cert (in decoded format as returned by SSLSocket.getpeercert()) matches the given hostname.  The rules applied are those for checking the identity of HTTPS servers as outlined in RFC 2818, RFC 5280 and RFC 6125.  In addition to HTTPS, this function should be suitable for checking the identity of servers in various SSL-based protocols such as FTPS, IMAPS, POPS and others.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.match_hostname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::cert_time_to_seconds}}({{c3::cert_time}})",
      "Body": "Return the time in seconds since the Epoch, given the cert_time string representing the notBefore or notAfter date from a certificate in \"%b %d %H:%M:%S %Y %Z\" strptime format (C locale).",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.cert_time_to_seconds"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::get_server_certificate}}({{c3::addr}}, {{c4::ssl_version}}={{c5::PROTOCOL_TLS}}, {{c6::ca_certs}}={{c7::None}})",
      "Body": "Given the address addr of an SSL-protected server, as a (hostname, port-number) pair, fetches the server's certificate, and returns it as a PEM-encoded string.  If ssl_version is specified, uses that version of the SSL protocol to attempt to connect to the server.  If ca_certs is specified, it should be a file containing a list of root certificates, the same format as used for the same parameter in SSLContext.wrap_socket().  The call will attempt to validate the server certificate against that set of root certificates, and will fail if the validation attempt fails.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.get_server_certificate"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::DER_cert_to_PEM_cert}}({{c3::DER_cert_bytes}})",
      "Body": "Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.DER_cert_to_PEM_cert"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PEM_cert_to_DER_cert}}({{c3::PEM_cert_string}})",
      "Body": "Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PEM_cert_to_DER_cert"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::get_default_verify_paths}}()",
      "Body": "Returns a named tuple with paths to OpenSSL's default cafile and capath. The paths are the same as used by SSLContext.set_default_verify_paths(). The return value is a named tuple DefaultVerifyPaths:",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.get_default_verify_paths"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::enum_certificates}}({{c3::store_name}})",
      "Body": "Retrieve certificates from Windows' system cert store. store_name may be one of CA, ROOT or MY. Windows may provide additional cert stores, too.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.enum_certificates"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::enum_crls}}({{c3::store_name}})",
      "Body": "Retrieve CRLs from Windows' system cert store. store_name may be one of CA, ROOT or MY. Windows may provide additional cert stores, too.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.enum_crls"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::wrap_socket}}({{c3::sock}}, {{c4::keyfile}}={{c5::None}}, {{c6::certfile}}={{c7::None}}, {{c8::server_side}}={{c9::False}}, {{c10::cert_reqs}}={{c11::CERT_NONE}}, {{c12::ssl_version}}={{c13::PROTOCOL_TLS}}, {{c14::ca_certs}}={{c15::None}}, {{c16::do_handshake_on_connect}}={{c17::True}}, {{c18::suppress_ragged_eofs}}={{c19::True}}, {{c20::ciphers}}={{c21::None}})",
      "Body": "Takes an instance sock of socket.socket, and returns an instance of ssl.SSLSocket, a subtype of socket.socket, which wraps the underlying socket in an SSL context.  sock must be a SOCK_STREAM socket; other socket types are unsupported.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.wrap_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::CERT_NONE}}",
      "Body": "Possible value for SSLContext.verify_mode, or the cert_reqs parameter to wrap_socket().  Except for PROTOCOL_TLS_CLIENT, it is the default mode.  With client-side sockets, just about any cert is accepted.  Validation errors, such as untrusted or expired cert, are ignored and do not abort the TLS/SSL handshake.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.CERT_NONE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::CERT_OPTIONAL}}",
      "Body": "Possible value for SSLContext.verify_mode, or the cert_reqs parameter to wrap_socket().  In client mode, CERT_OPTIONAL has the same meaning as CERT_REQUIRED. It is recommended to use CERT_REQUIRED for client-side sockets instead.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.CERT_OPTIONAL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::CERT_REQUIRED}}",
      "Body": "Possible value for SSLContext.verify_mode, or the cert_reqs parameter to wrap_socket().  In this mode, certificates are required from the other side of the socket connection; an SSLError will be raised if no certificate is provided, or if its validation fails. This mode is not sufficient to verify a certificate in client mode as it does not match hostnames.  check_hostname must be enabled as well to verify the authenticity of a cert. PROTOCOL_TLS_CLIENT uses CERT_REQUIRED and enables check_hostname by default.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::VerifyMode}}",
      "Body": "enum.IntEnum collection of CERT_* constants.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.VerifyMode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::VERIFY_DEFAULT}}",
      "Body": "Possible value for SSLContext.verify_flags. In this mode, certificate revocation lists (CRLs) are not checked. By default OpenSSL does neither require nor verify CRLs.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.VERIFY_DEFAULT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::VERIFY_CRL_CHECK_LEAF}}",
      "Body": "Possible value for SSLContext.verify_flags. In this mode, only the peer cert is check but non of the intermediate CA certificates. The mode requires a valid CRL that is signed by the peer cert's issuer (its direct ancestor CA). If no proper has been loaded SSLContext.load_verify_locations, validation will fail.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.VERIFY_CRL_CHECK_LEAF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::VERIFY_CRL_CHECK_CHAIN}}",
      "Body": "Possible value for SSLContext.verify_flags. In this mode, CRLs of all certificates in the peer cert chain are checked.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.VERIFY_CRL_CHECK_CHAIN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::VERIFY_X}}509{{c3::_STRICT}}",
      "Body": "Possible value for SSLContext.verify_flags to disable workarounds for broken X.509 certificates.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.VERIFY_X509_STRICT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::VERIFY_X}}509{{c3::_TRUSTED_FIRST}}",
      "Body": "Possible value for SSLContext.verify_flags. It instructs OpenSSL to prefer trusted certificates when building the trust chain to validate a certificate. This flag is enabled by default.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.VERIFY_X509_TRUSTED_FIRST"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::VerifyFlags}}",
      "Body": "enum.IntFlag collection of VERIFY_* constants.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.VerifyFlags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_TLS}}",
      "Body": "Selects the highest protocol version that both the client and server support. Despite the name, this option can select both SSL and TLS protocols.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_TLS_CLIENT}}",
      "Body": "Auto-negotiate the highest protocol version like PROTOCOL_TLS, but only support client-side SSLSocket connections. The protocol enables CERT_REQUIRED and check_hostname by default.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_CLIENT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_TLS_SERVER}}",
      "Body": "Auto-negotiate the highest protocol version like PROTOCOL_TLS, but only support server-side SSLSocket connections.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_SERVER"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_SSLv}}23",
      "Body": "Alias for data:PROTOCOL_TLS.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_SSLv23"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_SSLv}}2",
      "Body": "Selects SSL version 2 as the channel encryption protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_SSLv2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_SSLv}}3",
      "Body": "Selects SSL version 3 as the channel encryption protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_SSLv3"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_TLSv}}1",
      "Body": "Selects TLS version 1.0 as the channel encryption protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_TLSv}}1{{c3::_}}1",
      "Body": "Selects TLS version 1.1 as the channel encryption protocol. Available only with openssl version 1.0.1+.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_1"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::PROTOCOL_TLSv}}1{{c3::_}}2",
      "Body": "Selects TLS version 1.2 as the channel encryption protocol. This is the most modern version, and probably the best choice for maximum protection, if both sides can speak it.  Available only with openssl version 1.0.1+.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_ALL}}",
      "Body": "Enables workarounds for various bugs present in other SSL implementations. This option is set by default.  It does not necessarily set the same flags as OpenSSL's SSL_OP_ALL constant.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_ALL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_SSLv}}2",
      "Body": "Prevents an SSLv2 connection.  This option is only applicable in conjunction with PROTOCOL_TLS.  It prevents the peers from choosing SSLv2 as the protocol version.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_SSLv}}3",
      "Body": "Prevents an SSLv3 connection.  This option is only applicable in conjunction with PROTOCOL_TLS.  It prevents the peers from choosing SSLv3 as the protocol version.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv3"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_TLSv}}1",
      "Body": "Prevents a TLSv1 connection.  This option is only applicable in conjunction with PROTOCOL_TLS.  It prevents the peers from choosing TLSv1 as the protocol version.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_TLSv}}1{{c3::_}}1",
      "Body": "Prevents a TLSv1.1 connection. This option is only applicable in conjunction with PROTOCOL_TLS. It prevents the peers from choosing TLSv1.1 as the protocol version. Available only with openssl version 1.0.1+.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1_1"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_TLSv}}1{{c3::_}}2",
      "Body": "Prevents a TLSv1.2 connection. This option is only applicable in conjunction with PROTOCOL_TLS. It prevents the peers from choosing TLSv1.2 as the protocol version. Available only with openssl version 1.0.1+.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1_2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_TLSv}}1{{c3::_}}3",
      "Body": "Prevents a TLSv1.3 connection. This option is only applicable in conjunction with PROTOCOL_TLS. It prevents the peers from choosing TLSv1.3 as the protocol version. TLS 1.3 is available with OpenSSL 1.1.1 or later. When Python has been compiled against an older version of OpenSSL, the flag defaults to 0.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1_3"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_RENEGOTIATION}}",
      "Body": "Disable all renegotiation in TLSv1.2 and earlier. Do not send HelloRequest messages, and ignore renegotiation requests via ClientHello.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_RENEGOTIATION"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_CIPHER_SERVER_PREFERENCE}}",
      "Body": "Use the server's cipher ordering preference, rather than the client's. This option has no effect on client sockets and SSLv2 server sockets.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_CIPHER_SERVER_PREFERENCE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_SINGLE_DH_USE}}",
      "Body": "Prevents re-use of the same DH key for distinct SSL sessions.  This improves forward secrecy but requires more computational resources. This option only applies to server sockets.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_SINGLE_DH_USE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_SINGLE_ECDH_USE}}",
      "Body": "Prevents re-use of the same ECDH key for distinct SSL sessions.  This improves forward secrecy but requires more computational resources. This option only applies to server sockets.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_SINGLE_ECDH_USE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_ENABLE_MIDDLEBOX_COMPAT}}",
      "Body": "Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_ENABLE_MIDDLEBOX_COMPAT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_COMPRESSION}}",
      "Body": "Disable compression on the SSL channel.  This is useful if the application protocol supports its own compression scheme.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_COMPRESSION"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::Options}}",
      "Body": "enum.IntFlag collection of OP_* constants.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.Options"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OP_NO_TICKET}}",
      "Body": "Prevent client side from requesting a session ticket.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TICKET"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_ALPN}}",
      "Body": "Whether the OpenSSL library has built-in support for the Application-Layer Protocol Negotiation TLS extension as described in RFC 7301.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_ALPN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_NEVER_CHECK_COMMON_NAME}}",
      "Body": "Whether the OpenSSL library has built-in support not checking subject common name and SSLContext.hostname_checks_common_name is writeable.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_NEVER_CHECK_COMMON_NAME"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_ECDH}}",
      "Body": "Whether the OpenSSL library has built-in support for the Elliptic Curve-based Diffie-Hellman key exchange.  This should be true unless the feature was explicitly disabled by the distributor.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_ECDH"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_SNI}}",
      "Body": "Whether the OpenSSL library has built-in support for the Server Name Indication extension (as defined in RFC 6066).",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_SNI"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_NPN}}",
      "Body": "Whether the OpenSSL library has built-in support for the Next Protocol Negotiation as described in the Application Layer Protocol Negotiation. When true, you can use the SSLContext.set_npn_protocols() method to advertise which protocols you want to support.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_NPN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_SSLv}}2",
      "Body": "Whether the OpenSSL library has built-in support for the SSL 2.0 protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_SSLv2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_SSLv}}3",
      "Body": "Whether the OpenSSL library has built-in support for the SSL 3.0 protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_SSLv3"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_TLSv}}1",
      "Body": "Whether the OpenSSL library has built-in support for the TLS 1.0 protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_TLSv1"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_TLSv}}1{{c3::_}}1",
      "Body": "Whether the OpenSSL library has built-in support for the TLS 1.1 protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_TLSv1_1"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_TLSv}}1{{c3::_}}2",
      "Body": "Whether the OpenSSL library has built-in support for the TLS 1.2 protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_TLSv1_2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::HAS_TLSv}}1{{c3::_}}3",
      "Body": "Whether the OpenSSL library has built-in support for the TLS 1.3 protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.HAS_TLSv1_3"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::CHANNEL_BINDING_TYPES}}",
      "Body": "List of supported TLS channel binding types.  Strings in this list can be used as arguments to SSLSocket.get_channel_binding().",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.CHANNEL_BINDING_TYPES"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OPENSSL_VERSION}}",
      "Body": "The version string of the OpenSSL library loaded by the interpreter:",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OPENSSL_VERSION"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OPENSSL_VERSION_INFO}}",
      "Body": "A tuple of five integers representing version information about the OpenSSL library:",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OPENSSL_VERSION_INFO"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::OPENSSL_VERSION_NUMBER}}",
      "Body": "The raw version number of the OpenSSL library, as a single integer:",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.OPENSSL_VERSION_NUMBER"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::ALERT_DESCRIPTION_HANDSHAKE_FAILURE}}",
      "Body": "Alert Descriptions from RFC 5246 and others. The IANA TLS Alert Registry contains this list and references to the RFCs where their meaning is defined.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::ALERT_DESCRIPTION_INTERNAL_ERROR}}",
      "Body": "Alert Descriptions from RFC 5246 and others. The IANA TLS Alert Registry contains this list and references to the RFCs where their meaning is defined.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.ALERT_DESCRIPTION_INTERNAL_ERROR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ALERT_DESCRIPTION_}}*",
      "Body": "Alert Descriptions from RFC 5246 and others. The IANA TLS Alert Registry contains this list and references to the RFCs where their meaning is defined.",
      "Link": "https://docs.python.org/3/library/ssl.html#constants"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::AlertDescription}}",
      "Body": "enum.IntEnum collection of ALERT_DESCRIPTION_* constants.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.AlertDescription"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Purpose}}.{{c2::SERVER_AUTH}}",
      "Body": "Option for create_default_context() and SSLContext.load_default_certs().  This value indicates that the context may be used to authenticate Web servers (therefore, it will be used to create client-side sockets).",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.Purpose.SERVER_AUTH"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Purpose}}.{{c2::CLIENT_AUTH}}",
      "Body": "Option for create_default_context() and SSLContext.load_default_certs().  This value indicates that the context may be used to authenticate Web clients (therefore, it will be used to create server-side sockets).",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.Purpose.CLIENT_AUTH"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::SSLErrorNumber}}",
      "Body": "enum.IntEnum collection of SSL_ERROR_* constants.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLErrorNumber"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::TLSVersion}}",
      "Body": "enum.IntEnum collection of SSL and TLS versions for SSLContext.maximum_version and SSLContext.minimum_version.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.TLSVersion"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::TLSVersion}}.{{c2::MAXIMUM_SUPPORTED}}",
      "Body": "The minimum or maximum supported SSL or TLS version. These are magic constants. Their values don't reflect the lowest and highest available TLS/SSL versions.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.TLSVersion.MAXIMUM_SUPPORTED"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::TLSVersion}}.{{c2::TLSv}}1{{c3::_}}3",
      "Body": "SSL 3.0 to TLS 1.3.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.TLSVersion.TLSv1_3"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::SSLSocket}}({{c4::socket}}.{{c5::socket}})",
      "Body": "SSL sockets provide the following methods of Socket Objects:",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::read}}({{c3::len}}=1024, {{c4::buffer}}={{c5::None}})",
      "Body": "Read up to len bytes of data from the SSL socket and return the result as a bytes instance. If buffer is specified, then read into the buffer instead, and return the number of bytes read.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.read"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::write}}({{c3::buf}})",
      "Body": "Write buf to the SSL socket and return the number of bytes written. The buf argument must be an object supporting the buffer interface.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.write"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::do_handshake}}()",
      "Body": "Perform the SSL setup handshake.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.do_handshake"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::getpeercert}}({{c3::binary_form}}={{c4::False}})",
      "Body": "If there is no certificate for the peer on the other end of the connection, return None.  If the SSL handshake hasn't been done yet, raise ValueError.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.getpeercert"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::cipher}}()",
      "Body": "Returns a three-value tuple containing the name of the cipher being used, the version of the SSL protocol that defines its use, and the number of secret bits being used.  If no connection has been established, returns None.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.cipher"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::shared_ciphers}}()",
      "Body": "Return the list of ciphers shared by the client during the handshake.  Each entry of the returned list is a three-value tuple containing the name of the cipher, the version of the SSL protocol that defines its use, and the number of secret bits the cipher uses.  shared_ciphers() returns None if no connection has been established or the socket is a client socket.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.shared_ciphers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::compression}}()",
      "Body": "Return the compression algorithm being used as a string, or None if the connection isn't compressed.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.compression"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::get_channel_binding}}({{c3::cb_type}}=\"{{c4::tls}}-{{c5::unique}}\")",
      "Body": "Get channel binding data for current connection, as a bytes object.  Returns None if not connected or the handshake has not been completed.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_channel_binding"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::selected_alpn_protocol}}()",
      "Body": "Return the protocol that was selected during the TLS handshake.  If SSLContext.set_alpn_protocols() was not called, if the other party does not support ALPN, if this socket does not support any of the client's proposed protocols, or if the handshake has not happened yet, None is returned.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_alpn_protocol"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::selected_npn_protocol}}()",
      "Body": "Return the higher-level protocol that was selected during the TLS/SSL handshake. If SSLContext.set_npn_protocols() was not called, or if the other party does not support NPN, or if the handshake has not yet happened, this will return None.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_npn_protocol"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::unwrap}}()",
      "Body": "Performs the SSL shutdown handshake, which removes the TLS layer from the underlying socket, and returns the underlying socket object.  This can be used to go from encrypted operation over a connection to unencrypted.  The returned socket should always be used for further communication with the other side of the connection, rather than the original socket.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.unwrap"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::verify_client_post_handshake}}()",
      "Body": "Requests post-handshake authentication (PHA) from a TLS 1.3 client. PHA can only be initiated for a TLS 1.3 connection from a server-side socket, after the initial TLS handshake and with PHA enabled on both sides, see SSLContext.post_handshake_auth.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.verify_client_post_handshake"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::version}}()",
      "Body": "Return the actual SSL protocol version negotiated by the connection as a string, or None is no secure connection is established. As of this writing, possible return values include \"SSLv2\", \"SSLv3\", \"TLSv1\", \"TLSv1.1\" and \"TLSv1.2\". Recent OpenSSL versions may define more return values.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::pending}}()",
      "Body": "Returns the number of already decrypted bytes available for read, pending on the connection.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.pending"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::context}}",
      "Body": "The SSLContext object this SSL socket is tied to.  If the SSL socket was created using the deprecated wrap_socket() function (rather than SSLContext.wrap_socket()), this is a custom context object created for this SSL socket.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.context"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::server_side}}",
      "Body": "A boolean which is True for server-side sockets and False for client-side sockets.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.server_side"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::server_hostname}}",
      "Body": "Hostname of the server: str type, or None for server-side socket or if the hostname was not specified in the constructor.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.server_hostname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::session}}",
      "Body": "The SSLSession for this SSL connection. The session is available for client and server side sockets after the TLS handshake has been performed. For client sockets the session can be set before do_handshake() has been called to reuse a session.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.session"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLSocket}}.{{c2::session_reused}}",
      "Body": "New in version 3.6.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.session_reused"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::SSLContext}}({{c4::protocol}}={{c5::PROTOCOL_TLS}})",
      "Body": "Create a new SSL context.  You may pass protocol which must be one of the PROTOCOL_* constants defined in this module.  The parameter specifies which version of the SSL protocol to use.  Typically, the server chooses a particular protocol version, and the client must adapt to the server's choice.  Most of the versions are not interoperable with the other versions.  If not specified, the default is PROTOCOL_TLS; it provides the most compatibility with other versions.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::cert_store_stats}}()",
      "Body": "Get statistics about quantities of loaded X.509 certificates, count of X.509 certificates flagged as CA certificates and certificate revocation lists as dictionary.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.cert_store_stats"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::load_cert_chain}}({{c3::certfile}}, {{c4::keyfile}}={{c5::None}}, {{c6::password}}={{c7::None}})",
      "Body": "Load a private key and the corresponding certificate.  The certfile string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate's authenticity.  The keyfile string, if present, must point to a file containing the private key in.  Otherwise the private key will be taken from certfile as well.  See the discussion of Certificates for more information on how the certificate is stored in the certfile.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_cert_chain"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::load_default_certs}}({{c3::purpose}}={{c4::Purpose}}.{{c5::SERVER_AUTH}})",
      "Body": "Load a set of default certification authority (CA) certificates from default locations. On Windows it loads CA certs from the CA and ROOT system stores. On other systems it calls SSLContext.set_default_verify_paths(). In the future the method may load CA certificates from other locations, too.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_default_certs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::load_verify_locations}}({{c3::cafile}}={{c4::None}}, {{c5::capath}}={{c6::None}}, {{c7::cadata}}={{c8::None}})",
      "Body": "Load a set of certification authority (CA) certificates used to validate other peers' certificates when verify_mode is other than CERT_NONE.  At least one of cafile or capath must be specified.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_verify_locations"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::get_ca_certs}}({{c3::binary_form}}={{c4::False}})",
      "Body": "Get a list of loaded certification authority (CA) certificates. If the binary_form parameter is False each list entry is a dict like the output of SSLSocket.getpeercert(). Otherwise the method returns a list of DER-encoded certificates. The returned list does not contain certificates from capath unless a certificate was requested and loaded by a SSL connection.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.get_ca_certs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::get_ciphers}}()",
      "Body": "Get a list of enabled ciphers. The list is in order of cipher priority. See SSLContext.set_ciphers().",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.get_ciphers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::set_default_verify_paths}}()",
      "Body": "Load a set of default certification authority (CA) certificates from a filesystem path defined when building the OpenSSL library.  Unfortunately, there's no easy way to know whether this method succeeds: no error is returned if no certificates are to be found.  When the OpenSSL library is provided as part of the operating system, though, it is likely to be configured properly.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_default_verify_paths"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::set_ciphers}}({{c3::ciphers}})",
      "Body": "Set the available ciphers for sockets created with this context. It should be a string in the OpenSSL cipher list format. If no cipher can be selected (because compile-time options or other configuration forbids use of all the specified ciphers), an SSLError will be raised.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::set_alpn_protocols}}({{c3::protocols}})",
      "Body": "Specify which protocols the socket should advertise during the SSL/TLS handshake. It should be a list of ASCII strings, like ['http/1.1', 'spdy/2'], ordered by preference. The selection of a protocol will happen during the handshake, and will play out according to RFC 7301. After a successful handshake, the SSLSocket.selected_alpn_protocol() method will return the agreed-upon protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_alpn_protocols"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::set_npn_protocols}}({{c3::protocols}})",
      "Body": "Specify which protocols the socket should advertise during the SSL/TLS handshake. It should be a list of strings, like ['http/1.1', 'spdy/2'], ordered by preference. The selection of a protocol will happen during the handshake, and will play out according to the Application Layer Protocol Negotiation. After a successful handshake, the SSLSocket.selected_npn_protocol() method will return the agreed-upon protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_npn_protocols"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::sni_callback}}",
      "Body": "Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication. The server name indication mechanism is specified in RFC 6066 section 3 - Server Name Indication.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sni_callback"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::set_servername_callback}}({{c3::server_name_callback}})",
      "Body": "This is a legacy API retained for backwards compatibility. When possible, you should use sni_callback instead. The given server_name_callback is similar to sni_callback, except that when the server hostname is an IDN-encoded internationalized domain name, the server_name_callback receives a decoded U-label (\"python.org\").",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_servername_callback"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::load_dh_params}}({{c3::dhfile}})",
      "Body": "Load the key generation parameters for Diffie-Hellman (DH) key exchange. Using DH key exchange improves forward secrecy at the expense of computational resources (both on the server and on the client). The dhfile parameter should be the path to a file containing DH parameters in PEM format.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_dh_params"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::set_ecdh_curve}}({{c3::curve_name}})",
      "Body": "Set the curve name for Elliptic Curve-based Diffie-Hellman (ECDH) key exchange.  ECDH is significantly faster than regular DH while arguably as secure.  The curve_name parameter should be a string describing a well-known elliptic curve, for example prime256v1 for a widely supported curve.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ecdh_curve"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::wrap_socket}}({{c3::sock}}, {{c4::server_side}}={{c5::False}}, {{c6::do_handshake_on_connect}}={{c7::True}}, {{c8::suppress_ragged_eofs}}={{c9::True}}, {{c10::server_hostname}}={{c11::None}}, {{c12::session}}={{c13::None}})",
      "Body": "Wrap an existing Python socket sock and return an instance of SSLContext.sslsocket_class (default SSLSocket). The returned SSL socket is tied to the context, its settings and certificates. sock must be a SOCK_STREAM socket; other socket types are unsupported.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::sslsocket_class}}",
      "Body": "The return type of SSLContext.wrap_sockets(), defaults to SSLSocket. The attribute can be overridden on instance of class in order to return a custom subclass of SSLSocket.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sslsocket_class"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::wrap_bio}}({{c3::incoming}}, {{c4::outgoing}}, {{c5::server_side}}={{c6::False}}, {{c7::server_hostname}}={{c8::None}}, {{c9::session}}={{c10::None}})",
      "Body": "Wrap the BIO objects incoming and outgoing and return an instance of attr:SSLContext.sslobject_class (default SSLObject). The SSL routines will read input data from the incoming BIO and write data to the outgoing BIO.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_bio"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::sslobject_class}}",
      "Body": "The return type of SSLContext.wrap_bio(), defaults to SSLObject. The attribute can be overridden on instance of class in order to return a custom subclass of SSLObject.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sslobject_class"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::session_stats}}()",
      "Body": "Get statistics about the SSL sessions created or managed by this context. A dictionary is returned which maps the names of each piece of information to their numeric values.  For example, here is the total number of hits and misses in the session cache since the context was created:",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.session_stats"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::check_hostname}}",
      "Body": "Whether to match the peer cert's hostname with match_hostname() in SSLSocket.do_handshake(). The context's verify_mode must be set to CERT_OPTIONAL or CERT_REQUIRED, and you must pass server_hostname to wrap_socket() in order to match the hostname.  Enabling hostname checking automatically sets verify_mode from CERT_NONE to CERT_REQUIRED.  It cannot be set back to CERT_NONE as long as hostname checking is enabled.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.check_hostname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::maximum_version}}",
      "Body": "A TLSVersion enum member representing the highest supported TLS version. The value defaults to TLSVersion.MAXIMUM_SUPPORTED. The attribute is read-only for protocols other than PROTOCOL_TLS, PROTOCOL_TLS_CLIENT, and PROTOCOL_TLS_SERVER.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::minimum_version}}",
      "Body": "Like SSLContext.maximum_version except it is the lowest supported version or TLSVersion.MINIMUM_SUPPORTED.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.minimum_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::options}}",
      "Body": "An integer representing the set of SSL options enabled on this context. The default value is OP_ALL, but you can specify other options such as OP_NO_SSLv2 by ORing them together.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.options"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::post_handshake_auth}}",
      "Body": "Enable TLS 1.3 post-handshake client authentication. Post-handshake auth is disabled by default and a server can only request a TLS client certificate during the initial handshake. When enabled, a server may request a TLS client certificate at any time after the handshake.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.post_handshake_auth"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::protocol}}",
      "Body": "The protocol version chosen when constructing the context.  This attribute is read-only.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.protocol"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::hostname_checks_common_name}}",
      "Body": "Whether check_hostname falls back to verify the cert's subject common name in the absence of a subject alternative name extension (default: true).",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.hostname_checks_common_name"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::verify_flags}}",
      "Body": "The flags for certificate verification operations. You can set flags like VERIFY_CRL_CHECK_LEAF by ORing them together. By default OpenSSL does neither require nor verify certificate revocation lists (CRLs). Available only with openssl version 0.9.8+.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SSLContext}}.{{c2::verify_mode}}",
      "Body": "Whether to try to verify other peers' certificates and how to behave if verification fails.  This attribute must be one of CERT_NONE, CERT_OPTIONAL or CERT_REQUIRED.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_mode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::SSLObject}}",
      "Body": "A reduced-scope variant of SSLSocket representing an SSL protocol instance that does not contain any network IO methods. This class is typically used by framework authors that want to implement asynchronous IO for SSL through memory buffers.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLObject"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::MemoryBIO}}",
      "Body": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.MemoryBIO"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::MemoryBIO}}.{{c3::pending}}",
      "Body": "Return the number of bytes currently in the memory buffer.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.MemoryBIO.pending"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::MemoryBIO}}.{{c3::eof}}",
      "Body": "A boolean indicating whether the memory BIO is current at the end-of-file position.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.MemoryBIO.eof"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::MemoryBIO}}.{{c3::read}}({{c4::n}}=-1)",
      "Body": "Read up to n bytes from the memory buffer. If n is not specified or negative, all bytes are returned.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.MemoryBIO.read"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::MemoryBIO}}.{{c3::write}}({{c4::buf}})",
      "Body": "Write the bytes from buf to the memory BIO. The buf argument must be an object supporting the buffer protocol.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.MemoryBIO.write"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ssl}}.{{c2::MemoryBIO}}.{{c3::write_eof}}()",
      "Body": "Write an EOF marker to the memory BIO. After this method has been called, it is illegal to call write(). The attribute eof will become true after all data currently in the buffer has been read.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.MemoryBIO.write_eof"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ssl}}.{{c3::SSLSession}}",
      "Body": "Session object used by session.",
      "Link": "https://docs.python.org/3/library/ssl.html#ssl.SSLSession"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::select}}.{{c3::error}}",
      "Body": "A deprecated alias of OSError.",
      "Link": "https://docs.python.org/3/library/select.html#select.error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::select}}.{{c2::devpoll}}()",
      "Body": "(Only supported on Solaris and derivatives.)  Returns a /dev/poll polling object; see section /dev/poll Polling Objects below for the methods supported by devpoll objects.",
      "Link": "https://docs.python.org/3/library/select.html#select.devpoll"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::select}}.{{c2::epoll}}({{c3::sizehint}}=-1, {{c4::flags}}=0)",
      "Body": "(Only supported on Linux 2.5.44 and newer.) Return an edge polling object, which can be used as Edge or Level Triggered interface for I/O events.",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::select}}.{{c2::poll}}()",
      "Body": "(Not supported by all operating systems.)  Returns a polling object, which supports registering and unregistering file descriptors, and then polling them for I/O events; see section Polling Objects below for the methods supported by polling objects.",
      "Link": "https://docs.python.org/3/library/select.html#select.poll"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::select}}.{{c2::kqueue}}()",
      "Body": "(Only supported on BSD.)  Returns a kernel queue object; see section Kqueue Objects below for the methods supported by kqueue objects.",
      "Link": "https://docs.python.org/3/library/select.html#select.kqueue"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::select}}.{{c2::kevent}}({{c3::ident}}, {{c4::filter}}={{c5::KQ_FILTER_READ}}, {{c6::flags}}={{c7::KQ_EV_ADD}}, {{c8::fflags}}=0, {{c9::data}}=0, {{c10::udata}}=0)",
      "Body": "(Only supported on BSD.)  Returns a kernel event object; see section Kevent Objects below for the methods supported by kevent objects.",
      "Link": "https://docs.python.org/3/library/select.html#select.kevent"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::select}}.{{c2::select}}({{c3::rlist}}, {{c4::wlist}}, {{c5::xlist}}[, {{c6::timeout}}])",
      "Body": "This is a straightforward interface to the Unix select() system call. The first three arguments are sequences of 'waitable objects': either integers representing file descriptors or objects with a parameterless method named fileno() returning such an integer:",
      "Link": "https://docs.python.org/3/library/select.html#select.select"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::select}}.{{c2::PIPE_BUF}}",
      "Body": "The minimum number of bytes which can be written without blocking to a pipe when the pipe has been reported as ready for writing by select(), poll() or another interface in this module.  This doesn't apply to other kind of file-like objects such as sockets.",
      "Link": "https://docs.python.org/3/library/select.html#select.PIPE_BUF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::devpoll}}.{{c2::close}}()",
      "Body": "Close the file descriptor of the polling object.",
      "Link": "https://docs.python.org/3/library/select.html#select.devpoll.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::devpoll}}.{{c2::closed}}",
      "Body": "True if the polling object is closed.",
      "Link": "https://docs.python.org/3/library/select.html#select.devpoll.closed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::devpoll}}.{{c2::fileno}}()",
      "Body": "Return the file descriptor number of the polling object.",
      "Link": "https://docs.python.org/3/library/select.html#select.devpoll.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::devpoll}}.{{c2::register}}({{c3::fd}}[, {{c4::eventmask}}])",
      "Body": "Register a file descriptor with the polling object.  Future calls to the poll() method will then check whether the file descriptor has any pending I/O events.  fd can be either an integer, or an object with a fileno() method that returns an integer.  File objects implement fileno(), so they can also be used as the argument.",
      "Link": "https://docs.python.org/3/library/select.html#select.devpoll.register"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::devpoll}}.{{c2::modify}}({{c3::fd}}[, {{c4::eventmask}}])",
      "Body": "This method does an unregister() followed by a register(). It is (a bit) more efficient that doing the same explicitly.",
      "Link": "https://docs.python.org/3/library/select.html#select.devpoll.modify"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::devpoll}}.{{c2::unregister}}({{c3::fd}})",
      "Body": "Remove a file descriptor being tracked by a polling object.  Just like the register() method, fd can be an integer or an object with a fileno() method that returns an integer.",
      "Link": "https://docs.python.org/3/library/select.html#select.devpoll.unregister"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::devpoll}}.{{c2::poll}}([{{c3::timeout}}])",
      "Body": "Polls the set of registered file descriptors, and returns a possibly-empty list containing (fd, event) 2-tuples for the descriptors that have events or errors to report. fd is the file descriptor, and event is a bitmask with bits set for the reported events for that descriptor  POLLIN for waiting input, POLLOUT to indicate that the descriptor can be written to, and so forth. An empty list indicates that the call timed out and no file descriptors had any events to report. If timeout is given, it specifies the length of time in milliseconds which the system will wait for events before returning. If timeout is omitted, -1, or None, the call will block until there is an event for this poll object.",
      "Link": "https://docs.python.org/3/library/select.html#select.devpoll.poll"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::epoll}}.{{c2::close}}()",
      "Body": "Close the control file descriptor of the epoll object.",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::epoll}}.{{c2::closed}}",
      "Body": "True if the epoll object is closed.",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll.closed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::epoll}}.{{c2::fileno}}()",
      "Body": "Return the file descriptor number of the control fd.",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::epoll}}.{{c2::fromfd}}({{c3::fd}})",
      "Body": "Create an epoll object from a given file descriptor.",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll.fromfd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::epoll}}.{{c2::register}}({{c3::fd}}[, {{c4::eventmask}}])",
      "Body": "Register a fd descriptor with the epoll object.",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll.register"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::epoll}}.{{c2::modify}}({{c3::fd}}, {{c4::eventmask}})",
      "Body": "Modify a registered file descriptor.",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll.modify"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::epoll}}.{{c2::unregister}}({{c3::fd}})",
      "Body": "Remove a registered file descriptor from the epoll object.",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll.unregister"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::epoll}}.{{c2::poll}}({{c3::timeout}}=-1, {{c4::maxevents}}=-1)",
      "Body": "Wait for events. timeout in seconds (float)",
      "Link": "https://docs.python.org/3/library/select.html#select.epoll.poll"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::poll}}.{{c2::register}}({{c3::fd}}[, {{c4::eventmask}}])",
      "Body": "Register a file descriptor with the polling object.  Future calls to the poll() method will then check whether the file descriptor has any pending I/O events.  fd can be either an integer, or an object with a fileno() method that returns an integer.  File objects implement fileno(), so they can also be used as the argument.",
      "Link": "https://docs.python.org/3/library/select.html#select.poll.register"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::poll}}.{{c2::modify}}({{c3::fd}}, {{c4::eventmask}})",
      "Body": "Modifies an already registered fd. This has the same effect as register(fd, eventmask).  Attempting to modify a file descriptor that was never registered causes an OSError exception with errno ENOENT to be raised.",
      "Link": "https://docs.python.org/3/library/select.html#select.poll.modify"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::poll}}.{{c2::unregister}}({{c3::fd}})",
      "Body": "Remove a file descriptor being tracked by a polling object.  Just like the register() method, fd can be an integer or an object with a fileno() method that returns an integer.",
      "Link": "https://docs.python.org/3/library/select.html#select.poll.unregister"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::poll}}.{{c2::poll}}([{{c3::timeout}}])",
      "Body": "Polls the set of registered file descriptors, and returns a possibly-empty list containing (fd, event) 2-tuples for the descriptors that have events or errors to report. fd is the file descriptor, and event is a bitmask with bits set for the reported events for that descriptor  POLLIN for waiting input, POLLOUT to indicate that the descriptor can be written to, and so forth. An empty list indicates that the call timed out and no file descriptors had any events to report. If timeout is given, it specifies the length of time in milliseconds which the system will wait for events before returning. If timeout is omitted, negative, or None, the call will block until there is an event for this poll object.",
      "Link": "https://docs.python.org/3/library/select.html#select.poll.poll"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kqueue}}.{{c2::close}}()",
      "Body": "Close the control file descriptor of the kqueue object.",
      "Link": "https://docs.python.org/3/library/select.html#select.kqueue.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kqueue}}.{{c2::closed}}",
      "Body": "True if the kqueue object is closed.",
      "Link": "https://docs.python.org/3/library/select.html#select.kqueue.closed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kqueue}}.{{c2::fileno}}()",
      "Body": "Return the file descriptor number of the control fd.",
      "Link": "https://docs.python.org/3/library/select.html#select.kqueue.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kqueue}}.{{c2::fromfd}}({{c3::fd}})",
      "Body": "Create a kqueue object from a given file descriptor.",
      "Link": "https://docs.python.org/3/library/select.html#select.kqueue.fromfd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kqueue}}.{{c2::control}}({{c3::changelist}}, {{c4::max_events}}[, {{c5::timeout}}={{c6::None}}])  {{c7::eventlist}}",
      "Body": "Low level interface to kevent",
      "Link": "https://docs.python.org/3/library/select.html#select.kqueue.control"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kevent}}.{{c2::ident}}",
      "Body": "Value used to identify the event. The interpretation depends on the filter but it's usually the file descriptor. In the constructor ident can either be an int or an object with a fileno() method. kevent stores the integer internally.",
      "Link": "https://docs.python.org/3/library/select.html#select.kevent.ident"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kevent}}.{{c2::filter}}",
      "Body": "Name of the kernel filter.",
      "Link": "https://docs.python.org/3/library/select.html#select.kevent.filter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kevent}}.{{c2::flags}}",
      "Body": "Filter action.",
      "Link": "https://docs.python.org/3/library/select.html#select.kevent.flags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kevent}}.{{c2::fflags}}",
      "Body": "Filter specific flags.",
      "Link": "https://docs.python.org/3/library/select.html#select.kevent.fflags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kevent}}.{{c2::data}}",
      "Body": "Filter specific data.",
      "Link": "https://docs.python.org/3/library/select.html#select.kevent.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::kevent}}.{{c2::udata}}",
      "Body": "User defined value.",
      "Link": "https://docs.python.org/3/library/select.html#select.kevent.udata"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::selectors}}.{{c3::SelectorKey}}",
      "Body": "A SelectorKey is a namedtuple used to associate a file object to its underlying file descriptor, selected event mask and attached data. It is returned by several BaseSelector methods.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.SelectorKey"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::SelectorKey}}.{{c3::fileobj}}",
      "Body": "File object registered.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.SelectorKey.fileobj"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::SelectorKey}}.{{c3::fd}}",
      "Body": "Underlying file descriptor.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.SelectorKey.fd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::SelectorKey}}.{{c3::events}}",
      "Body": "Events that must be waited for on this file object.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.SelectorKey.events"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::SelectorKey}}.{{c3::data}}",
      "Body": "Optional opaque data associated to this file object: for example, this could be used to store a per-client session ID.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.SelectorKey.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::selectors}}.{{c3::BaseSelector}}",
      "Body": "A BaseSelector is used to wait for I/O event readiness on multiple file objects. It supports file stream registration, unregistration, and a method to wait for I/O events on those streams, with an optional timeout. It's an abstract base class, so cannot be instantiated. Use DefaultSelector instead, or one of SelectSelector, KqueueSelector etc. if you want to specifically use an implementation, and your platform supports it. BaseSelector and its concrete implementations support the context manager protocol.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.BaseSelector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::BaseSelector}}.{{c3::abstractmethod}} {{c4::register}}({{c5::fileobj}}, {{c6::events}}, {{c7::data}}={{c8::None}})",
      "Body": "Register a file object for selection, monitoring it for I/O events.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.register"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::BaseSelector}}.{{c3::abstractmethod}} {{c4::unregister}}({{c5::fileobj}})",
      "Body": "Unregister a file object from selection, removing it from monitoring. A file object shall be unregistered prior to being closed.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.unregister"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::BaseSelector}}.{{c3::modify}}({{c4::fileobj}}, {{c5::events}}, {{c6::data}}={{c7::None}})",
      "Body": "Change a registered file object's monitored events or attached data.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.modify"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::BaseSelector}}.{{c3::abstractmethod}} {{c4::select}}({{c5::timeout}}={{c6::None}})",
      "Body": "Wait until some registered file objects become ready, or the timeout expires.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.select"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::BaseSelector}}.{{c3::close}}()",
      "Body": "Close the selector.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::BaseSelector}}.{{c3::get_key}}({{c4::fileobj}})",
      "Body": "Return the key associated with a registered file object.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.get_key"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::BaseSelector}}.{{c3::abstractmethod}} {{c4::get_map}}()",
      "Body": "Return a mapping of file objects to selector keys.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.get_map"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::selectors}}.{{c3::DefaultSelector}}",
      "Body": "The default selector class, using the most efficient implementation available on the current platform. This should be the default choice for most users.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.DefaultSelector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::selectors}}.{{c3::SelectSelector}}",
      "Body": "select.select()-based selector.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.SelectSelector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::selectors}}.{{c3::PollSelector}}",
      "Body": "select.poll()-based selector.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.PollSelector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::selectors}}.{{c3::EpollSelector}}",
      "Body": "select.epoll()-based selector.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.EpollSelector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::EpollSelector}}.{{c3::fileno}}()",
      "Body": "This returns the file descriptor used by the underlying select.epoll() object.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.EpollSelector.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::selectors}}.{{c3::DevpollSelector}}",
      "Body": "select.devpoll()-based selector.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.DevpollSelector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::DevpollSelector}}.{{c3::fileno}}()",
      "Body": "This returns the file descriptor used by the underlying select.devpoll() object.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.DevpollSelector.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::selectors}}.{{c3::KqueueSelector}}",
      "Body": "select.kqueue()-based selector.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.KqueueSelector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::selectors}}.{{c2::KqueueSelector}}.{{c3::fileno}}()",
      "Body": "This returns the file descriptor used by the underlying select.kqueue() object.",
      "Link": "https://docs.python.org/3/library/selectors.html#selectors.KqueueSelector.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::loop}}([{{c3::timeout}}[, {{c4::use_poll}}[, {{c5::map}}[, {{c6::count}}]]]])",
      "Body": "Enter a polling loop that terminates after count passes or all open channels have been closed.  All arguments are optional.  The count parameter defaults to None, resulting in the loop terminating only when all channels have been closed.  The timeout argument sets the timeout parameter for the appropriate select() or poll() call, measured in seconds; the default is 30 seconds.  The use_poll parameter, if true, indicates that poll() should be used in preference to select() (the default is False).",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.loop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::asyncore}}.{{c3::dispatcher}}",
      "Body": "The dispatcher class is a thin wrapper around a low-level socket object. To make it more useful, it has a few methods for event-handling which are called from the asynchronous loop.   Otherwise, it can be treated as a normal non-blocking socket object.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::handle_read}}()",
      "Body": "Called when the asynchronous loop detects that a read() call on the channel's socket will succeed.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.handle_read"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::handle_write}}()",
      "Body": "Called when the asynchronous loop detects that a writable socket can be written.  Often this method will implement the necessary buffering for performance.  For example:",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.handle_write"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::handle_expt}}()",
      "Body": "Called when there is out of band (OOB) data for a socket connection.  This will almost never happen, as OOB is tenuously supported and rarely used.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.handle_expt"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::handle_connect}}()",
      "Body": "Called when the active opener's socket actually makes a connection.  Might send a welcome banner, or initiate a protocol negotiation with the remote endpoint, for example.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.handle_connect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::handle_close}}()",
      "Body": "Called when the socket is closed.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.handle_close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::handle_error}}()",
      "Body": "Called when an exception is raised and not otherwise handled.  The default version prints a condensed traceback.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.handle_error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::handle_accept}}()",
      "Body": "Called on listening channels (passive openers) when a connection can be established with a new remote endpoint that has issued a connect() call for the local endpoint. Deprecated in version 3.2; use handle_accepted() instead.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.handle_accept"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::handle_accepted}}({{c4::sock}}, {{c5::addr}})",
      "Body": "Called on listening channels (passive openers) when a connection has been established with a new remote endpoint that has issued a connect() call for the local endpoint.  sock is a new socket object usable to send and receive data on the connection, and addr is the address bound to the socket on the other end of the connection.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.handle_accepted"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::readable}}()",
      "Body": "Called each time around the asynchronous loop to determine whether a channel's socket should be added to the list on which read events can occur.  The default method simply returns True, indicating that by default, all channels will be interested in read events.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.readable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::writable}}()",
      "Body": "Called each time around the asynchronous loop to determine whether a channel's socket should be added to the list on which write events can occur.  The default method simply returns True, indicating that by default, all channels will be interested in write events.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.writable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::create_socket}}({{c4::family}}={{c5::socket}}.{{c6::AF_INET}}, {{c7::type}}={{c8::socket}}.{{c9::SOCK_STREAM}})",
      "Body": "This is identical to the creation of a normal socket, and will use the same options for creation.  Refer to the socket documentation for information on creating sockets.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.create_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::connect}}({{c4::address}})",
      "Body": "As with the normal socket object, address is a tuple with the first element the host to connect to, and the second the port number.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.connect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::send}}({{c4::data}})",
      "Body": "Send data to the remote end-point of the socket.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.send"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::recv}}({{c4::buffer_size}})",
      "Body": "Read at most buffer_size bytes from the socket's remote end-point.  An empty bytes object implies that the channel has been closed from the other end.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.recv"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::listen}}({{c4::backlog}})",
      "Body": "Listen for connections made to the socket.  The backlog argument specifies the maximum number of queued connections and should be at least 1; the maximum value is system-dependent (usually 5).",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.listen"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::bind}}({{c4::address}})",
      "Body": "Bind the socket to address.  The socket must not already be bound.  (The format of address depends on the address family  refer to the socket documentation for more information.)  To mark the socket as re-usable (setting the SO_REUSEADDR option), call the dispatcher object's set_reuse_addr() method.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.bind"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::accept}}()",
      "Body": "Accept a connection.  The socket must be bound to an address and listening for connections.  The return value can be either None or a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection. When None is returned it means the connection didn't take place, in which case the server should just ignore this event and keep listening for further incoming connections.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.accept"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asyncore}}.{{c2::dispatcher}}.{{c3::close}}()",
      "Body": "Close the socket.  All future operations on the socket object will fail. The remote end-point will receive no more data (after queued data is flushed).  Sockets are automatically closed when they are garbage-collected.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::asyncore}}.{{c3::dispatcher_with_send}}",
      "Body": "A dispatcher subclass which adds simple buffered output capability, useful for simple clients. For more sophisticated usage use asynchat.async_chat.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher_with_send"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::asyncore}}.{{c3::file_dispatcher}}",
      "Body": "A file_dispatcher takes a file descriptor or file object along with an optional map argument and wraps it for use with the poll() or loop() functions.  If provided a file object or anything with a fileno() method, that method will be called and passed to the file_wrapper constructor.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.file_dispatcher"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::asyncore}}.{{c3::file_wrapper}}",
      "Body": "A file_wrapper takes an integer file descriptor and calls os.dup() to duplicate the handle so that the original handle may be closed independently of the file_wrapper.  This class implements sufficient methods to emulate a socket for use by the file_dispatcher class.",
      "Link": "https://docs.python.org/3/library/asyncore.html#asyncore.file_wrapper"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::asynchat}}.{{c3::async_chat}}",
      "Body": "This class is an abstract subclass of asyncore.dispatcher. To make practical use of the code you must subclass async_chat, providing meaningful collect_incoming_data() and found_terminator() methods. The asyncore.dispatcher methods can be used, although not all make sense in a message/response context.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asynchat}}.{{c2::async_chat}}.{{c3::ac_in_buffer_size}}",
      "Body": "The asynchronous input buffer size (default 4096).",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.ac_in_buffer_size"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::asynchat}}.{{c2::async_chat}}.{{c3::ac_out_buffer_size}}",
      "Body": "The asynchronous output buffer size (default 4096).",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.ac_out_buffer_size"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::async_chat}}.{{c2::close_when_done}}()",
      "Body": "Pushes a None on to the producer queue. When this producer is popped off the queue it causes the channel to be closed.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.close_when_done"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::async_chat}}.{{c2::collect_incoming_data}}({{c3::data}})",
      "Body": "Called with data holding an arbitrary amount of received data.  The default method, which must be overridden, raises a NotImplementedError exception.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.collect_incoming_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::async_chat}}.{{c2::discard_buffers}}()",
      "Body": "In emergencies this method will discard any data held in the input and/or output buffers and the producer queue.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.discard_buffers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::async_chat}}.{{c2::found_terminator}}()",
      "Body": "Called when the incoming data stream  matches the termination condition set by set_terminator(). The default method, which must be overridden, raises a NotImplementedError exception. The buffered input data should be available via an instance attribute.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.found_terminator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::async_chat}}.{{c2::get_terminator}}()",
      "Body": "Returns the current terminator for the channel.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.get_terminator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::async_chat}}.{{c2::push}}({{c3::data}})",
      "Body": "Pushes data on to the channel's queue to ensure its transmission. This is all you need to do to have the channel write the data out to the network, although it is possible to use your own producers in more complex schemes to implement encryption and chunking, for example.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.push"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::async_chat}}.{{c2::push_with_producer}}({{c3::producer}})",
      "Body": "Takes a producer object and adds it to the producer queue associated with the channel.  When all currently-pushed producers have been exhausted the channel will consume this producer's data by calling its more() method and send the data to the remote endpoint.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.push_with_producer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::async_chat}}.{{c2::set_terminator}}({{c3::term}})",
      "Body": "Sets the terminating condition to be recognized on the channel.  term may be any of three types of value, corresponding to three different ways to handle incoming protocol data.",
      "Link": "https://docs.python.org/3/library/asynchat.html#asynchat.async_chat.set_terminator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::SIG_DFL}}",
      "Body": "This is one of two standard signal handling options; it will simply perform the default function for the signal.  For example, on most systems the default action for SIGQUIT is to dump core and exit, while the default action for SIGCHLD is to simply ignore it.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.SIG_DFL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::SIG_IGN}}",
      "Body": "This is another standard signal handler, which will simply ignore the given signal.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.SIG_IGN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SIG}}*",
      "Body": "All the signal numbers are defined symbolically.  For example, the hangup signal is defined as signal.SIGHUP; the variable names are identical to the names used in C programs, as found in <signal.h>. The Unix man page for 'signal()' lists the existing signals (on some systems this is signal(2), on others the list is in signal(7)). Note that not all systems define the same set of signal names; only those names defined by the system are defined by this module.",
      "Link": "https://docs.python.org/3/library/signal.html#module-contents"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::CTRL_C_EVENT}}",
      "Body": "The signal corresponding to the Ctrl+C keystroke event. This signal can only be used with os.kill().",
      "Link": "https://docs.python.org/3/library/signal.html#signal.CTRL_C_EVENT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::CTRL_BREAK_EVENT}}",
      "Body": "The signal corresponding to the Ctrl+Break keystroke event. This signal can only be used with os.kill().",
      "Link": "https://docs.python.org/3/library/signal.html#signal.CTRL_BREAK_EVENT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::NSIG}}",
      "Body": "One more than the number of the highest signal number.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.NSIG"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::ITIMER_REAL}}",
      "Body": "Decrements interval timer in real time, and delivers SIGALRM upon expiration.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.ITIMER_REAL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::ITIMER_VIRTUAL}}",
      "Body": "Decrements interval timer only when the process is executing, and delivers SIGVTALRM upon expiration.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.ITIMER_VIRTUAL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::ITIMER_PROF}}",
      "Body": "Decrements interval timer both when the process executes and when the system is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this timer is usually used to profile the time spent by the application in user and kernel space. SIGPROF is delivered upon expiration.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.ITIMER_PROF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::SIG_BLOCK}}",
      "Body": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.SIG_BLOCK"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::SIG_UNBLOCK}}",
      "Body": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be unblocked.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.SIG_UNBLOCK"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::SIG_SETMASK}}",
      "Body": "A possible value for the how parameter to pthread_sigmask() indicating that the signal mask is to be replaced.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.SIG_SETMASK"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::signal}}.{{c3::ItimerError}}",
      "Body": "Raised to signal an error from the underlying setitimer() or getitimer() implementation. Expect this error if an invalid interval timer or a negative time is passed to setitimer(). This error is a subtype of OSError.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.ItimerError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::alarm}}({{c3::time}})",
      "Body": "If time is non-zero, this function requests that a SIGALRM signal be sent to the process in time seconds. Any previously scheduled alarm is canceled (only one alarm can be scheduled at any time).  The returned value is then the number of seconds before any previously set alarm was to have been delivered. If time is zero, no alarm is scheduled, and any scheduled alarm is canceled.  If the return value is zero, no alarm is currently scheduled.  (See the Unix man page alarm(2).)",
      "Link": "https://docs.python.org/3/library/signal.html#signal.alarm"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::getsignal}}({{c3::signalnum}})",
      "Body": "Return the current signal handler for the signal signalnum. The returned value may be a callable Python object, or one of the special values signal.SIG_IGN, signal.SIG_DFL or None.  Here, signal.SIG_IGN means that the signal was previously ignored, signal.SIG_DFL means that the default way of handling the signal was previously in use, and None means that the previous signal handler was not installed from Python.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.getsignal"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::pause}}()",
      "Body": "Cause the process to sleep until a signal is received; the appropriate handler will then be called.  Returns nothing.  Not on Windows. (See the Unix man page signal(2).)",
      "Link": "https://docs.python.org/3/library/signal.html#signal.pause"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::pthread_kill}}({{c3::thread_id}}, {{c4::signalnum}})",
      "Body": "Send the signal signalnum to the thread thread_id, another thread in the same process as the caller.  The target thread can be executing any code (Python or not).  However, if the target thread is executing the Python interpreter, the Python signal handlers will be executed by the main thread.  Therefore, the only point of sending a signal to a particular Python thread would be to force a running system call to fail with InterruptedError.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.pthread_kill"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::pthread_sigmask}}({{c3::how}}, {{c4::mask}})",
      "Body": "Fetch and/or change the signal mask of the calling thread.  The signal mask is the set of signals whose delivery is currently blocked for the caller. Return the old signal mask as a set of signals.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.pthread_sigmask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::setitimer}}({{c3::which}}, {{c4::seconds}}, {{c5::interval}}=0.0)",
      "Body": "Sets given interval timer (one of signal.ITIMER_REAL, signal.ITIMER_VIRTUAL or signal.ITIMER_PROF) specified by which to fire after seconds (float is accepted, different from alarm()) and after that every interval seconds (if interval is non-zero). The interval timer specified by which can be cleared by setting seconds to zero.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.setitimer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::getitimer}}({{c3::which}})",
      "Body": "Returns current value of a given interval timer specified by which.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.getitimer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::set_wakeup_fd}}({{c3::fd}}, *, {{c4::warn_on_full_buffer}}={{c5::True}})",
      "Body": "Set the wakeup file descriptor to fd.  When a signal is received, the signal number is written as a single byte into the fd.  This can be used by a library to wakeup a poll or select call, allowing the signal to be fully processed.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.set_wakeup_fd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::siginterrupt}}({{c3::signalnum}}, {{c4::flag}})",
      "Body": "Change system call restart behaviour: if flag is False, system calls will be restarted when interrupted by signal signalnum, otherwise system calls will be interrupted.  Returns nothing.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.siginterrupt"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::signal}}({{c3::signalnum}}, {{c4::handler}})",
      "Body": "Set the handler for signal signalnum to the function handler.  handler can be a callable Python object taking two arguments (see below), or one of the special values signal.SIG_IGN or signal.SIG_DFL.  The previous signal handler will be returned (see the description of getsignal() above).  (See the Unix man page signal(2).)",
      "Link": "https://docs.python.org/3/library/signal.html#signal.signal"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::sigpending}}()",
      "Body": "Examine the set of signals that are pending for delivery to the calling thread (i.e., the signals which have been raised while blocked).  Return the set of the pending signals.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.sigpending"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::sigwait}}({{c3::sigset}})",
      "Body": "Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set sigset.  The function accepts the signal (removes it from the pending list of signals), and returns the signal number.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.sigwait"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::sigwaitinfo}}({{c3::sigset}})",
      "Body": "Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set sigset.  The function accepts the signal and removes it from the pending list of signals. If one of the signals in sigset is already pending for the calling thread, the function will return immediately with information about that signal. The signal handler is not called for the delivered signal. The function raises an InterruptedError if it is interrupted by a signal that is not in sigset.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.sigwaitinfo"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::signal}}.{{c2::sigtimedwait}}({{c3::sigset}}, {{c4::timeout}})",
      "Body": "Like sigwaitinfo(), but takes an additional timeout argument specifying a timeout. If timeout is specified as 0, a poll is performed. Returns None if a timeout occurs.",
      "Link": "https://docs.python.org/3/library/signal.html#signal.sigtimedwait"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::mmap}}.{{c3::mmap}}({{c4::fileno}}, {{c5::length}}, {{c6::tagname}}={{c7::None}}, {{c8::access}}={{c9::ACCESS_DEFAULT}}[, {{c10::offset}}])",
      "Body": "(Windows version) Maps length bytes from the file specified by the file handle fileno, and creates a mmap object.  If length is larger than the current size of the file, the file is extended to contain length bytes.  If length is 0, the maximum length of the map is the current size of the file, except that if the file is empty Windows raises an exception (you cannot create an empty mapping on Windows).",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::mmap}}.{{c3::mmap}}({{c4::fileno}}, {{c5::length}}, {{c6::flags}}={{c7::MAP_SHARED}}, {{c8::prot}}={{c9::PROT_WRITE}}|{{c10::PROT_READ}}, {{c11::access}}={{c12::ACCESS_DEFAULT}}[, {{c13::offset}}])",
      "Body": "(Unix version) Maps length bytes from the file specified by the file descriptor fileno, and returns a mmap object.  If length is 0, the maximum length of the map will be the current size of the file when mmap is called.",
      "Link": "https://docs.python.org/3/library/mmap.html#module-mmap"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::close}}()",
      "Body": "Closes the mmap. Subsequent calls to other methods of the object will result in a ValueError exception being raised. This will not close the open file.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::closed}}",
      "Body": "True if the file is closed.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.closed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::find}}({{c4::sub}}[, {{c5::start}}[, {{c6::end}}]])",
      "Body": "Returns the lowest index in the object where the subsequence sub is found, such that sub is contained in the range [start, end]. Optional arguments start and end are interpreted as in slice notation. Returns -1 on failure.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.find"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::flush}}([{{c4::offset}}[, {{c5::size}}]])",
      "Body": "Flushes changes made to the in-memory copy of a file back to disk. Without use of this call there is no guarantee that changes are written back before the object is destroyed.  If offset and size are specified, only changes to the given range of bytes will be flushed to disk; otherwise, the whole extent of the mapping is flushed.  offset must be a multiple of the PAGESIZE or ALLOCATIONGRANULARITY.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.flush"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::move}}({{c4::dest}}, {{c5::src}}, {{c6::count}})",
      "Body": "Copy the count bytes starting at offset src to the destination index dest.  If the mmap was created with ACCESS_READ, then calls to move will raise a TypeError exception.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.move"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::read}}([{{c4::n}}])",
      "Body": "Return a bytes containing up to n bytes starting from the current file position. If the argument is omitted, None or negative, return all bytes from the current file position to the end of the mapping. The file position is updated to point after the bytes that were returned.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.read"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::read_byte}}()",
      "Body": "Returns a byte at the current file position as an integer, and advances the file position by 1.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.read_byte"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::readline}}()",
      "Body": "Returns a single line, starting at the current file position and up to the next newline.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.readline"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::resize}}({{c4::newsize}})",
      "Body": "Resizes the map and the underlying file, if any. If the mmap was created with ACCESS_READ or ACCESS_COPY, resizing the map will raise a TypeError exception.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.resize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::rfind}}({{c4::sub}}[, {{c5::start}}[, {{c6::end}}]])",
      "Body": "Returns the highest index in the object where the subsequence sub is found, such that sub is contained in the range [start, end]. Optional arguments start and end are interpreted as in slice notation. Returns -1 on failure.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.rfind"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::seek}}({{c4::pos}}[, {{c5::whence}}])",
      "Body": "Set the file's current position.  whence argument is optional and defaults to os.SEEK_SET or 0 (absolute file positioning); other values are os.SEEK_CUR or 1 (seek relative to the current position) and os.SEEK_END or 2 (seek relative to the file's end).",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.seek"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::size}}()",
      "Body": "Return the length of the file, which can be larger than the size of the memory-mapped area.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.size"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::tell}}()",
      "Body": "Returns the current position of the file pointer.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.tell"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::write}}({{c4::bytes}})",
      "Body": "Write the bytes in bytes into memory at the current position of the file pointer and return the number of bytes written (never less than len(bytes), since if the write fails, a ValueError will be raised).  The file position is updated to point after the bytes that were written.  If the mmap was created with ACCESS_READ, then writing to it will raise a TypeError exception.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.write"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Networking and Interprocess Communication",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::mmap}}.{{c2::mmap}}.{{c3::write_byte}}({{c4::byte}})",
      "Body": "Write the integer byte into memory at the current position of the file pointer; the file position is advanced by 1. If the mmap was created with ACCESS_READ, then writing to it will raise a TypeError exception.",
      "Link": "https://docs.python.org/3/library/mmap.html#mmap.mmap.write_byte"
    },
    "modelName": "ClozePy"
  }
]
