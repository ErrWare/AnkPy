[
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::webbrowser}}.{{c3::Error}}",
      "Body": "Exception raised when a browser control error occurs.",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.Error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::webbrowser}}.{{c2::open}}({{c3::url}}, {{c4::new}}=0, {{c5::autoraise}}={{c6::True}})",
      "Body": "Display url using the default browser. If new is 0, the url is opened in the same browser window if possible.  If new is 1, a new browser window is opened if possible.  If new is 2, a new browser page (tab) is opened if possible.  If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::webbrowser}}.{{c2::open_new}}({{c3::url}})",
      "Body": "Open url in a new window of the default browser, if possible, otherwise, open url in the only browser window.",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.open_new"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::webbrowser}}.{{c2::open_new_tab}}({{c3::url}})",
      "Body": "Open url in a new page (tab) of the default browser, if possible, otherwise equivalent to open_new().",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.open_new_tab"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::webbrowser}}.{{c2::get}}({{c3::using}}={{c4::None}})",
      "Body": "Return a controller object for the browser type using.  If using is None, return a controller for a default browser appropriate to the caller's environment.",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.get"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::webbrowser}}.{{c2::register}}({{c3::name}}, {{c4::constructor}}, {{c5::instance}}={{c6::None}}, *, {{c7::preferred}}={{c8::False}})",
      "Body": "Register the browser type name.  Once a browser type is registered, the get() function can return a controller for that browser type.  If instance is not provided, or is None, constructor will be called without parameters to create an instance when needed.  If instance is provided, constructor will never be called, and may be None.",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.register"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::controller}}.{{c2::open}}({{c3::url}}, {{c4::new}}=0, {{c5::autoraise}}={{c6::True}})",
      "Body": "Display url using the browser handled by this controller. If new is 1, a new browser window is opened if possible. If new is 2, a new browser page (tab) is opened if possible.",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.controller.open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::controller}}.{{c2::open_new}}({{c3::url}})",
      "Body": "Open url in a new window of the browser handled by this controller, if possible, otherwise, open url in the only browser window.  Alias open_new().",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.controller.open_new"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::controller}}.{{c2::open_new_tab}}({{c3::url}})",
      "Body": "Open url in a new page (tab) of the browser handled by this controller, if possible, otherwise equivalent to open_new().",
      "Link": "https://docs.python.org/3/library/webbrowser.html#webbrowser.controller.open_new_tab"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FieldStorage}}.{{c2::getfirst}}({{c3::name}}, {{c4::default}}={{c5::None}})",
      "Body": "This method always returns only one value associated with form field name. The method returns only the first value in case that more values were posted under such name.  Please note that the order in which the values are received may vary from browser to browser and should not be counted on. [1]  If no such form field or value exists then the method returns the value specified by the optional parameter default.  This parameter defaults to None if not specified.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.FieldStorage.getfirst"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FieldStorage}}.{{c2::getlist}}({{c3::name}})",
      "Body": "This method always returns a list of values associated with form field name. The method returns an empty list if no such form field or value exists for name.  It returns a list consisting of one item if only one such value exists.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.FieldStorage.getlist"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::parse}}({{c3::fp}}={{c4::None}}, {{c5::environ}}={{c6::os}}.{{c7::environ}}, {{c8::keep_blank_values}}={{c9::False}}, {{c10::strict_parsing}}={{c11::False}})",
      "Body": "Parse a query in the environment or from a file (the file defaults to sys.stdin).  The keep_blank_values and strict_parsing parameters are passed to urllib.parse.parse_qs() unchanged.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::parse_qs}}({{c3::qs}}, {{c4::keep_blank_values}}={{c5::False}}, {{c6::strict_parsing}}={{c7::False}})",
      "Body": "This function is deprecated in this module. Use urllib.parse.parse_qs() instead. It is maintained here only for backward compatibility.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.parse_qs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::parse_qsl}}({{c3::qs}}, {{c4::keep_blank_values}}={{c5::False}}, {{c6::strict_parsing}}={{c7::False}})",
      "Body": "This function is deprecated in this module. Use urllib.parse.parse_qsl() instead. It is maintained here only for backward compatibility.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.parse_qsl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::parse_multipart}}({{c3::fp}}, {{c4::pdict}}, {{c5::encoding}}=\"{{c6::utf}}-8\", {{c7::errors}}=\"{{c8::replace}}\")",
      "Body": "Parse input of type multipart/form-data (for  file uploads). Arguments are fp for the input file, pdict for a dictionary containing other parameters in the Content-Type header, and encoding, the request encoding.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.parse_multipart"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::parse_header}}({{c3::string}})",
      "Body": "Parse a MIME header (such as Content-Type) into a main value and a dictionary of parameters.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.parse_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::test}}()",
      "Body": "Robust test CGI script, usable as main program. Writes minimal HTTP headers and formats all information provided to the script in HTML form.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::print_environ}}()",
      "Body": "Format the shell environment in HTML.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.print_environ"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::print_form}}({{c3::form}})",
      "Body": "Format a form in HTML.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.print_form"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::print_directory}}()",
      "Body": "Format the current directory in HTML.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.print_directory"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::print_environ_usage}}()",
      "Body": "Print a list of useful (used by CGI) environment variables in HTML.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.print_environ_usage"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgi}}.{{c2::escape}}({{c3::s}}, {{c4::quote}}={{c5::False}})",
      "Body": "Convert the characters '&', '<' and '>' in string s to HTML-safe sequences.  Use this if you need to display text that might contain such characters in HTML.  If the optional flag quote is true, the quotation mark character (\") is also translated; this helps for inclusion in an HTML attribute value delimited by double quotes, as in <a href=\"...\">.  Note that single quotes are never translated.",
      "Link": "https://docs.python.org/3/library/cgi.html#cgi.escape"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgitb}}.{{c2::enable}}({{c3::display}}=1, {{c4::logdir}}={{c5::None}}, {{c6::context}}=5, {{c7::format}}=\"{{c8::html}}\")",
      "Body": "This function causes the cgitb module to take over the interpreter's default handling for exceptions by setting the value of sys.excepthook.",
      "Link": "https://docs.python.org/3/library/cgitb.html#cgitb.enable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgitb}}.{{c2::text}}({{c3::info}}, {{c4::context}}=5)",
      "Body": "This function handles the exception described by info (a 3-tuple containing the result of sys.exc_info()), formatting its traceback as text and returning the result as a string. The optional argument context is the number of lines of context to display around the current line of source code in the traceback; this defaults to 5.",
      "Link": "https://docs.python.org/3/library/cgitb.html#cgitb.text"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgitb}}.{{c2::html}}({{c3::info}}, {{c4::context}}=5)",
      "Body": "This function handles the exception described by info (a 3-tuple containing the result of sys.exc_info()), formatting its traceback as HTML and returning the result as a string. The optional argument context is the number of lines of context to display around the current line of source code in the traceback; this defaults to 5.",
      "Link": "https://docs.python.org/3/library/cgitb.html#cgitb.html"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::cgitb}}.{{c2::handler}}({{c3::info}}={{c4::None}})",
      "Body": "This function handles an exception using the default settings (that is, show a report in the browser, but don't log to a file). This can be used when you've caught an exception and want to report it using cgitb.  The optional info argument should be a 3-tuple containing an exception type, exception value, and traceback object, exactly like the tuple returned by sys.exc_info().  If the info argument is not supplied, the current exception is obtained from sys.exc_info().",
      "Link": "https://docs.python.org/3/library/cgitb.html#cgitb.handler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::util}}.{{c3::guess_scheme}}({{c4::environ}})",
      "Body": "Return a guess for whether wsgi.url_scheme should be http or https, by checking for a HTTPS environment variable in the environ dictionary.  The return value is a string.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.util.guess_scheme"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::util}}.{{c3::request_uri}}({{c4::environ}}, {{c5::include_query}}={{c6::True}})",
      "Body": "Return the full request URI, optionally including the query string, using the algorithm found in the URL Reconstruction section of PEP 3333.  If include_query is false, the query string is not included in the resulting URI.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.util.request_uri"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::util}}.{{c3::application_uri}}({{c4::environ}})",
      "Body": "Similar to request_uri(), except that the PATH_INFO and QUERY_STRING variables are ignored.  The result is the base URI of the application object addressed by the request.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.util.application_uri"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::util}}.{{c3::shift_path_info}}({{c4::environ}})",
      "Body": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name. The environ dictionary is modified in-place; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.util.shift_path_info"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::util}}.{{c3::setup_testing_defaults}}({{c4::environ}})",
      "Body": "Update environ with trivial defaults for testing purposes.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.util.setup_testing_defaults"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::util}}.{{c3::is_hop_by_hop}}({{c4::header_name}})",
      "Body": "Return true if 'header_name' is an HTTP/1.1 Hop-by-Hop header, as defined by RFC 2616.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.util.is_hop_by_hop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::util}}.{{c4::FileWrapper}}({{c5::filelike}}, {{c6::blksize}}=8192)",
      "Body": "A wrapper to convert a file-like object to an iterator.  The resulting objects support both __getitem__() and __iter__() iteration styles, for compatibility with Python 2.1 and Jython. As the object is iterated over, the optional blksize parameter will be repeatedly passed to the filelike object's read() method to obtain bytestrings to yield.  When read() returns an empty bytestring, iteration is ended and is not resumable.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.util.FileWrapper"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::headers}}.{{c4::Headers}}([{{c5::headers}}])",
      "Body": "Create a mapping-like object wrapping headers, which must be a list of header name/value tuples as described in PEP 3333. The default value of headers is an empty list.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::headers}}.{{c3::Headers}}.{{c4::get_all}}({{c5::name}})",
      "Body": "Return a list of all the values for the named header.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.get_all"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::headers}}.{{c3::Headers}}.{{c4::add_header}}({{c5::name}}, {{c6::value}}, **_params)",
      "Body": "Add a (possibly multi-valued) header, with optional MIME parameters specified via keyword arguments.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.add_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::simple_server}}.{{c3::make_server}}({{c4::host}}, {{c5::port}}, {{c6::app}}, {{c7::server_class}}={{c8::WSGIServer}}, {{c9::handler_class}}={{c10::WSGIRequestHandler}})",
      "Body": "Create a new WSGI server listening on host and port, accepting connections for app.  The return value is an instance of the supplied server_class, and will process requests using the specified handler_class.  app must be a WSGI application object, as defined by PEP 3333.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.make_server"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::simple_server}}.{{c3::demo_app}}({{c4::environ}}, {{c5::start_response}})",
      "Body": "This function is a small but complete WSGI application that returns a text page containing the message Hello world! and a list of the key/value pairs provided in the environ parameter.  It's useful for verifying that a WSGI server (such as wsgiref.simple_server) is able to run a simple WSGI application correctly.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.demo_app"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::simple_server}}.{{c4::WSGIServer}}({{c5::server_address}}, {{c6::RequestHandlerClass}})",
      "Body": "Create a WSGIServer instance.  server_address should be a (host,port) tuple, and RequestHandlerClass should be the subclass of http.server.BaseHTTPRequestHandler that will be used to process requests.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::simple_server}}.{{c3::WSGIServer}}.{{c4::set_app}}({{c5::application}})",
      "Body": "Sets the callable application as the WSGI application that will receive requests.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer.set_app"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::simple_server}}.{{c3::WSGIServer}}.{{c4::get_app}}()",
      "Body": "Returns the currently-set application callable.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer.get_app"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::simple_server}}.{{c4::WSGIRequestHandler}}({{c5::request}}, {{c6::client_address}}, {{c7::server}})",
      "Body": "Create an HTTP handler for the given request (i.e. a socket), client_address (a (host,port) tuple), and server (WSGIServer instance).",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::simple_server}}.{{c3::WSGIRequestHandler}}.{{c4::get_environ}}()",
      "Body": "Returns a dictionary containing the WSGI environment for a request.  The default implementation copies the contents of the WSGIServer object's base_environ dictionary attribute and then adds various headers derived from the HTTP request.  Each call to this method should return a new dictionary containing all of the relevant CGI environment variables as specified in PEP 3333.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler.get_environ"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::simple_server}}.{{c3::WSGIRequestHandler}}.{{c4::get_stderr}}()",
      "Body": "Return the object that should be used as the wsgi.errors stream. The default implementation just returns sys.stderr.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler.get_stderr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::simple_server}}.{{c3::WSGIRequestHandler}}.{{c4::handle}}()",
      "Body": "Process the HTTP request.  The default implementation creates a handler instance using a wsgiref.handlers class to implement the actual WSGI application interface.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler.handle"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::validate}}.{{c3::validator}}({{c4::application}})",
      "Body": "Wrap application and return a new WSGI application object.  The returned application will forward all requests to the original application, and will check that both the application and the server invoking it are conforming to the WSGI specification and to RFC 2616.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.validate.validator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::handlers}}.{{c4::CGIHandler}}",
      "Body": "CGI-based invocation via sys.stdin, sys.stdout, sys.stderr and os.environ.  This is useful when you have a WSGI application and want to run it as a CGI script.  Simply invoke CGIHandler().run(app), where app is the WSGI application object you wish to invoke.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.CGIHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::handlers}}.{{c4::IISCGIHandler}}",
      "Body": "A specialized alternative to CGIHandler, for use when deploying on Microsoft's IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.IISCGIHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::handlers}}.{{c4::BaseCGIHandler}}({{c5::stdin}}, {{c6::stdout}}, {{c7::stderr}}, {{c8::environ}}, {{c9::multithread}}={{c10::True}}, {{c11::multiprocess}}={{c12::False}})",
      "Body": "Similar to CGIHandler, but instead of using the sys and os modules, the CGI environment and I/O streams are specified explicitly. The multithread and multiprocess values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseCGIHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::handlers}}.{{c4::SimpleHandler}}({{c5::stdin}}, {{c6::stdout}}, {{c7::stderr}}, {{c8::environ}}, {{c9::multithread}}={{c10::True}}, {{c11::multiprocess}}={{c12::False}})",
      "Body": "Similar to BaseCGIHandler, but designed for use with HTTP origin servers.  If you are writing an HTTP server implementation, you will probably want to subclass this instead of BaseCGIHandler.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.SimpleHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::wsgiref}}.{{c3::handlers}}.{{c4::BaseHandler}}",
      "Body": "This is an abstract base class for running WSGI applications.  Each instance will handle a single HTTP request, although in principle you could create a subclass that was reusable for multiple requests.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::run}}({{c5::app}})",
      "Body": "Run the specified WSGI application, app.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.run"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::_write}}({{c5::data}})",
      "Body": "Buffer the bytes data for transmission to the client.  It's okay if this method actually transmits the data; BaseHandler just separates write and flush operations for greater efficiency when the underlying system actually has such a distinction.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler._write"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::_flush}}()",
      "Body": "Force buffered data to be transmitted to the client.  It's okay if this method is a no-op (i.e., if _write() actually sends the data).",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler._flush"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::get_stdin}}()",
      "Body": "Return an input stream object suitable for use as the wsgi.input of the request currently being processed.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.get_stdin"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::get_stderr}}()",
      "Body": "Return an output stream object suitable for use as the wsgi.errors of the request currently being processed.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.get_stderr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::add_cgi_vars}}()",
      "Body": "Insert CGI variables for the current request into the environ attribute.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.add_cgi_vars"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::wsgi_multithread}}",
      "Body": "The value to be used for the wsgi.multithread environment variable.  It defaults to true in BaseHandler, but may have a different default (or be set by the constructor) in the other subclasses.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.wsgi_multithread"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::wsgi_multiprocess}}",
      "Body": "The value to be used for the wsgi.multiprocess environment variable.  It defaults to true in BaseHandler, but may have a different default (or be set by the constructor) in the other subclasses.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.wsgi_multiprocess"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::wsgi_run_once}}",
      "Body": "The value to be used for the wsgi.run_once environment variable.  It defaults to false in BaseHandler, but CGIHandler sets it to true by default.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.wsgi_run_once"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::os_environ}}",
      "Body": "The default environment variables to be included in every request's WSGI environment.  By default, this is a copy of os.environ at the time that wsgiref.handlers was imported, but subclasses can either create their own at the class or instance level.  Note that the dictionary should be considered read-only, since the default value is shared between multiple classes and instances.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.os_environ"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::server_software}}",
      "Body": "If the origin_server attribute is set, this attribute's value is used to set the default SERVER_SOFTWARE WSGI environment variable, and also to set a default Server: header in HTTP responses.  It is ignored for handlers (such as BaseCGIHandler and CGIHandler) that are not HTTP origin servers.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.server_software"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::get_scheme}}()",
      "Body": "Return the URL scheme being used for the current request.  The default implementation uses the guess_scheme() function from wsgiref.util to guess whether the scheme should be http or https, based on the current request's environ variables.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.get_scheme"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::setup_environ}}()",
      "Body": "Set the environ attribute to a fully-populated WSGI environment.  The default implementation uses all of the above methods and attributes, plus the get_stdin(), get_stderr(), and add_cgi_vars() methods and the wsgi_file_wrapper attribute.  It also inserts a SERVER_SOFTWARE key if not present, as long as the origin_server attribute is a true value and the server_software attribute is set.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.setup_environ"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::log_exception}}({{c5::exc_info}})",
      "Body": "Log the exc_info tuple in the server log.  exc_info is a (type, value, traceback) tuple.  The default implementation simply writes the traceback to the request's wsgi.errors stream and flushes it.  Subclasses can override this method to change the format or retarget the output, mail the traceback to an administrator, or whatever other action may be deemed suitable.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.log_exception"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::traceback_limit}}",
      "Body": "The maximum number of frames to include in tracebacks output by the default log_exception() method.  If None, all frames are included.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.traceback_limit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::error_output}}({{c5::environ}}, {{c6::start_response}})",
      "Body": "This method is a WSGI application to generate an error page for the user.  It is only invoked if an error occurs before headers are sent to the client.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.error_output"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::error_status}}",
      "Body": "The HTTP status used for error responses.  This should be a status string as defined in PEP 3333; it defaults to a 500 code and message.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.error_status"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::error_headers}}",
      "Body": "The HTTP headers used for error responses.  This should be a list of WSGI response headers ((name, value) tuples), as described in PEP 3333.  The default list just sets the content type to text/plain.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.error_headers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::error_body}}",
      "Body": "The error response body.  This should be an HTTP response body bytestring. It defaults to the plain text, A server error occurred.  Please contact the administrator.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.error_body"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::wsgi_file_wrapper}}",
      "Body": "A wsgi.file_wrapper factory, or None.  The default value of this attribute is the wsgiref.util.FileWrapper class.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.wsgi_file_wrapper"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::sendfile}}()",
      "Body": "Override to implement platform-specific file transmission.  This method is called only if the application's return value is an instance of the class specified by the wsgi_file_wrapper attribute.  It should return a true value if it was able to successfully transmit the file, so that the default transmission code will not be executed. The default implementation of this method just returns a false value.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.sendfile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::origin_server}}",
      "Body": "This attribute should be set to a true value if the handler's _write() and _flush() are being used to communicate directly to the client, rather than via a CGI-like gateway protocol that wants the HTTP status in a special Status: header.",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.origin_server"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::BaseHandler}}.{{c4::http_version}}",
      "Body": "If origin_server is true, this string attribute is used to set the HTTP version of the response set to the client.  It defaults to \"1.0\".",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseHandler.http_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::wsgiref}}.{{c2::handlers}}.{{c3::read_environ}}()",
      "Body": "Transcode CGI variables from os.environ to PEP 3333 bytes in unicode strings, returning a new dictionary.  This function is used by CGIHandler and IISCGIHandler in place of directly using os.environ, which is not necessarily WSGI-compliant on all platforms and web servers using Python 3  specifically, ones where the OS's actual environment is Unicode (i.e. Windows), or ones where the environment is bytes, but the system encoding used by Python to decode it is anything other than ISO-8859-1 (e.g. Unix systems using UTF-8).",
      "Link": "https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.read_environ"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::urlopen}}({{c4::url}}, {{c5::data}}={{c6::None}}, [{{c7::timeout}}, ]*, {{c8::cafile}}={{c9::None}}, {{c10::capath}}={{c11::None}}, {{c12::cadefault}}={{c13::False}}, {{c14::context}}={{c15::None}})",
      "Body": "Open the URL url, which can be either a string or a Request object.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::install_opener}}({{c4::opener}})",
      "Body": "Install an OpenerDirector instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call OpenerDirector.open() instead of urlopen().  The code does not check for a real OpenerDirector, and any class with the appropriate interface will work.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.install_opener"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::build_opener}}([{{c4::handler}}, ...])",
      "Body": "Return an OpenerDirector instance, which chains the handlers in the order given. handlers can be either instances of BaseHandler, or subclasses of BaseHandler (in which case it must be possible to call the constructor without any parameters).  Instances of the following classes will be in front of the handlers, unless the handlers contain them, instances of them or subclasses of them: ProxyHandler (if proxy settings are detected), UnknownHandler, HTTPHandler, HTTPDefaultErrorHandler, HTTPRedirectHandler, FTPHandler, FileHandler, HTTPErrorProcessor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.build_opener"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::pathname}}2{{c4::url}}({{c5::path}})",
      "Body": "Convert the pathname path from the local syntax for a path to the form used in the path component of a URL.  This does not produce a complete URL.  The return value will already be quoted using the quote() function.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.pathname2url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::url}}2{{c4::pathname}}({{c5::path}})",
      "Body": "Convert the path component path from a percent-encoded URL to the local syntax for a path.  This does not accept a complete URL.  This function uses unquote() to decode path.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.url2pathname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::getproxies}}()",
      "Body": "This helper function returns a dictionary of scheme to proxy server URL mappings. It scans the environment for variables named <scheme>_proxy, in a case insensitive approach, for all operating systems first, and when it cannot find it, looks for proxy information from Mac OSX System Configuration for Mac OS X and Windows Systems Registry for Windows. If both lowercase and uppercase environment variables exist (and disagree), lowercase is preferred.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.getproxies"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::Request}}({{c5::url}}, {{c6::data}}={{c7::None}}, {{c8::headers}}={}, {{c9::origin_req_host}}={{c10::None}}, {{c11::unverifiable}}={{c12::False}}, {{c13::method}}={{c14::None}})",
      "Body": "This class is an abstraction of a URL request.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::OpenerDirector}}",
      "Body": "The OpenerDirector class opens URLs via BaseHandlers chained together. It manages the chaining of handlers, and recovery from errors.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::BaseHandler}}",
      "Body": "This is the base class for all registered handlers  and handles only the simple mechanics of registration.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPDefaultErrorHandler}}",
      "Body": "A class which defines a default handler for HTTP error responses; all responses are turned into HTTPError exceptions.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPDefaultErrorHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPRedirectHandler}}",
      "Body": "A class to handle redirections.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPCookieProcessor}}({{c5::cookiejar}}={{c6::None}})",
      "Body": "A class to handle HTTP Cookies.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPCookieProcessor"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::ProxyHandler}}({{c5::proxies}}={{c6::None}})",
      "Body": "Cause requests to go through a proxy. If proxies is given, it must be a dictionary mapping protocol names to URLs of proxies. The default is to read the list of proxies from the environment variables <protocol>_proxy.  If no proxy environment variables are set, then in a Windows environment proxy settings are obtained from the registry's Internet Settings section, and in a Mac OS X environment proxy information is retrieved from the OS X System Configuration Framework.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPPasswordMgr}}",
      "Body": "Keep a database of  (realm, uri) -> (user, password) mappings.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPPasswordMgrWithDefaultRealm}}",
      "Body": "Keep a database of  (realm, uri) -> (user, password) mappings. A realm of None is considered a catch-all realm, which is searched if no other realm fits.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithDefaultRealm"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPPasswordMgrWithPriorAuth}}",
      "Body": "A variant of HTTPPasswordMgrWithDefaultRealm that also has a database of uri -> is_authenticated mappings.  Can be used by a BasicAuth handler to determine when to send authentication credentials immediately instead of waiting for a 401 response first.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithPriorAuth"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::AbstractBasicAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.  If passwd_mgr also provides is_authenticated and update_authenticated methods (see HTTPPasswordMgrWithPriorAuth Objects), then the handler will use the is_authenticated result for a given URI to determine whether or not to send authentication credentials with the request.  If is_authenticated returns True for the URI, credentials are sent.  If is_authenticated is False, credentials are not sent, and then if a 401 response is received the request is re-sent with the authentication credentials.  If authentication succeeds, update_authenticated is called to set is_authenticated True for the URI, so that subsequent requests to the URI or any of its super-URIs will automatically include the authentication credentials.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.AbstractBasicAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPBasicAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "Handle authentication with the remote host. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. HTTPBasicAuthHandler will raise a ValueError when presented with a wrong Authentication scheme.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPBasicAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::ProxyBasicAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "Handle authentication with the proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyBasicAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::AbstractDigestAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.AbstractDigestAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPDigestAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "Handle authentication with the remote host. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. When both Digest Authentication Handler and Basic Authentication Handler are both added, Digest Authentication is always tried first. If the Digest Authentication returns a 40x response again, it is sent to Basic Authentication handler to Handle.  This Handler method will raise a ValueError when presented with an authentication scheme other than Digest or Basic.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPDigestAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::ProxyDigestAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "Handle authentication with the proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyDigestAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPHandler}}",
      "Body": "A class to handle opening of HTTP URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPSHandler}}({{c5::debuglevel}}=0, {{c6::context}}={{c7::None}}, {{c8::check_hostname}}={{c9::None}})",
      "Body": "A class to handle opening of HTTPS URLs.  context and check_hostname have the same meaning as in http.client.HTTPSConnection.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPSHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::FileHandler}}",
      "Body": "Open local files.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.FileHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::DataHandler}}",
      "Body": "Open data URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.DataHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::FTPHandler}}",
      "Body": "Open FTP URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.FTPHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::CacheFTPHandler}}",
      "Body": "Open FTP URLs, keeping a cache of open FTP connections to minimize delays.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.CacheFTPHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::UnknownHandler}}",
      "Body": "A catch-all class to handle unknown URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.UnknownHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPErrorProcessor}}",
      "Body": "Process HTTP error responses.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPErrorProcessor"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::full_url}}",
      "Body": "The original URL passed to the constructor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.full_url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::type}}",
      "Body": "The URI scheme.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.type"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::host}}",
      "Body": "The URI authority, typically a host, but may also contain a port separated by a colon.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.host"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::origin_req_host}}",
      "Body": "The original host for the request, without port.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.origin_req_host"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::selector}}",
      "Body": "The URI path.  If the Request uses a proxy, then selector will be the full URL that is passed to the proxy.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.selector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::data}}",
      "Body": "The entity body for the request, or None if not specified.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::unverifiable}}",
      "Body": "boolean, indicates whether the request is unverifiable as defined by RFC 2965.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.unverifiable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::method}}",
      "Body": "The HTTP request method to use.  By default its value is None, which means that get_method() will do its normal computation of the method to be used.  Its value can be set (thus overriding the default computation in get_method()) either by providing a default value by setting it at the class level in a Request subclass, or by passing a value in to the Request constructor via the method argument.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.method"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::get_method}}()",
      "Body": "Return a string indicating the HTTP request method.  If Request.method is not None, return its value, otherwise return 'GET' if Request.data is None, or 'POST' if it's not. This is only meaningful for HTTP requests.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.get_method"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::add_header}}({{c3::key}}, {{c4::val}})",
      "Body": "Add another header to the request.  Headers are currently ignored by all handlers except HTTP handlers, where they are added to the list of headers sent to the server.  Note that there cannot be more than one header with the same name, and later calls will overwrite previous calls in case the key collides. Currently, this is no loss of HTTP functionality, since all headers which have meaning when used more than once have a (header-specific) way of gaining the same functionality using only one header.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.add_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::add_unredirected_header}}({{c3::key}}, {{c4::header}})",
      "Body": "Add a header that will not be added to a redirected request.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.add_unredirected_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::has_header}}({{c3::header}})",
      "Body": "Return whether the instance has the named header (checks both regular and unredirected).",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.has_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::remove_header}}({{c3::header}})",
      "Body": "Remove named header from the request instance (both from regular and unredirected headers).",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.remove_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::get_full_url}}()",
      "Body": "Return the URL given in the constructor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.get_full_url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::set_proxy}}({{c3::host}}, {{c4::type}})",
      "Body": "Prepare the request by connecting to a proxy server. The host and type will replace those of the instance, and the instance's selector will be the original URL given in the constructor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.set_proxy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::get_header}}({{c3::header_name}}, {{c4::default}}={{c5::None}})",
      "Body": "Return the value of the given header. If the header is not present, return the default value.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.get_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::header_items}}()",
      "Body": "Return a list of tuples (header_name, header_value) of the Request headers.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.header_items"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::OpenerDirector}}.{{c2::add_handler}}({{c3::handler}})",
      "Body": "handler should be an instance of BaseHandler.  The following methods are searched, and added to the possible chains (note that HTTP errors are a special case).",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.add_handler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::OpenerDirector}}.{{c2::open}}({{c3::url}}, {{c4::data}}={{c5::None}}[, {{c6::timeout}}])",
      "Body": "Open the given url (which can be a request object or a string), optionally passing the given data. Arguments, return values and exceptions raised are the same as those of urlopen() (which simply calls the open() method on the currently installed global OpenerDirector).  The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). The timeout feature actually works only for HTTP, HTTPS and FTP connections).",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::OpenerDirector}}.{{c2::error}}({{c3::proto}}, *args)",
      "Body": "Handle an error of the given protocol.  This will call the registered error handlers for the given protocol with the given arguments (which are protocol specific).  The HTTP protocol is a special case which uses the HTTP response code to determine the specific error handler; refer to the http_error_*() methods of the handler classes.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::add_parent}}({{c3::director}})",
      "Body": "Add a director as parent.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler.add_parent"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::close}}()",
      "Body": "Remove any parents.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::parent}}",
      "Body": "A valid OpenerDirector, which can be used to open using a different protocol, or handle errors.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler.parent"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::default_open}}({{c3::req}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler.default_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::protocol_open}}({{c3::req}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to handle URLs with the given protocol.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#basehandler-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::unknown_open}}({{c3::req}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs with no specific registered handler to open it.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler.unknown_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::http_error_default}}({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors.  It will be called automatically by the  OpenerDirector getting the error, and should not normally be called in other circumstances.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler.http_error_default"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::http_error_nnn}}({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "nnn should be a three-digit HTTP error code.  This method is also not defined in BaseHandler, but will be called, if it exists, on an instance of a subclass, when an HTTP error with code nnn occurs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler.http_error_nnn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::protocol_request}}({{c3::req}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to pre-process requests of the given protocol.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#basehandler-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::protocol_response}}({{c3::req}}, {{c4::response}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to post-process responses of the given protocol.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#basehandler-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::redirect_request}}({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}}, {{c8::newurl}})",
      "Body": "Return a Request or None in response to a redirect. This is called by the default implementations of the http_error_30*() methods when a redirection is received from the server.  If a redirection should take place, return a new Request to allow http_error_30*() to perform the redirect to newurl.  Otherwise, raise HTTPError if no other handler should try to handle this URL, or return None if you can't but another handler might.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.redirect_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::http_error_}}301({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Redirect to the Location: or URI: URL.  This method is called by the parent OpenerDirector when getting an HTTP 'moved permanently' response.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_301"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::http_error_}}302({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "The same as http_error_301(), but called for the 'found' response.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_302"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::http_error_}}303({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "The same as http_error_301(), but called for the 'see other' response.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_303"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::http_error_}}307({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "The same as http_error_301(), but called for the 'temporary redirect' response.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_307"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPCookieProcessor}}.{{c2::cookiejar}}",
      "Body": "The http.cookiejar.CookieJar in which cookies are stored.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPCookieProcessor.cookiejar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ProxyHandler}}.{{c2::protocol_open}}({{c3::request}})",
      "Body": "The ProxyHandler will have a method protocol_open() for every protocol which has a proxy in the proxies dictionary given in the constructor.  The method will modify requests to go through the proxy, by calling request.set_proxy(), and call the next handler in the chain to actually execute the protocol.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#proxyhandler-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgr}}.{{c2::add_password}}({{c3::realm}}, {{c4::uri}}, {{c5::user}}, {{c6::passwd}})",
      "Body": "uri can be either a single URI, or a sequence of URIs. realm, user and passwd must be strings. This causes (user, passwd) to be used as authentication tokens when authentication for realm and a super-URI of any of the given URIs is given.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgr.add_password"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgr}}.{{c2::find_user_password}}({{c3::realm}}, {{c4::authuri}})",
      "Body": "Get user/password for given realm and URI, if any.  This method will return (None, None) if there is no matching user/password.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgr.find_user_password"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgrWithPriorAuth}}.{{c2::add_password}}({{c3::realm}}, {{c4::uri}}, {{c5::user}}, {{c6::passwd}}, {{c7::is_authenticated}}={{c8::False}})",
      "Body": "realm, uri, user, passwd are as for HTTPPasswordMgr.add_password().  is_authenticated sets the initial value of the is_authenticated flag for the given URI or list of URIs. If is_authenticated is specified as True, realm is ignored.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithPriorAuth.add_password"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgr}}.{{c2::find_user_password}}({{c3::realm}}, {{c4::authuri}})",
      "Body": "Same as for HTTPPasswordMgrWithDefaultRealm objects",
      "Link": "https://docs.python.org/3/library/urllib.request.html#httppasswordmgrwithpriorauth-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgrWithPriorAuth}}.{{c2::update_authenticated}}({{c3::self}}, {{c4::uri}}, {{c5::is_authenticated}}={{c6::False}})",
      "Body": "Update the is_authenticated flag for the given uri or list of URIs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgrWithPriorAuth}}.{{c2::is_authenticated}}({{c3::self}}, {{c4::authuri}})",
      "Body": "Returns the current state of the is_authenticated flag for the given URI.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AbstractBasicAuthHandler}}.{{c2::http_error_auth_reqed}}({{c3::authreq}}, {{c4::host}}, {{c5::req}}, {{c6::headers}})",
      "Body": "Handle an authentication request by getting a user/password pair, and re-trying the request.  authreq should be the name of the header where the information about the realm is included in the request, host specifies the URL and path to authenticate for, req should be the (failed) Request object, and headers should be the error headers.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPBasicAuthHandler}}.{{c2::http_error_}}401({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Retry the request with authentication information, if available.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPBasicAuthHandler.http_error_401"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ProxyBasicAuthHandler}}.{{c2::http_error_}}407({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Retry the request with authentication information, if available.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyBasicAuthHandler.http_error_407"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AbstractDigestAuthHandler}}.{{c2::http_error_auth_reqed}}({{c3::authreq}}, {{c4::host}}, {{c5::req}}, {{c6::headers}})",
      "Body": "authreq should be the name of the header where the information about the realm is included in the request, host should be the host to authenticate to, req should be the (failed) Request object, and headers should be the error headers.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPDigestAuthHandler}}.{{c2::http_error_}}401({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Retry the request with authentication information, if available.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPDigestAuthHandler.http_error_401"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ProxyDigestAuthHandler}}.{{c2::http_error_}}407({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Retry the request with authentication information, if available.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyDigestAuthHandler.http_error_407"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPHandler}}.{{c2::http_open}}({{c3::req}})",
      "Body": "Send an HTTP request, which can be either GET or POST, depending on req.has_data().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPHandler.http_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPSHandler}}.{{c2::https_open}}({{c3::req}})",
      "Body": "Send an HTTPS request, which can be either GET or POST, depending on req.has_data().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPSHandler.https_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FileHandler}}.{{c2::file_open}}({{c3::req}})",
      "Body": "Open the file locally, if there is no host name, or the host name is 'localhost'.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.FileHandler.file_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DataHandler}}.{{c2::data_open}}({{c3::req}})",
      "Body": "Read a data URL. This kind of URL contains the content encoded in the URL itself. The data URL syntax is specified in RFC 2397. This implementation ignores white spaces in base64 encoded data URLs so the URL may be wrapped in whatever source file it comes from. But even though some browsers don't mind about a missing padding at the end of a base64 encoded data URL, this implementation will raise an ValueError in that case.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.DataHandler.data_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTPHandler}}.{{c2::ftp_open}}({{c3::req}})",
      "Body": "Open the FTP file indicated by req. The login is always done with empty username and password.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.FTPHandler.ftp_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CacheFTPHandler}}.{{c2::setTimeout}}({{c3::t}})",
      "Body": "Set timeout of connections to t seconds.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.CacheFTPHandler.setTimeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CacheFTPHandler}}.{{c2::setMaxConns}}({{c3::m}})",
      "Body": "Set maximum number of cached connections to m.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.CacheFTPHandler.setMaxConns"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UnknownHandler}}.{{c2::unknown_open}}()",
      "Body": "Raise a URLError exception.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.UnknownHandler.unknown_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPErrorProcessor}}.{{c2::http_response}}({{c3::request}}, {{c4::response}})",
      "Body": "Process HTTP error responses.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPErrorProcessor.http_response"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPErrorProcessor}}.{{c2::https_response}}({{c3::request}}, {{c4::response}})",
      "Body": "Process HTTPS error responses.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPErrorProcessor.https_response"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::urlretrieve}}({{c4::url}}, {{c5::filename}}={{c6::None}}, {{c7::reporthook}}={{c8::None}}, {{c9::data}}={{c10::None}})",
      "Body": "Copy a network object denoted by a URL to a local file. If the URL points to a local file, the object will not be copied unless filename is supplied. Return a tuple (filename, headers) where filename is the local file name under which the object can be found, and headers is whatever the info() method of the object returned by urlopen() returned (for a remote object). Exceptions are the same as for urlopen().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::urlcleanup}}()",
      "Body": "Cleans up temporary files that may have been left behind by previous calls to urlretrieve().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.urlcleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::URLopener}}({{c5::proxies}}={{c6::None}}, **x509)",
      "Body": "Deprecated since version 3.3.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::URLopener}}.{{c4::open}}({{c5::fullurl}}, {{c6::data}}={{c7::None}})",
      "Body": "Open fullurl using the appropriate protocol.  This method sets up cache and proxy information, then calls the appropriate open method with its input arguments.  If the scheme is not recognized, open_unknown() is called. The data argument has the same meaning as the data argument of urlopen().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::URLopener}}.{{c4::open_unknown}}({{c5::fullurl}}, {{c6::data}}={{c7::None}})",
      "Body": "Overridable interface to open unknown URL types.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open_unknown"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::URLopener}}.{{c4::retrieve}}({{c5::url}}, {{c6::filename}}={{c7::None}}, {{c8::reporthook}}={{c9::None}}, {{c10::data}}={{c11::None}})",
      "Body": "Retrieves the contents of url and places it in filename.  The return value is a tuple consisting of a local filename and either an email.message.Message object containing the response headers (for remote URLs) or None (for local URLs).  The caller must then open and read the contents of filename.  If filename is not given and the URL refers to a local file, the input filename is returned.  If the URL is non-local and filename is not given, the filename is the output of tempfile.mktemp() with a suffix that matches the suffix of the last path component of the input URL.  If reporthook is given, it must be a function accepting three numeric parameters: A chunk number, the maximum size chunks are read in and the total size of the download (-1 if unknown).  It will be called once at the start and after each chunk of data is read from the network.  reporthook is ignored for local URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::URLopener}}.{{c4::version}}",
      "Body": "Variable that specifies the user agent of the opener object.  To get urllib to tell servers that it is a particular user agent, set this in a subclass as a class variable or in the constructor before calling the base constructor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::FancyURLopener}}(...)",
      "Body": "Deprecated since version 3.3.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::FancyURLopener}}.{{c4::prompt_user_passwd}}({{c5::host}}, {{c6::realm}})",
      "Body": "Return information needed to authenticate the user at the given host in the specified security realm.  The return value should be a tuple, (user, password), which can be used for basic authentication.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener.prompt_user_passwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::urlopen}}({{c4::url}}, {{c5::data}}={{c6::None}}, [{{c7::timeout}}, ]*, {{c8::cafile}}={{c9::None}}, {{c10::capath}}={{c11::None}}, {{c12::cadefault}}={{c13::False}}, {{c14::context}}={{c15::None}})",
      "Body": "Open the URL url, which can be either a string or a Request object.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.urlopen"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::install_opener}}({{c4::opener}})",
      "Body": "Install an OpenerDirector instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call OpenerDirector.open() instead of urlopen().  The code does not check for a real OpenerDirector, and any class with the appropriate interface will work.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.install_opener"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::build_opener}}([{{c4::handler}}, ...])",
      "Body": "Return an OpenerDirector instance, which chains the handlers in the order given. handlers can be either instances of BaseHandler, or subclasses of BaseHandler (in which case it must be possible to call the constructor without any parameters).  Instances of the following classes will be in front of the handlers, unless the handlers contain them, instances of them or subclasses of them: ProxyHandler (if proxy settings are detected), UnknownHandler, HTTPHandler, HTTPDefaultErrorHandler, HTTPRedirectHandler, FTPHandler, FileHandler, HTTPErrorProcessor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.build_opener"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::pathname}}2{{c4::url}}({{c5::path}})",
      "Body": "Convert the pathname path from the local syntax for a path to the form used in the path component of a URL.  This does not produce a complete URL.  The return value will already be quoted using the quote() function.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.pathname2url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::url}}2{{c4::pathname}}({{c5::path}})",
      "Body": "Convert the path component path from a percent-encoded URL to the local syntax for a path.  This does not accept a complete URL.  This function uses unquote() to decode path.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.url2pathname"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::getproxies}}()",
      "Body": "This helper function returns a dictionary of scheme to proxy server URL mappings. It scans the environment for variables named <scheme>_proxy, in a case insensitive approach, for all operating systems first, and when it cannot find it, looks for proxy information from Mac OSX System Configuration for Mac OS X and Windows Systems Registry for Windows. If both lowercase and uppercase environment variables exist (and disagree), lowercase is preferred.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.getproxies"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::Request}}({{c5::url}}, {{c6::data}}={{c7::None}}, {{c8::headers}}={}, {{c9::origin_req_host}}={{c10::None}}, {{c11::unverifiable}}={{c12::False}}, {{c13::method}}={{c14::None}})",
      "Body": "This class is an abstraction of a URL request.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::OpenerDirector}}",
      "Body": "The OpenerDirector class opens URLs via BaseHandlers chained together. It manages the chaining of handlers, and recovery from errors.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.OpenerDirector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::BaseHandler}}",
      "Body": "This is the base class for all registered handlers  and handles only the simple mechanics of registration.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.BaseHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPDefaultErrorHandler}}",
      "Body": "A class which defines a default handler for HTTP error responses; all responses are turned into HTTPError exceptions.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPDefaultErrorHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPRedirectHandler}}",
      "Body": "A class to handle redirections.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPRedirectHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPCookieProcessor}}({{c5::cookiejar}}={{c6::None}})",
      "Body": "A class to handle HTTP Cookies.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPCookieProcessor"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::ProxyHandler}}({{c5::proxies}}={{c6::None}})",
      "Body": "Cause requests to go through a proxy. If proxies is given, it must be a dictionary mapping protocol names to URLs of proxies. The default is to read the list of proxies from the environment variables <protocol>_proxy.  If no proxy environment variables are set, then in a Windows environment proxy settings are obtained from the registry's Internet Settings section, and in a Mac OS X environment proxy information is retrieved from the OS X System Configuration Framework.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.ProxyHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPPasswordMgr}}",
      "Body": "Keep a database of  (realm, uri) -> (user, password) mappings.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPPasswordMgr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPPasswordMgrWithDefaultRealm}}",
      "Body": "Keep a database of  (realm, uri) -> (user, password) mappings. A realm of None is considered a catch-all realm, which is searched if no other realm fits.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPPasswordMgrWithDefaultRealm"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPPasswordMgrWithPriorAuth}}",
      "Body": "A variant of HTTPPasswordMgrWithDefaultRealm that also has a database of uri -> is_authenticated mappings.  Can be used by a BasicAuth handler to determine when to send authentication credentials immediately instead of waiting for a 401 response first.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPPasswordMgrWithPriorAuth"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::AbstractBasicAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.  If passwd_mgr also provides is_authenticated and update_authenticated methods (see HTTPPasswordMgrWithPriorAuth Objects), then the handler will use the is_authenticated result for a given URI to determine whether or not to send authentication credentials with the request.  If is_authenticated returns True for the URI, credentials are sent.  If is_authenticated is False, credentials are not sent, and then if a 401 response is received the request is re-sent with the authentication credentials.  If authentication succeeds, update_authenticated is called to set is_authenticated True for the URI, so that subsequent requests to the URI or any of its super-URIs will automatically include the authentication credentials.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.AbstractBasicAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPBasicAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "Handle authentication with the remote host. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. HTTPBasicAuthHandler will raise a ValueError when presented with a wrong Authentication scheme.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPBasicAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::ProxyBasicAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "Handle authentication with the proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.ProxyBasicAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::AbstractDigestAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.AbstractDigestAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPDigestAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "Handle authentication with the remote host. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. When both Digest Authentication Handler and Basic Authentication Handler are both added, Digest Authentication is always tried first. If the Digest Authentication returns a 40x response again, it is sent to Basic Authentication handler to Handle.  This Handler method will raise a ValueError when presented with an authentication scheme other than Digest or Basic.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPDigestAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::ProxyDigestAuthHandler}}({{c5::password_mgr}}={{c6::None}})",
      "Body": "Handle authentication with the proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.ProxyDigestAuthHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPHandler}}",
      "Body": "A class to handle opening of HTTP URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPSHandler}}({{c5::debuglevel}}=0, {{c6::context}}={{c7::None}}, {{c8::check_hostname}}={{c9::None}})",
      "Body": "A class to handle opening of HTTPS URLs.  context and check_hostname have the same meaning as in http.client.HTTPSConnection.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPSHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::FileHandler}}",
      "Body": "Open local files.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.FileHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::DataHandler}}",
      "Body": "Open data URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.DataHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::FTPHandler}}",
      "Body": "Open FTP URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.FTPHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::CacheFTPHandler}}",
      "Body": "Open FTP URLs, keeping a cache of open FTP connections to minimize delays.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.CacheFTPHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::UnknownHandler}}",
      "Body": "A catch-all class to handle unknown URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.UnknownHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::HTTPErrorProcessor}}",
      "Body": "Process HTTP error responses.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPErrorProcessor"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::full_url}}",
      "Body": "The original URL passed to the constructor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.full_url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::type}}",
      "Body": "The URI scheme.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.type"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::host}}",
      "Body": "The URI authority, typically a host, but may also contain a port separated by a colon.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.host"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::origin_req_host}}",
      "Body": "The original host for the request, without port.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.origin_req_host"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::selector}}",
      "Body": "The URI path.  If the Request uses a proxy, then selector will be the full URL that is passed to the proxy.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.selector"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::data}}",
      "Body": "The entity body for the request, or None if not specified.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::unverifiable}}",
      "Body": "boolean, indicates whether the request is unverifiable as defined by RFC 2965.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.unverifiable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::method}}",
      "Body": "The HTTP request method to use.  By default its value is None, which means that get_method() will do its normal computation of the method to be used.  Its value can be set (thus overriding the default computation in get_method()) either by providing a default value by setting it at the class level in a Request subclass, or by passing a value in to the Request constructor via the method argument.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.method"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::get_method}}()",
      "Body": "Return a string indicating the HTTP request method.  If Request.method is not None, return its value, otherwise return 'GET' if Request.data is None, or 'POST' if it's not. This is only meaningful for HTTP requests.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.get_method"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::add_header}}({{c3::key}}, {{c4::val}})",
      "Body": "Add another header to the request.  Headers are currently ignored by all handlers except HTTP handlers, where they are added to the list of headers sent to the server.  Note that there cannot be more than one header with the same name, and later calls will overwrite previous calls in case the key collides. Currently, this is no loss of HTTP functionality, since all headers which have meaning when used more than once have a (header-specific) way of gaining the same functionality using only one header.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.add_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::add_unredirected_header}}({{c3::key}}, {{c4::header}})",
      "Body": "Add a header that will not be added to a redirected request.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.add_unredirected_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::has_header}}({{c3::header}})",
      "Body": "Return whether the instance has the named header (checks both regular and unredirected).",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.has_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::remove_header}}({{c3::header}})",
      "Body": "Remove named header from the request instance (both from regular and unredirected headers).",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.remove_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::get_full_url}}()",
      "Body": "Return the URL given in the constructor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.get_full_url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::set_proxy}}({{c3::host}}, {{c4::type}})",
      "Body": "Prepare the request by connecting to a proxy server. The host and type will replace those of the instance, and the instance's selector will be the original URL given in the constructor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.set_proxy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::get_header}}({{c3::header_name}}, {{c4::default}}={{c5::None}})",
      "Body": "Return the value of the given header. If the header is not present, return the default value.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.get_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Request}}.{{c2::header_items}}()",
      "Body": "Return a list of tuples (header_name, header_value) of the Request headers.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.Request.header_items"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::OpenerDirector}}.{{c2::add_handler}}({{c3::handler}})",
      "Body": "handler should be an instance of BaseHandler.  The following methods are searched, and added to the possible chains (note that HTTP errors are a special case).",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.OpenerDirector.add_handler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::OpenerDirector}}.{{c2::open}}({{c3::url}}, {{c4::data}}={{c5::None}}[, {{c6::timeout}}])",
      "Body": "Open the given url (which can be a request object or a string), optionally passing the given data. Arguments, return values and exceptions raised are the same as those of urlopen() (which simply calls the open() method on the currently installed global OpenerDirector).  The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). The timeout feature actually works only for HTTP, HTTPS and FTP connections).",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.OpenerDirector.open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::OpenerDirector}}.{{c2::error}}({{c3::proto}}, *args)",
      "Body": "Handle an error of the given protocol.  This will call the registered error handlers for the given protocol with the given arguments (which are protocol specific).  The HTTP protocol is a special case which uses the HTTP response code to determine the specific error handler; refer to the http_error_*() methods of the handler classes.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.OpenerDirector.error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::add_parent}}({{c3::director}})",
      "Body": "Add a director as parent.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.BaseHandler.add_parent"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::close}}()",
      "Body": "Remove any parents.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.BaseHandler.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::parent}}",
      "Body": "A valid OpenerDirector, which can be used to open using a different protocol, or handle errors.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.BaseHandler.parent"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::default_open}}({{c3::req}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.BaseHandler.default_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::protocol_open}}({{c3::req}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to handle URLs with the given protocol.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#basehandler-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::unknown_open}}({{c3::req}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs with no specific registered handler to open it.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.BaseHandler.unknown_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::http_error_default}}({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors.  It will be called automatically by the  OpenerDirector getting the error, and should not normally be called in other circumstances.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.BaseHandler.http_error_default"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::http_error_nnn}}({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "nnn should be a three-digit HTTP error code.  This method is also not defined in BaseHandler, but will be called, if it exists, on an instance of a subclass, when an HTTP error with code nnn occurs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.BaseHandler.http_error_nnn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::protocol_request}}({{c3::req}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to pre-process requests of the given protocol.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#basehandler-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseHandler}}.{{c2::protocol_response}}({{c3::req}}, {{c4::response}})",
      "Body": "This method is not defined in BaseHandler, but subclasses should define it if they want to post-process responses of the given protocol.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#basehandler-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::redirect_request}}({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}}, {{c8::newurl}})",
      "Body": "Return a Request or None in response to a redirect. This is called by the default implementations of the http_error_30*() methods when a redirection is received from the server.  If a redirection should take place, return a new Request to allow http_error_30*() to perform the redirect to newurl.  Otherwise, raise HTTPError if no other handler should try to handle this URL, or return None if you can't but another handler might.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPRedirectHandler.redirect_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::http_error_}}301({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Redirect to the Location: or URI: URL.  This method is called by the parent OpenerDirector when getting an HTTP 'moved permanently' response.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPRedirectHandler.http_error_301"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::http_error_}}302({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "The same as http_error_301(), but called for the 'found' response.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPRedirectHandler.http_error_302"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::http_error_}}303({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "The same as http_error_301(), but called for the 'see other' response.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPRedirectHandler.http_error_303"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPRedirectHandler}}.{{c2::http_error_}}307({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "The same as http_error_301(), but called for the 'temporary redirect' response.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPRedirectHandler.http_error_307"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPCookieProcessor}}.{{c2::cookiejar}}",
      "Body": "The http.cookiejar.CookieJar in which cookies are stored.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPCookieProcessor.cookiejar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ProxyHandler}}.{{c2::protocol_open}}({{c3::request}})",
      "Body": "The ProxyHandler will have a method protocol_open() for every protocol which has a proxy in the proxies dictionary given in the constructor.  The method will modify requests to go through the proxy, by calling request.set_proxy(), and call the next handler in the chain to actually execute the protocol.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#proxyhandler-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgr}}.{{c2::add_password}}({{c3::realm}}, {{c4::uri}}, {{c5::user}}, {{c6::passwd}})",
      "Body": "uri can be either a single URI, or a sequence of URIs. realm, user and passwd must be strings. This causes (user, passwd) to be used as authentication tokens when authentication for realm and a super-URI of any of the given URIs is given.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPPasswordMgr.add_password"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgr}}.{{c2::find_user_password}}({{c3::realm}}, {{c4::authuri}})",
      "Body": "Get user/password for given realm and URI, if any.  This method will return (None, None) if there is no matching user/password.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPPasswordMgr.find_user_password"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgrWithPriorAuth}}.{{c2::add_password}}({{c3::realm}}, {{c4::uri}}, {{c5::user}}, {{c6::passwd}}, {{c7::is_authenticated}}={{c8::False}})",
      "Body": "realm, uri, user, passwd are as for HTTPPasswordMgr.add_password().  is_authenticated sets the initial value of the is_authenticated flag for the given URI or list of URIs. If is_authenticated is specified as True, realm is ignored.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPPasswordMgrWithPriorAuth.add_password"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgr}}.{{c2::find_user_password}}({{c3::realm}}, {{c4::authuri}})",
      "Body": "Same as for HTTPPasswordMgrWithDefaultRealm objects",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#httppasswordmgrwithpriorauth-objects"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgrWithPriorAuth}}.{{c2::update_authenticated}}({{c3::self}}, {{c4::uri}}, {{c5::is_authenticated}}={{c6::False}})",
      "Body": "Update the is_authenticated flag for the given uri or list of URIs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPPasswordMgrWithPriorAuth}}.{{c2::is_authenticated}}({{c3::self}}, {{c4::authuri}})",
      "Body": "Returns the current state of the is_authenticated flag for the given URI.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AbstractBasicAuthHandler}}.{{c2::http_error_auth_reqed}}({{c3::authreq}}, {{c4::host}}, {{c5::req}}, {{c6::headers}})",
      "Body": "Handle an authentication request by getting a user/password pair, and re-trying the request.  authreq should be the name of the header where the information about the realm is included in the request, host specifies the URL and path to authenticate for, req should be the (failed) Request object, and headers should be the error headers.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPBasicAuthHandler}}.{{c2::http_error_}}401({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Retry the request with authentication information, if available.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPBasicAuthHandler.http_error_401"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ProxyBasicAuthHandler}}.{{c2::http_error_}}407({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Retry the request with authentication information, if available.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.ProxyBasicAuthHandler.http_error_407"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::AbstractDigestAuthHandler}}.{{c2::http_error_auth_reqed}}({{c3::authreq}}, {{c4::host}}, {{c5::req}}, {{c6::headers}})",
      "Body": "authreq should be the name of the header where the information about the realm is included in the request, host should be the host to authenticate to, req should be the (failed) Request object, and headers should be the error headers.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPDigestAuthHandler}}.{{c2::http_error_}}401({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Retry the request with authentication information, if available.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPDigestAuthHandler.http_error_401"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ProxyDigestAuthHandler}}.{{c2::http_error_}}407({{c3::req}}, {{c4::fp}}, {{c5::code}}, {{c6::msg}}, {{c7::hdrs}})",
      "Body": "Retry the request with authentication information, if available.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.ProxyDigestAuthHandler.http_error_407"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPHandler}}.{{c2::http_open}}({{c3::req}})",
      "Body": "Send an HTTP request, which can be either GET or POST, depending on req.has_data().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPHandler.http_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPSHandler}}.{{c2::https_open}}({{c3::req}})",
      "Body": "Send an HTTPS request, which can be either GET or POST, depending on req.has_data().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPSHandler.https_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FileHandler}}.{{c2::file_open}}({{c3::req}})",
      "Body": "Open the file locally, if there is no host name, or the host name is 'localhost'.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.FileHandler.file_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DataHandler}}.{{c2::data_open}}({{c3::req}})",
      "Body": "Read a data URL. This kind of URL contains the content encoded in the URL itself. The data URL syntax is specified in RFC 2397. This implementation ignores white spaces in base64 encoded data URLs so the URL may be wrapped in whatever source file it comes from. But even though some browsers don't mind about a missing padding at the end of a base64 encoded data URL, this implementation will raise an ValueError in that case.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.DataHandler.data_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTPHandler}}.{{c2::ftp_open}}({{c3::req}})",
      "Body": "Open the FTP file indicated by req. The login is always done with empty username and password.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.FTPHandler.ftp_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CacheFTPHandler}}.{{c2::setTimeout}}({{c3::t}})",
      "Body": "Set timeout of connections to t seconds.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.CacheFTPHandler.setTimeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CacheFTPHandler}}.{{c2::setMaxConns}}({{c3::m}})",
      "Body": "Set maximum number of cached connections to m.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.CacheFTPHandler.setMaxConns"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UnknownHandler}}.{{c2::unknown_open}}()",
      "Body": "Raise a URLError exception.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.UnknownHandler.unknown_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPErrorProcessor}}.{{c2::http_response}}({{c3::request}}, {{c4::response}})",
      "Body": "Process HTTP error responses.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPErrorProcessor.http_response"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPErrorProcessor}}.{{c2::https_response}}({{c3::request}}, {{c4::response}})",
      "Body": "Process HTTPS error responses.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.HTTPErrorProcessor.https_response"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::urlretrieve}}({{c4::url}}, {{c5::filename}}={{c6::None}}, {{c7::reporthook}}={{c8::None}}, {{c9::data}}={{c10::None}})",
      "Body": "Copy a network object denoted by a URL to a local file. If the URL points to a local file, the object will not be copied unless filename is supplied. Return a tuple (filename, headers) where filename is the local file name under which the object can be found, and headers is whatever the info() method of the object returned by urlopen() returned (for a remote object). Exceptions are the same as for urlopen().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.urlretrieve"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::urlcleanup}}()",
      "Body": "Cleans up temporary files that may have been left behind by previous calls to urlretrieve().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.urlcleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::URLopener}}({{c5::proxies}}={{c6::None}}, **x509)",
      "Body": "Deprecated since version 3.3.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.URLopener"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::URLopener}}.{{c4::open}}({{c5::fullurl}}, {{c6::data}}={{c7::None}})",
      "Body": "Open fullurl using the appropriate protocol.  This method sets up cache and proxy information, then calls the appropriate open method with its input arguments.  If the scheme is not recognized, open_unknown() is called. The data argument has the same meaning as the data argument of urlopen().",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.URLopener.open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::URLopener}}.{{c4::open_unknown}}({{c5::fullurl}}, {{c6::data}}={{c7::None}})",
      "Body": "Overridable interface to open unknown URL types.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.URLopener.open_unknown"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::URLopener}}.{{c4::retrieve}}({{c5::url}}, {{c6::filename}}={{c7::None}}, {{c8::reporthook}}={{c9::None}}, {{c10::data}}={{c11::None}})",
      "Body": "Retrieves the contents of url and places it in filename.  The return value is a tuple consisting of a local filename and either an email.message.Message object containing the response headers (for remote URLs) or None (for local URLs).  The caller must then open and read the contents of filename.  If filename is not given and the URL refers to a local file, the input filename is returned.  If the URL is non-local and filename is not given, the filename is the output of tempfile.mktemp() with a suffix that matches the suffix of the last path component of the input URL.  If reporthook is given, it must be a function accepting three numeric parameters: A chunk number, the maximum size chunks are read in and the total size of the download (-1 if unknown).  It will be called once at the start and after each chunk of data is read from the network.  reporthook is ignored for local URLs.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.URLopener.retrieve"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::URLopener}}.{{c4::version}}",
      "Body": "Variable that specifies the user agent of the opener object.  To get urllib to tell servers that it is a particular user agent, set this in a subclass as a class variable or in the constructor before calling the base constructor.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.URLopener.version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::request}}.{{c4::FancyURLopener}}(...)",
      "Body": "Deprecated since version 3.3.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.FancyURLopener"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::request}}.{{c3::FancyURLopener}}.{{c4::prompt_user_passwd}}({{c5::host}}, {{c6::realm}})",
      "Body": "Return information needed to authenticate the user at the given host in the specified security realm.  The return value should be a tuple, (user, password), which can be used for basic authentication.",
      "Link": "https://docs.python.org/3/library/urllib.request.html#module-urllib.response#urllib.request.FancyURLopener.prompt_user_passwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::urlparse}}({{c4::urlstring}}, {{c5::scheme}}='', {{c6::allow_fragments}}={{c7::True}})",
      "Body": "Parse a URL into six components, returning a 6-tuple.  This corresponds to the general structure of a URL: scheme://netloc/path;parameters?query#fragment. Each tuple item is a string, possibly empty. The components are not broken up in smaller parts (for example, the network location is a single string), and % escapes are not expanded. The delimiters as shown above are not part of the result, except for a leading slash in the path component, which is retained if present.  For example:",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::parse_qs}}({{c4::qs}}, {{c5::keep_blank_values}}={{c6::False}}, {{c7::strict_parsing}}={{c8::False}}, {{c9::encoding}}='{{c10::utf}}-8', {{c11::errors}}='{{c12::replace}}')",
      "Body": "Parse a query string given as a string argument (data of type application/x-www-form-urlencoded).  Data are returned as a dictionary.  The dictionary keys are the unique query variable names and the values are lists of values for each name.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::parse_qsl}}({{c4::qs}}, {{c5::keep_blank_values}}={{c6::False}}, {{c7::strict_parsing}}={{c8::False}}, {{c9::encoding}}='{{c10::utf}}-8', {{c11::errors}}='{{c12::replace}}')",
      "Body": "Parse a query string given as a string argument (data of type application/x-www-form-urlencoded).  Data are returned as a list of name, value pairs.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qsl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::urlunparse}}({{c4::parts}})",
      "Body": "Construct a URL from a tuple as returned by urlparse(). The parts argument can be any six-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ? with an empty query; the RFC states that these are equivalent).",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlunparse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::urlsplit}}({{c4::urlstring}}, {{c5::scheme}}='', {{c6::allow_fragments}}={{c7::True}})",
      "Body": "This is similar to urlparse(), but does not split the params from the URL. This should generally be used instead of urlparse() if the more recent URL syntax allowing parameters to be applied to each segment of the path portion of the URL (see RFC 2396) is wanted.  A separate function is needed to separate the path segments and parameters.  This function returns a 5-tuple: (addressing scheme, network location, path, query, fragment identifier).",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlsplit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::urlunsplit}}({{c4::parts}})",
      "Body": "Combine the elements of a tuple as returned by urlsplit() into a complete URL as a string. The parts argument can be any five-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ? with an empty query; the RFC states that these are equivalent).",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlunsplit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::urljoin}}({{c4::base}}, {{c5::url}}, {{c6::allow_fragments}}={{c7::True}})",
      "Body": "Construct a full (absolute) URL by combining a base URL (base) with another URL (url).  Informally, this uses components of the base URL, in particular the addressing scheme, the network location and (part of) the path, to provide missing components in the relative URL.  For example:",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urljoin"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::urldefrag}}({{c4::url}})",
      "Body": "If url contains a fragment identifier, return a modified version of url with no fragment identifier, and the fragment identifier as a separate string.  If there is no fragment identifier in url, return url unmodified and an empty string.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urldefrag"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::SplitResult}}.{{c4::geturl}}()",
      "Body": "Return the re-combined version of the original URL as a string. This may differ from the original URL in that the scheme may be normalized to lower case and empty components may be dropped. Specifically, empty parameters, queries, and fragment identifiers will be removed.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urllib.parse.SplitResult.geturl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::parse}}.{{c4::DefragResult}}({{c5::url}}, {{c6::fragment}})",
      "Body": "Concrete class for urldefrag() results containing str data. The encode() method returns a DefragResultBytes instance.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.DefragResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::parse}}.{{c4::ParseResult}}({{c5::scheme}}, {{c6::netloc}}, {{c7::path}}, {{c8::params}}, {{c9::query}}, {{c10::fragment}})",
      "Body": "Concrete class for urlparse() results containing str data. The encode() method returns a ParseResultBytes instance.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.ParseResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::parse}}.{{c4::SplitResult}}({{c5::scheme}}, {{c6::netloc}}, {{c7::path}}, {{c8::query}}, {{c9::fragment}})",
      "Body": "Concrete class for urlsplit() results containing str data. The encode() method returns a SplitResultBytes instance.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.SplitResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::parse}}.{{c4::DefragResultBytes}}({{c5::url}}, {{c6::fragment}})",
      "Body": "Concrete class for urldefrag() results containing bytes data. The decode() method returns a DefragResult instance.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.DefragResultBytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::parse}}.{{c4::ParseResultBytes}}({{c5::scheme}}, {{c6::netloc}}, {{c7::path}}, {{c8::params}}, {{c9::query}}, {{c10::fragment}})",
      "Body": "Concrete class for urlparse() results containing bytes data. The decode() method returns a ParseResult instance.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.ParseResultBytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::parse}}.{{c4::SplitResultBytes}}({{c5::scheme}}, {{c6::netloc}}, {{c7::path}}, {{c8::query}}, {{c9::fragment}})",
      "Body": "Concrete class for urlsplit() results containing bytes data. The decode() method returns a SplitResult instance.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.SplitResultBytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::quote}}({{c4::string}}, {{c5::safe}}='/', {{c6::encoding}}={{c7::None}}, {{c8::errors}}={{c9::None}})",
      "Body": "Replace special characters in string using the %xx escape. Letters, digits, and the characters '_.-~' are never quoted. By default, this function is intended for quoting the path section of URL. The optional safe parameter specifies additional ASCII characters that should not be quoted  its default value is '/'.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::quote_plus}}({{c4::string}}, {{c5::safe}}='', {{c6::encoding}}={{c7::None}}, {{c8::errors}}={{c9::None}})",
      "Body": "Like quote(), but also replace spaces by plus signs, as required for quoting HTML form values when building up a query string to go into a URL. Plus signs in the original string are escaped unless they are included in safe.  It also does not have safe default to '/'.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::quote_from_bytes}}({{c4::bytes}}, {{c5::safe}}='/')",
      "Body": "Like quote(), but accepts a bytes object rather than a str, and does not perform string-to-bytes encoding.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_from_bytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::unquote}}({{c4::string}}, {{c5::encoding}}='{{c6::utf}}-8', {{c7::errors}}='{{c8::replace}}')",
      "Body": "Replace %xx escapes by their single-character equivalent. The optional encoding and errors parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the bytes.decode() method.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::unquote_plus}}({{c4::string}}, {{c5::encoding}}='{{c6::utf}}-8', {{c7::errors}}='{{c8::replace}}')",
      "Body": "Like unquote(), but also replace plus signs by spaces, as required for unquoting HTML form values.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote_plus"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::unquote_to_bytes}}({{c4::string}})",
      "Body": "Replace %xx escapes by their single-octet equivalent, and return a bytes object.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote_to_bytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::parse}}.{{c3::urlencode}}({{c4::query}}, {{c5::doseq}}={{c6::False}}, {{c7::safe}}='', {{c8::encoding}}={{c9::None}}, {{c10::errors}}={{c11::None}}, {{c12::quote_via}}={{c13::quote_plus}})",
      "Body": "Convert a mapping object or a sequence of two-element tuples, which may contain str or bytes objects, to a percent-encoded ASCII text string.  If the resultant string is to be used as a data for POST operation with the urlopen() function, then it should be encoded to bytes, otherwise it would result in a TypeError.",
      "Link": "https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::urllib}}.{{c3::error}}.{{c4::URLError}}",
      "Body": "The handlers raise this exception (or derived exceptions) when they run into a problem.  It is a subclass of OSError.",
      "Link": "https://docs.python.org/3/library/urllib.error.html#urllib.error.URLError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::error}}.{{c3::URLError}}.{{c4::reason}}",
      "Body": "The reason for this error.  It can be a message string or another exception instance.",
      "Link": "https://docs.python.org/3/library/urllib.error.html#urllib.error.URLError.reason"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::urllib}}.{{c3::error}}.{{c4::HTTPError}}",
      "Body": "Though being an exception (a subclass of URLError), an HTTPError can also function as a non-exceptional file-like return value (the same thing that urlopen() returns).  This is useful when handling exotic HTTP errors, such as requests for authentication.",
      "Link": "https://docs.python.org/3/library/urllib.error.html#urllib.error.HTTPError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::error}}.{{c3::HTTPError}}.{{c4::code}}",
      "Body": "An HTTP status code as defined in RFC 2616.  This numeric value corresponds to a value found in the dictionary of codes as found in http.server.BaseHTTPRequestHandler.responses.",
      "Link": "https://docs.python.org/3/library/urllib.error.html#urllib.error.HTTPError.code"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::error}}.{{c3::HTTPError}}.{{c4::reason}}",
      "Body": "This is usually a string explaining the reason for this error.",
      "Link": "https://docs.python.org/3/library/urllib.error.html#urllib.error.HTTPError.reason"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::error}}.{{c3::HTTPError}}.{{c4::headers}}",
      "Body": "The HTTP response headers for the HTTP request that caused the HTTPError.",
      "Link": "https://docs.python.org/3/library/urllib.error.html#urllib.error.HTTPError.headers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::urllib}}.{{c3::error}}.{{c4::ContentTooShortError}}({{c5::msg}}, {{c6::content}})",
      "Body": "This exception is raised when the urlretrieve() function detects that the amount of the downloaded data is less than the expected amount (given by the Content-Length header).  The content attribute stores the downloaded (and supposedly truncated) data.",
      "Link": "https://docs.python.org/3/library/urllib.error.html#urllib.error.ContentTooShortError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::urllib}}.{{c3::robotparser}}.{{c4::RobotFileParser}}({{c5::url}}='')",
      "Body": "This class provides methods to read, parse and answer questions about the robots.txt file at url.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::robotparser}}.{{c3::RobotFileParser}}.{{c4::set_url}}({{c5::url}})",
      "Body": "Sets the URL referring to a robots.txt file.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser.set_url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::robotparser}}.{{c3::RobotFileParser}}.{{c4::read}}()",
      "Body": "Reads the robots.txt URL and feeds it to the parser.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser.read"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::robotparser}}.{{c3::RobotFileParser}}.{{c4::parse}}({{c5::lines}})",
      "Body": "Parses the lines argument.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::robotparser}}.{{c3::RobotFileParser}}.{{c4::can_fetch}}({{c5::useragent}}, {{c6::url}})",
      "Body": "Returns True if the useragent is allowed to fetch the url according to the rules contained in the parsed robots.txt file.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser.can_fetch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::robotparser}}.{{c3::RobotFileParser}}.{{c4::mtime}}()",
      "Body": "Returns the time the robots.txt file was last fetched.  This is useful for long-running web spiders that need to check for new robots.txt files periodically.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser.mtime"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::robotparser}}.{{c3::RobotFileParser}}.{{c4::modified}}()",
      "Body": "Sets the time the robots.txt file was last fetched to the current time.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser.modified"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::robotparser}}.{{c3::RobotFileParser}}.{{c4::crawl_delay}}({{c5::useragent}})",
      "Body": "Returns the value of the Crawl-delay parameter from robots.txt for the useragent in question.  If there is no such parameter or it doesn't apply to the useragent specified or the robots.txt entry for this parameter has invalid syntax, return None.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser.crawl_delay"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::urllib}}.{{c2::robotparser}}.{{c3::RobotFileParser}}.{{c4::request_rate}}({{c5::useragent}})",
      "Body": "Returns the contents of the Request-rate parameter from robots.txt as a named tuple RequestRate(requests, seconds). If there is no such parameter or it doesn't apply to the useragent specified or the robots.txt entry for this parameter has invalid syntax, return None.",
      "Link": "https://docs.python.org/3/library/urllib.robotparser.html#urllib.robotparser.RobotFileParser.request_rate"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::HTTPStatus}}",
      "Body": "New in version 3.5.",
      "Link": "https://docs.python.org/3/library/http.html#http.HTTPStatus"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::client}}.{{c4::HTTPConnection}}({{c5::host}}, {{c6::port}}={{c7::None}}, [{{c8::timeout}}, ]source_address={{c9::None}}, {{c10::blocksize}}=8192)",
      "Body": "An HTTPConnection instance represents one transaction with an HTTP server.  It should be instantiated passing it a host and optional port number.  If no port number is passed, the port is extracted from the host string if it has the form host:port, else the default HTTP port (80) is used.  If the optional timeout parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional source_address parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from. The optional blocksize parameter sets the buffer size in bytes for sending a file-like message body.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::client}}.{{c4::HTTPSConnection}}({{c5::host}}, {{c6::port}}={{c7::None}}, {{c8::key_file}}={{c9::None}}, {{c10::cert_file}}={{c11::None}}, [{{c12::timeout}}, ]source_address={{c13::None}}, *, {{c14::context}}={{c15::None}}, {{c16::check_hostname}}={{c17::None}}, {{c18::blocksize}}=8192)",
      "Body": "A subclass of HTTPConnection that uses SSL for communication with secure servers.  Default port is 443.  If context is specified, it must be a ssl.SSLContext instance describing the various SSL options.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::client}}.{{c4::HTTPResponse}}({{c5::sock}}, {{c6::debuglevel}}=0, {{c7::method}}={{c8::None}}, {{c9::url}}={{c10::None}})",
      "Body": "Class whose instances are returned upon successful connection.  Not instantiated directly by user.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::HTTPException}}",
      "Body": "The base class of the other exceptions in this module.  It is a subclass of Exception.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::NotConnected}}",
      "Body": "A subclass of HTTPException.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.NotConnected"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::InvalidURL}}",
      "Body": "A subclass of HTTPException, raised if a port is given and is either non-numeric or empty.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.InvalidURL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::UnknownProtocol}}",
      "Body": "A subclass of HTTPException.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.UnknownProtocol"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::UnknownTransferEncoding}}",
      "Body": "A subclass of HTTPException.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.UnknownTransferEncoding"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::UnimplementedFileMode}}",
      "Body": "A subclass of HTTPException.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.UnimplementedFileMode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::IncompleteRead}}",
      "Body": "A subclass of HTTPException.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.IncompleteRead"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::ImproperConnectionState}}",
      "Body": "A subclass of HTTPException.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.ImproperConnectionState"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::CannotSendRequest}}",
      "Body": "A subclass of ImproperConnectionState.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.CannotSendRequest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::CannotSendHeader}}",
      "Body": "A subclass of ImproperConnectionState.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.CannotSendHeader"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::ResponseNotReady}}",
      "Body": "A subclass of ImproperConnectionState.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.ResponseNotReady"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::BadStatusLine}}",
      "Body": "A subclass of HTTPException.  Raised if a server responds with a HTTP status code that we don't understand.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.BadStatusLine"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::LineTooLong}}",
      "Body": "A subclass of HTTPException.  Raised if an excessively long line is received in the HTTP protocol from the server.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.LineTooLong"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::client}}.{{c4::RemoteDisconnected}}",
      "Body": "A subclass of ConnectionResetError and BadStatusLine.  Raised by HTTPConnection.getresponse() when the attempt to read the response results in no data read from the connection, indicating that the remote end has closed the connection.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.RemoteDisconnected"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::client}}.{{c3::HTTP_PORT}}",
      "Body": "The default port for the HTTP protocol (always 80).",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTP_PORT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::client}}.{{c3::HTTPS_PORT}}",
      "Body": "The default port for the HTTPS protocol (always 443).",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPS_PORT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::client}}.{{c3::responses}}",
      "Body": "This dictionary maps the HTTP 1.1 status codes to the W3C names.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.responses"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::request}}({{c3::method}}, {{c4::url}}, {{c5::body}}={{c6::None}}, {{c7::headers}}={}, *, {{c8::encode_chunked}}={{c9::False}})",
      "Body": "This will send a request to the server using the HTTP request method method and the selector url.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::getresponse}}()",
      "Body": "Should be called after a request is sent to get the response from the server. Returns an HTTPResponse instance.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.getresponse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::set_debuglevel}}({{c3::level}})",
      "Body": "Set the debugging level.  The default debug level is 0, meaning no debugging output is printed.  Any value greater than 0 will cause all currently defined debug output to be printed to stdout.  The debuglevel is passed to any new HTTPResponse objects that are created.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.set_debuglevel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::set_tunnel}}({{c3::host}}, {{c4::port}}={{c5::None}}, {{c6::headers}}={{c7::None}})",
      "Body": "Set the host and the port for HTTP Connect Tunnelling. This allows running the connection through a proxy server.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.set_tunnel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::connect}}()",
      "Body": "Connect to the server specified when the object was created.  By default, this is called automatically when making a request if the client does not already have a connection.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.connect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::close}}()",
      "Body": "Close the connection to the server.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::blocksize}}",
      "Body": "Buffer size in bytes for sending a file-like message body.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.blocksize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::putrequest}}({{c3::method}}, {{c4::url}}, {{c5::skip_host}}={{c6::False}}, {{c7::skip_accept_encoding}}={{c8::False}})",
      "Body": "This should be the first call after the connection to the server has been made. It sends a line to the server consisting of the method string, the url string, and the HTTP version (HTTP/1.1).  To disable automatic sending of Host: or Accept-Encoding: headers (for example to accept additional content encodings), specify skip_host or skip_accept_encoding with non-False values.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.putrequest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::putheader}}({{c3::header}}, {{c4::argument}}[, ...])",
      "Body": "Send an RFC 822-style header to the server.  It sends a line to the server consisting of the header, a colon and a space, and the first argument.  If more arguments are given, continuation lines are sent, each consisting of a tab and an argument.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.putheader"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::endheaders}}({{c3::message_body}}={{c4::None}}, *, {{c5::encode_chunked}}={{c6::False}})",
      "Body": "Send a blank line to the server, signalling the end of the headers. The optional message_body argument can be used to pass a message body associated with the request.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.endheaders"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPConnection}}.{{c2::send}}({{c3::data}})",
      "Body": "Send data to the server.  This should be used directly only after the endheaders() method has been called and before getresponse() is called.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.send"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::read}}([{{c3::amt}}])",
      "Body": "Reads and returns the response body, or up to the next amt bytes.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.read"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::readinto}}({{c3::b}})",
      "Body": "Reads up to the next len(b) bytes of the response body into the buffer b. Returns the number of bytes read.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.readinto"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::getheader}}({{c3::name}}, {{c4::default}}={{c5::None}})",
      "Body": "Return the value of the header name, or default if there is no header matching name.  If there is more than one  header with the name name, return all of the values joined by ', '.  If 'default' is any iterable other than a single string, its elements are similarly returned joined by commas.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.getheader"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::getheaders}}()",
      "Body": "Return a list of (header, value) tuples.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.getheaders"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::fileno}}()",
      "Body": "Return the fileno of the underlying socket.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::msg}}",
      "Body": "A http.client.HTTPMessage instance containing the response headers.  http.client.HTTPMessage is a subclass of email.message.Message.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.msg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::version}}",
      "Body": "HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::status}}",
      "Body": "Status code returned by server.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.status"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::reason}}",
      "Body": "Reason phrase returned by server.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.reason"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::debuglevel}}",
      "Body": "A debugging hook.  If debuglevel is greater than zero, messages will be printed to stdout as the response is read and parsed.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::HTTPResponse}}.{{c2::closed}}",
      "Body": "Is True if the stream is closed.",
      "Link": "https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.closed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ftplib}}.{{c3::FTP}}({{c4::host}}='', {{c5::user}}='', {{c6::passwd}}='', {{c7::acct}}='', {{c8::timeout}}={{c9::None}}, {{c10::source_address}}={{c11::None}})",
      "Body": "Return a new instance of the FTP class.  When host is given, the method call connect(host) is made.  When user is given, additionally the method call login(user, passwd, acct) is made (where passwd and acct default to the empty string when not given).  The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if is not specified, the global default timeout setting will be used). source_address is a 2-tuple (host, port) for the socket to bind to as its source address before connecting.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ftplib}}.{{c3::FTP_TLS}}({{c4::host}}='', {{c5::user}}='', {{c6::passwd}}='', {{c7::acct}}='', {{c8::keyfile}}={{c9::None}}, {{c10::certfile}}={{c11::None}}, {{c12::context}}={{c13::None}}, {{c14::timeout}}={{c15::None}}, {{c16::source_address}}={{c17::None}})",
      "Body": "A FTP subclass which adds TLS support to FTP as described in RFC 4217. Connect as usual to port 21 implicitly securing the FTP control connection before authenticating. Securing the data connection requires the user to explicitly ask for it by calling the prot_p() method.  context is a ssl.SSLContext object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure.  Please read Security considerations for best practices.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ftplib}}.{{c3::error_reply}}",
      "Body": "Exception raised when an unexpected reply is received from the server.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.error_reply"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ftplib}}.{{c3::error_temp}}",
      "Body": "Exception raised when an error code signifying a temporary error (response codes in the range 400499) is received.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.error_temp"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ftplib}}.{{c3::error_perm}}",
      "Body": "Exception raised when an error code signifying a permanent error (response codes in the range 500599) is received.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.error_perm"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ftplib}}.{{c3::error_proto}}",
      "Body": "Exception raised when a reply is received from the server that does not fit the response specifications of the File Transfer Protocol, i.e. begin with a digit in the range 15.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.error_proto"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ftplib}}.{{c2::all_errors}}",
      "Body": "The set of all exceptions (as a tuple) that methods of FTP instances may raise as a result of problems with the FTP connection (as opposed to programming errors made by the caller).  This set includes the four exceptions listed above as well as OSError.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.all_errors"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::set_debuglevel}}({{c3::level}})",
      "Body": "Set the instance's debugging level.  This controls the amount of debugging output printed.  The default, 0, produces no debugging output.  A value of 1 produces a moderate amount of debugging output, generally a single line per request.  A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.set_debuglevel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::connect}}({{c3::host}}='', {{c4::port}}=0, {{c5::timeout}}={{c6::None}}, {{c7::source_address}}={{c8::None}})",
      "Body": "Connect to the given host and port.  The default port number is 21, as specified by the FTP protocol specification.  It is rarely needed to specify a different port number.  This function should be called only once for each instance; it should not be called at all if a host was given when the instance was created.  All other methods can only be used after a connection has been made. The optional timeout parameter specifies a timeout in seconds for the connection attempt. If no timeout is passed, the global default timeout setting will be used. source_address is a 2-tuple (host, port) for the socket to bind to as its source address before connecting.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.connect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::getwelcome}}()",
      "Body": "Return the welcome message sent by the server in reply to the initial connection.  (This message sometimes contains disclaimers or help information that may be relevant to the user.)",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.getwelcome"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::login}}({{c3::user}}='{{c4::anonymous}}', {{c5::passwd}}='', {{c6::acct}}='')",
      "Body": "Log in as the given user.  The passwd and acct parameters are optional and default to the empty string.  If no user is specified, it defaults to 'anonymous'.  If user is 'anonymous', the default passwd is 'anonymous@'.  This function should be called only once for each instance, after a connection has been established; it should not be called at all if a host and user were given when the instance was created.  Most FTP commands are only allowed after the client has logged in.  The acct parameter supplies accounting information; few systems implement this.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.login"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::abort}}()",
      "Body": "Abort a file transfer that is in progress.  Using this does not always work, but it's worth a try.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.abort"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::sendcmd}}({{c3::cmd}})",
      "Body": "Send a simple command string to the server and return the response string.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.sendcmd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::voidcmd}}({{c3::cmd}})",
      "Body": "Send a simple command string to the server and handle the response.  Return nothing if a response code corresponding to success (codes in the range 200299) is received.  Raise error_reply otherwise.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.voidcmd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::retrbinary}}({{c3::cmd}}, {{c4::callback}}, {{c5::blocksize}}=8192, {{c6::rest}}={{c7::None}})",
      "Body": "Retrieve a file in binary transfer mode.  cmd should be an appropriate RETR command: 'RETR filename'. The callback function is called for each block of data received, with a single bytes argument giving the data block. The optional blocksize argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer (which will also be the largest size of the data blocks passed to callback).  A reasonable default is chosen. rest means the same thing as in the transfercmd() method.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.retrbinary"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::retrlines}}({{c3::cmd}}, {{c4::callback}}={{c5::None}})",
      "Body": "Retrieve a file or directory listing in ASCII transfer mode.  cmd should be an appropriate RETR command (see retrbinary()) or a command such as LIST or NLST (usually just the string 'LIST'). LIST retrieves a list of files and information about those files. NLST retrieves a list of file names. The callback function is called for each line with a string argument containing the line with the trailing CRLF stripped.  The default callback prints the line to sys.stdout.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.retrlines"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::set_pasv}}({{c3::val}})",
      "Body": "Enable passive mode if val is true, otherwise disable passive mode. Passive mode is on by default.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.set_pasv"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::storbinary}}({{c3::cmd}}, {{c4::fp}}, {{c5::blocksize}}=8192, {{c6::callback}}={{c7::None}}, {{c8::rest}}={{c9::None}})",
      "Body": "Store a file in binary transfer mode.  cmd should be an appropriate STOR command: \"STOR filename\". fp is a file object (opened in binary mode) which is read until EOF using its read() method in blocks of size blocksize to provide the data to be stored. The blocksize argument defaults to 8192.  callback is an optional single parameter callable that is called on each block of data after it is sent. rest means the same thing as in the transfercmd() method.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.storbinary"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::storlines}}({{c3::cmd}}, {{c4::fp}}, {{c5::callback}}={{c6::None}})",
      "Body": "Store a file in ASCII transfer mode.  cmd should be an appropriate STOR command (see storbinary()).  Lines are read until EOF from the file object fp (opened in binary mode) using its readline() method to provide the data to be stored.  callback is an optional single parameter callable that is called on each line after it is sent.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.storlines"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::transfercmd}}({{c3::cmd}}, {{c4::rest}}={{c5::None}})",
      "Body": "Initiate a transfer over the data connection.  If the transfer is active, send an EPRT or  PORT command and the transfer command specified by cmd, and accept the connection.  If the server is passive, send an EPSV or PASV command, connect to it, and start the transfer command.  Either way, return the socket for the connection.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.transfercmd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::ntransfercmd}}({{c3::cmd}}, {{c4::rest}}={{c5::None}})",
      "Body": "Like transfercmd(), but returns a tuple of the data connection and the expected size of the data.  If the expected size could not be computed, None will be returned as the expected size.  cmd and rest means the same thing as in transfercmd().",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.ntransfercmd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::mlsd}}({{c3::path}}=\"\", {{c4::facts}}=[])",
      "Body": "List a directory in a standardized format by using MLSD command (RFC 3659).  If path is omitted the current directory is assumed. facts is a list of strings representing the type of information desired (e.g. [\"type\", \"size\", \"perm\"]).  Return a generator object yielding a tuple of two elements for every file found in path.  First element is the file name, the second one is a dictionary containing facts about the file name.  Content of this dictionary might be limited by the facts argument but server is not guaranteed to return all requested facts.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.mlsd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::nlst}}({{c3::argument}}[, ...])",
      "Body": "Return a list of file names as returned by the NLST command.  The optional argument is a directory to list (default is the current server directory).  Multiple arguments can be used to pass non-standard options to the NLST command.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.nlst"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::dir}}({{c3::argument}}[, ...])",
      "Body": "Produce a directory listing as returned by the LIST command, printing it to standard output.  The optional argument is a directory to list (default is the current server directory).  Multiple arguments can be used to pass non-standard options to the LIST command.  If the last argument is a function, it is used as a callback function as for retrlines(); the default prints to sys.stdout.  This method returns None.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.dir"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::rename}}({{c3::fromname}}, {{c4::toname}})",
      "Body": "Rename file fromname on the server to toname.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.rename"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::delete}}({{c3::filename}})",
      "Body": "Remove the file named filename from the server.  If successful, returns the text of the response, otherwise raises error_perm on permission errors or error_reply on other errors.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.delete"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::cwd}}({{c3::pathname}})",
      "Body": "Set the current directory on the server.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.cwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::mkd}}({{c3::pathname}})",
      "Body": "Create a new directory on the server.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.mkd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::pwd}}()",
      "Body": "Return the pathname of the current directory on the server.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.pwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::rmd}}({{c3::dirname}})",
      "Body": "Remove the directory named dirname on the server.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.rmd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::size}}({{c3::filename}})",
      "Body": "Request the size of the file named filename on the server.  On success, the size of the file is returned as an integer, otherwise None is returned. Note that the SIZE command is not  standardized, but is supported by many common server implementations.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.size"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::quit}}()",
      "Body": "Send a QUIT command to the server and close the connection. This is the polite way to close a connection, but it may raise an exception if the server responds with an error to the QUIT command.  This implies a call to the close() method which renders the FTP instance useless for subsequent calls (see below).",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.quit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP}}.{{c2::close}}()",
      "Body": "Close the connection unilaterally.  This should not be applied to an already closed connection such as after a successful call to quit(). After this call the FTP instance should not be used any more (after a call to close() or quit() you cannot reopen the connection by issuing another login() method).",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP_TLS}}.{{c2::ssl_version}}",
      "Body": "The SSL version to use (defaults to ssl.PROTOCOL_SSLv23).",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS.ssl_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP_TLS}}.{{c2::auth}}()",
      "Body": "Set up a secure control connection by using TLS or SSL, depending on what is specified in the ssl_version attribute.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS.auth"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP_TLS}}.{{c2::ccc}}()",
      "Body": "Revert control channel back to plaintext.  This can be useful to take advantage of firewalls that know how to handle NAT with non-secure FTP without opening fixed ports.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS.ccc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP_TLS}}.{{c2::prot_p}}()",
      "Body": "Set up secure data connection.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS.prot_p"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FTP_TLS}}.{{c2::prot_c}}()",
      "Body": "Set up clear text data connection.",
      "Link": "https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS.prot_c"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::poplib}}.{{c3::POP}}3({{c4::host}}, {{c5::port}}={{c6::POP}}3{{c7::_PORT}}[, {{c8::timeout}}])",
      "Body": "This class implements the actual POP3 protocol.  The connection is created when the instance is initialized. If port is omitted, the standard POP3 port (110) is used. The optional timeout parameter specifies a timeout in seconds for the connection attempt (if not specified, the global default timeout setting will be used).",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::poplib}}.{{c3::POP}}3{{c4::_SSL}}({{c5::host}}, {{c6::port}}={{c7::POP}}3{{c8::_SSL_PORT}}, {{c9::keyfile}}={{c10::None}}, {{c11::certfile}}={{c12::None}}, {{c13::timeout}}={{c14::None}}, {{c15::context}}={{c16::None}})",
      "Body": "This is a subclass of POP3 that connects to the server over an SSL encrypted socket.  If port is not specified, 995, the standard POP3-over-SSL port is used.  timeout works as in the POP3 constructor. context is an optional ssl.SSLContext object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure.  Please read Security considerations for best practices.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3_SSL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::poplib}}.{{c3::error_proto}}",
      "Body": "Exception raised on any errors from this module (errors from socket module are not caught). The reason for the exception is passed to the constructor as a string.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.error_proto"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::set_debuglevel}}({{c3::level}})",
      "Body": "Set the instance's debugging level.  This controls the amount of debugging output printed.  The default, 0, produces no debugging output.  A value of 1 produces a moderate amount of debugging output, generally a single line per request.  A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.set_debuglevel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::getwelcome}}()",
      "Body": "Returns the greeting string sent by the POP3 server.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.getwelcome"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::capa}}()",
      "Body": "Query the server's capabilities as specified in RFC 2449. Returns a dictionary in the form {'name': ['param'...]}.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.capa"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::user}}({{c3::username}})",
      "Body": "Send user command, response should indicate that a password is required.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.user"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::pass_}}({{c3::password}})",
      "Body": "Send password, response includes message count and mailbox size. Note: the mailbox on the server is locked until quit() is called.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.pass_"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::apop}}({{c3::user}}, {{c4::secret}})",
      "Body": "Use the more secure APOP authentication to log into the POP3 server.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.apop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::rpop}}({{c3::user}})",
      "Body": "Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.rpop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::stat}}()",
      "Body": "Get mailbox status.  The result is a tuple of 2 integers: (message count, mailbox size).",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.stat"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::list}}([{{c3::which}}])",
      "Body": "Request message list, result is in the form (response, ['mesg_num octets', ...], octets). If which is set, it is the message to list.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.list"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::retr}}({{c3::which}})",
      "Body": "Retrieve whole message number which, and set its seen flag. Result is in form (response, ['line', ...], octets).",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.retr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::dele}}({{c3::which}})",
      "Body": "Flag message number which for deletion.  On most servers deletions are not actually performed until QUIT (the major exception is Eudora QPOP, which deliberately violates the RFCs by doing pending deletes on any disconnect).",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.dele"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::rset}}()",
      "Body": "Remove any deletion marks for the mailbox.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.rset"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::noop}}()",
      "Body": "Do nothing.  Might be used as a keep-alive.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.noop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::quit}}()",
      "Body": "Signoff:  commit changes, unlock mailbox, drop connection.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.quit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::top}}({{c3::which}}, {{c4::howmuch}})",
      "Body": "Retrieves the message header plus howmuch lines of the message after the header of message number which. Result is in form (response, ['line', ...], octets).",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.top"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::uidl}}({{c3::which}}={{c4::None}})",
      "Body": "Return message digest (unique id) list. If which is specified, result contains the unique id for that message in the form 'response mesgnum uid, otherwise result is list (response, ['mesgnum uid', ...], octets).",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.uidl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::utf}}8()",
      "Body": "Try to switch to UTF-8 mode. Returns the server response if successful, raises error_proto if not. Specified in RFC 6856.",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.utf8"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::POP}}3.{{c2::stls}}({{c3::context}}={{c4::None}})",
      "Body": "Start a TLS session on the active connection as specified in RFC 2595. This is only allowed before user authentication",
      "Link": "https://docs.python.org/3/library/poplib.html#poplib.POP3.stls"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::imaplib}}.{{c3::IMAP}}4({{c4::host}}='', {{c5::port}}={{c6::IMAP}}4{{c7::_PORT}})",
      "Body": "This class implements the actual IMAP4 protocol.  The connection is created and protocol version (IMAP4 or IMAP4rev1) is determined when the instance is initialized. If host is not specified, '' (the local host) is used. If port is omitted, the standard IMAP4 port (143) is used.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::IMAP}}4.{{c3::error}}",
      "Body": "Exception raised on any errors.  The reason for the exception is passed to the constructor as a string.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::IMAP}}4.{{c3::abort}}",
      "Body": "IMAP4 server errors cause this exception to be raised.  This is a sub-class of IMAP4.error.  Note that closing the instance and instantiating a new one will usually allow recovery from this exception.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.abort"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::IMAP}}4.{{c3::readonly}}",
      "Body": "This exception is raised when a writable mailbox has its status changed by the server.  This is a sub-class of IMAP4.error.  Some other client now has write permission, and the mailbox will need to be re-opened to re-obtain write permission.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.readonly"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::imaplib}}.{{c3::IMAP}}4{{c4::_SSL}}({{c5::host}}='', {{c6::port}}={{c7::IMAP}}4{{c8::_SSL_PORT}}, {{c9::keyfile}}={{c10::None}}, {{c11::certfile}}={{c12::None}}, {{c13::ssl_context}}={{c14::None}})",
      "Body": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket (to use this class you need a socket module that was compiled with SSL support).  If host is not specified, '' (the local host) is used. If port is omitted, the standard IMAP4-over-SSL port (993) is used. ssl_context is a ssl.SSLContext object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure.  Please read Security considerations for best practices.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4_SSL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::imaplib}}.{{c3::IMAP}}4{{c4::_stream}}({{c5::command}})",
      "Body": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing command to subprocess.Popen().",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4_stream"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::imaplib}}.{{c2::Internaldate}}2{{c3::tuple}}({{c4::datestr}})",
      "Body": "Parse an IMAP4 INTERNALDATE string and return corresponding local time.  The return value is a time.struct_time tuple or None if the string has wrong format.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.Internaldate2tuple"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::imaplib}}.{{c2::Int}}2{{c3::AP}}({{c4::num}})",
      "Body": "Converts an integer into a string representation using characters from the set [A .. P].",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.Int2AP"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::imaplib}}.{{c2::ParseFlags}}({{c3::flagstr}})",
      "Body": "Converts an IMAP4 FLAGS response to a tuple of individual flags.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.ParseFlags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::imaplib}}.{{c2::Time}}2{{c3::Internaldate}}({{c4::date_time}})",
      "Body": "Convert date_time to an IMAP4 INTERNALDATE representation. The return value is a string in the form: \"DD-Mmm-YYYY HH:MM:SS +HHMM\" (including double-quotes).  The date_time argument can be a number (int or float) representing seconds since epoch (as returned by time.time()), a 9-tuple representing local time an instance of time.struct_time (as returned by time.localtime()), an aware instance of datetime.datetime, or a double-quoted string.  In the last case, it is assumed to already be in the correct format.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.Time2Internaldate"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::append}}({{c3::mailbox}}, {{c4::flags}}, {{c5::date_time}}, {{c6::message}})",
      "Body": "Append message to named mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.append"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::authenticate}}({{c3::mechanism}}, {{c4::authobject}})",
      "Body": "Authenticate command  requires response processing.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.authenticate"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::check}}()",
      "Body": "Checkpoint mailbox on server.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.check"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::close}}()",
      "Body": "Close currently selected mailbox. Deleted messages are removed from writable mailbox. This is the recommended command before LOGOUT.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::copy}}({{c3::message_set}}, {{c4::new_mailbox}})",
      "Body": "Copy message_set messages onto end of new_mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.copy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::create}}({{c3::mailbox}})",
      "Body": "Create new mailbox named mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.create"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::delete}}({{c3::mailbox}})",
      "Body": "Delete old mailbox named mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.delete"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::deleteacl}}({{c3::mailbox}}, {{c4::who}})",
      "Body": "Delete the ACLs (remove any rights) set for who on mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.deleteacl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::enable}}({{c3::capability}})",
      "Body": "Enable capability (see RFC 5161).  Most capabilities do not need to be enabled.  Currently only the UTF8=ACCEPT capability is supported (see RFC 6855).",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.enable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::expunge}}()",
      "Body": "Permanently remove deleted items from selected mailbox. Generates an EXPUNGE response for each deleted message. Returned data contains a list of EXPUNGE message numbers in order received.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.expunge"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::fetch}}({{c3::message_set}}, {{c4::message_parts}})",
      "Body": "Fetch (parts of) messages.  message_parts should be a string of message part names enclosed within parentheses, eg: \"(UID BODY[TEXT])\".  Returned data are tuples of message part envelope and data.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.fetch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::getacl}}({{c3::mailbox}})",
      "Body": "Get the ACLs for mailbox. The method is non-standard, but is supported by the Cyrus server.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.getacl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::getannotation}}({{c3::mailbox}}, {{c4::entry}}, {{c5::attribute}})",
      "Body": "Retrieve the specified ANNOTATIONs for mailbox. The method is non-standard, but is supported by the Cyrus server.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.getannotation"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::getquota}}({{c3::root}})",
      "Body": "Get the quota root's resource usage and limits. This method is part of the IMAP4 QUOTA extension defined in rfc2087.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.getquota"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::getquotaroot}}({{c3::mailbox}})",
      "Body": "Get the list of quota roots for the named mailbox. This method is part of the IMAP4 QUOTA extension defined in rfc2087.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.getquotaroot"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::list}}([{{c3::directory}}[, {{c4::pattern}}]])",
      "Body": "List mailbox names in directory matching pattern.  directory defaults to the top-level mail folder, and pattern defaults to match anything.  Returned data contains a list of LIST responses.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.list"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::login}}({{c3::user}}, {{c4::password}})",
      "Body": "Identify the client using a plaintext password. The password will be quoted.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.login"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::login_cram_md}}5({{c3::user}}, {{c4::password}})",
      "Body": "Force use of CRAM-MD5 authentication when identifying the client to protect the password.  Will only work if the server CAPABILITY response includes the phrase AUTH=CRAM-MD5.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.login_cram_md5"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::logout}}()",
      "Body": "Shutdown connection to server. Returns server BYE response.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.logout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::lsub}}({{c3::directory}}='\"\"', {{c4::pattern}}='*')",
      "Body": "List subscribed mailbox names in directory matching pattern. directory defaults to the top level directory and pattern defaults to match any mailbox. Returned data are tuples of message part envelope and data.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.lsub"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::myrights}}({{c3::mailbox}})",
      "Body": "Show my ACLs for a mailbox (i.e. the rights that I have on mailbox).",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.myrights"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::namespace}}()",
      "Body": "Returns IMAP namespaces as defined in RFC 2342.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.namespace"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::noop}}()",
      "Body": "Send NOOP to server.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.noop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::open}}({{c3::host}}, {{c4::port}})",
      "Body": "Opens socket to port at host.  This method is implicitly called by the IMAP4 constructor.  The connection objects established by this method will be used in the IMAP4.read(), IMAP4.readline(), IMAP4.send(), and IMAP4.shutdown() methods.  You may override this method.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::partial}}({{c3::message_num}}, {{c4::message_part}}, {{c5::start}}, {{c6::length}})",
      "Body": "Fetch truncated part of a message. Returned data is a tuple of message part envelope and data.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.partial"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::proxyauth}}({{c3::user}})",
      "Body": "Assume authentication as user. Allows an authorised administrator to proxy into any user's mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.proxyauth"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::read}}({{c3::size}})",
      "Body": "Reads size bytes from the remote server. You may override this method.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.read"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::readline}}()",
      "Body": "Reads one line from the remote server. You may override this method.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.readline"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::recent}}()",
      "Body": "Prompt server for an update. Returned data is None if no new messages, else value of RECENT response.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.recent"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::rename}}({{c3::oldmailbox}}, {{c4::newmailbox}})",
      "Body": "Rename mailbox named oldmailbox to newmailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.rename"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::response}}({{c3::code}})",
      "Body": "Return data for response code if received, or None. Returns the given code, instead of the usual type.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.response"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::search}}({{c3::charset}}, {{c4::criterion}}[, ...])",
      "Body": "Search mailbox for matching messages.  charset may be None, in which case no CHARSET will be specified in the request to the server.  The IMAP protocol requires that at least one criterion be specified; an exception will be raised when the server returns an error.  charset must be None if the UTF8=ACCEPT capability was enabled using the enable() command.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.search"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::select}}({{c3::mailbox}}='{{c4::INBOX}}', {{c5::readonly}}={{c6::False}})",
      "Body": "Select a mailbox. Returned data is the count of messages in mailbox (EXISTS response).  The default mailbox is 'INBOX'.  If the readonly flag is set, modifications to the mailbox are not allowed.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.select"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::send}}({{c3::data}})",
      "Body": "Sends data to the remote server. You may override this method.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.send"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::setacl}}({{c3::mailbox}}, {{c4::who}}, {{c5::what}})",
      "Body": "Set an ACL for mailbox. The method is non-standard, but is supported by the Cyrus server.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.setacl"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::setannotation}}({{c3::mailbox}}, {{c4::entry}}, {{c5::attribute}}[, ...])",
      "Body": "Set ANNOTATIONs for mailbox. The method is non-standard, but is supported by the Cyrus server.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.setannotation"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::setquota}}({{c3::root}}, {{c4::limits}})",
      "Body": "Set the quota root's resource limits. This method is part of the IMAP4 QUOTA extension defined in rfc2087.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.setquota"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::shutdown}}()",
      "Body": "Close connection established in open.  This method is implicitly called by IMAP4.logout().  You may override this method.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.shutdown"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::socket}}()",
      "Body": "Returns socket instance used to connect to server.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::sort}}({{c3::sort_criteria}}, {{c4::charset}}, {{c5::search_criterion}}[, ...])",
      "Body": "The sort command is a variant of search with sorting semantics for the results.  Returned data contains a space separated list of matching message numbers.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.sort"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::starttls}}({{c3::ssl_context}}={{c4::None}})",
      "Body": "Send a STARTTLS command.  The ssl_context argument is optional and should be a ssl.SSLContext object.  This will enable encryption on the IMAP connection.  Please read Security considerations for best practices.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.starttls"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::status}}({{c3::mailbox}}, {{c4::names}})",
      "Body": "Request named status conditions for mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.status"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::store}}({{c3::message_set}}, {{c4::command}}, {{c5::flag_list}})",
      "Body": "Alters flag dispositions for messages in mailbox.  command is specified by section 6.4.6 of RFC 2060 as being one of FLAGS, +FLAGS, or -FLAGS, optionally with a suffix of .SILENT.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.store"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::subscribe}}({{c3::mailbox}})",
      "Body": "Subscribe to new mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.subscribe"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::thread}}({{c3::threading_algorithm}}, {{c4::charset}}, {{c5::search_criterion}}[, ...])",
      "Body": "The thread command is a variant of search with threading semantics for the results.  Returned data contains a space separated list of thread members.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.thread"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::uid}}({{c3::command}}, {{c4::arg}}[, ...])",
      "Body": "Execute command args with messages identified by UID, rather than message number.  Returns response appropriate to command.  At least one argument must be supplied; if none are provided, the server will return an error and an exception will be raised.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.uid"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::unsubscribe}}({{c3::mailbox}})",
      "Body": "Unsubscribe from old mailbox.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.unsubscribe"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::xatom}}({{c3::name}}[, ...])",
      "Body": "Allow simple extension commands notified by server in CAPABILITY response.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.xatom"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::PROTOCOL_VERSION}}",
      "Body": "The most recent supported protocol in the CAPABILITY response from the server.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.PROTOCOL_VERSION"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::debug}}",
      "Body": "Integer value to control debugging output.  The initialize value is taken from the module variable Debug.  Values greater than three trace each command.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.debug"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::IMAP}}4.{{c2::utf}}8{{c3::_enabled}}",
      "Body": "Boolean value that is normally False, but is set to True if an enable() command is successfully issued for the UTF8=ACCEPT capability.",
      "Link": "https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.utf8_enabled"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::nntplib}}.{{c3::NNTP}}({{c4::host}}, {{c5::port}}=119, {{c6::user}}={{c7::None}}, {{c8::password}}={{c9::None}}, {{c10::readermode}}={{c11::None}}, {{c12::usenetrc}}={{c13::False}}[, {{c14::timeout}}])",
      "Body": "Return a new NNTP object, representing a connection to the NNTP server running on host host, listening at port port. An optional timeout can be specified for the socket connection. If the optional user and password are provided, or if suitable credentials are present in /.netrc and the optional flag usenetrc is true, the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server.  If the optional flag readermode is true, then a mode reader command is sent before authentication is performed.  Reader mode is sometimes necessary if you are connecting to an NNTP server on the local machine and intend to call reader-specific commands, such as group.  If you get unexpected NNTPPermanentErrors, you might need to set readermode. The NNTP class supports the with statement to unconditionally consume OSError exceptions and to close the NNTP connection when done, e.g.:",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::nntplib}}.{{c3::NNTP_SSL}}({{c4::host}}, {{c5::port}}=563, {{c6::user}}={{c7::None}}, {{c8::password}}={{c9::None}}, {{c10::ssl_context}}={{c11::None}}, {{c12::readermode}}={{c13::None}}, {{c14::usenetrc}}={{c15::False}}[, {{c16::timeout}}])",
      "Body": "Return a new NNTP_SSL object, representing an encrypted connection to the NNTP server running on host host, listening at port port.  NNTP_SSL objects have the same methods as NNTP objects.  If port is omitted, port 563 (NNTPS) is used. ssl_context is also optional, and is a SSLContext object. Please read Security considerations for best practices. All other parameters behave the same as for NNTP.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP_SSL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::nntplib}}.{{c3::NNTPError}}",
      "Body": "Derived from the standard exception Exception, this is the base class for all exceptions raised by the nntplib module.  Instances of this class have the following attribute:",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTPError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::nntplib}}.{{c2::NNTPError}}.{{c3::response}}",
      "Body": "The response of the server if available, as a str object.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTPError.response"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::nntplib}}.{{c3::NNTPReplyError}}",
      "Body": "Exception raised when an unexpected reply is received from the server.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTPReplyError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::nntplib}}.{{c3::NNTPTemporaryError}}",
      "Body": "Exception raised when a response code in the range 400499 is received.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTPTemporaryError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::nntplib}}.{{c3::NNTPPermanentError}}",
      "Body": "Exception raised when a response code in the range 500599 is received.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTPPermanentError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::nntplib}}.{{c3::NNTPProtocolError}}",
      "Body": "Exception raised when a reply is received from the server that does not begin with a digit in the range 15.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTPProtocolError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::nntplib}}.{{c3::NNTPDataError}}",
      "Body": "Exception raised when there is some error in the response data.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTPDataError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::nntp_version}}",
      "Body": "An integer representing the version of the NNTP protocol supported by the server.  In practice, this should be 2 for servers advertising RFC 3977 compliance and 1 for others.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.nntp_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::nntp_implementation}}",
      "Body": "A string describing the software name and version of the NNTP server, or None if not advertised by the server.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.nntp_implementation"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::quit}}()",
      "Body": "Send a QUIT command and close the connection.  Once this method has been called, no other methods of the NNTP object should be called.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.quit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::getwelcome}}()",
      "Body": "Return the welcome message sent by the server in reply to the initial connection.  (This message sometimes contains disclaimers or help information that may be relevant to the user.)",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.getwelcome"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::getcapabilities}}()",
      "Body": "Return the RFC 3977 capabilities advertised by the server, as a dict instance mapping capability names to (possibly empty) lists of values. On legacy servers which don't understand the CAPABILITIES command, an empty dictionary is returned instead.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.getcapabilities"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::login}}({{c3::user}}={{c4::None}}, {{c5::password}}={{c6::None}}, {{c7::usenetrc}}={{c8::True}})",
      "Body": "Send AUTHINFO commands with the user name and password.  If user and password are None and usenetrc is true, credentials from ~/.netrc will be used if possible.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.login"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::starttls}}({{c3::ssl_context}}={{c4::None}})",
      "Body": "Send a STARTTLS command.  This will enable encryption on the NNTP connection.  The ssl_context argument is optional and should be a ssl.SSLContext object.  Please read Security considerations for best practices.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.starttls"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::newgroups}}({{c3::date}}, *, {{c4::file}}={{c5::None}})",
      "Body": "Send a NEWGROUPS command.  The date argument should be a datetime.date or datetime.datetime object. Return a pair (response, groups) where groups is a list representing the groups that are new since the given date. If file is supplied, though, then groups will be empty.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.newgroups"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::newnews}}({{c3::group}}, {{c4::date}}, *, {{c5::file}}={{c6::None}})",
      "Body": "Send a NEWNEWS command.  Here, group is a group name or '*', and date has the same meaning as for newgroups().  Return a pair (response, articles) where articles is a list of message ids.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.newnews"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::list}}({{c3::group_pattern}}={{c4::None}}, *, {{c5::file}}={{c6::None}})",
      "Body": "Send a LIST or LIST ACTIVE command.  Return a pair (response, list) where list is a list of tuples representing all the groups available from this NNTP server, optionally matching the pattern string group_pattern.  Each tuple has the form (group, last, first, flag), where group is a group name, last and first are the last and first article numbers, and flag usually takes one of these values:",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.list"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::descriptions}}({{c3::grouppattern}})",
      "Body": "Send a LIST NEWSGROUPS command, where grouppattern is a wildmat string as specified in RFC 3977 (it's essentially the same as DOS or UNIX shell wildcard strings).  Return a pair (response, descriptions), where descriptions is a dictionary mapping group names to textual descriptions.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.descriptions"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::description}}({{c3::group}})",
      "Body": "Get a description for a single group group.  If more than one group matches (if 'group' is a real wildmat string), return the first match.   If no group matches, return an empty string.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.description"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::group}}({{c3::name}})",
      "Body": "Send a GROUP command, where name is the group name.  The group is selected as the current group, if it exists.  Return a tuple (response, count, first, last, name) where count is the (estimated) number of articles in the group, first is the first article number in the group, last is the last article number in the group, and name is the group name.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.group"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::over}}({{c3::message_spec}}, *, {{c4::file}}={{c5::None}})",
      "Body": "Send an OVER command, or an XOVER command on legacy servers. message_spec can be either a string representing a message id, or a (first, last) tuple of numbers indicating a range of articles in the current group, or a (first, None) tuple indicating a range of articles starting from first to the last article in the current group, or None to select the current article in the current group.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.over"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::help}}(*, {{c3::file}}={{c4::None}})",
      "Body": "Send a HELP command.  Return a pair (response, list) where list is a list of help strings.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.help"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::stat}}({{c3::message_spec}}={{c4::None}})",
      "Body": "Send a STAT command, where message_spec is either a message id (enclosed in '<' and '>') or an article number in the current group. If message_spec is omitted or None, the current article in the current group is considered.  Return a triple (response, number, id) where number is the article number and id is the message id.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.stat"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::next}}()",
      "Body": "Send a NEXT command.  Return as for stat().",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.next"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::last}}()",
      "Body": "Send a LAST command.  Return as for stat().",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.last"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::article}}({{c3::message_spec}}={{c4::None}}, *, {{c5::file}}={{c6::None}})",
      "Body": "Send an ARTICLE command, where message_spec has the same meaning as for stat().  Return a tuple (response, info) where info is a namedtuple with three attributes number, message_id and lines (in that order).  number is the article number in the group (or 0 if the information is not available), message_id the message id as a string, and lines a list of lines (without terminating newlines) comprising the raw message including headers and body.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.article"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::head}}({{c3::message_spec}}={{c4::None}}, *, {{c5::file}}={{c6::None}})",
      "Body": "Same as article(), but sends a HEAD command.  The lines returned (or written to file) will only contain the message headers, not the body.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.head"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::body}}({{c3::message_spec}}={{c4::None}}, *, {{c5::file}}={{c6::None}})",
      "Body": "Same as article(), but sends a BODY command.  The lines returned (or written to file) will only contain the message body, not the headers.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.body"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::post}}({{c3::data}})",
      "Body": "Post an article using the POST command.  The data argument is either a file object opened for binary reading, or any iterable of bytes objects (representing raw lines of the article to be posted).  It should represent a well-formed news article, including the required headers.  The post() method automatically escapes lines beginning with . and appends the termination line.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.post"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::ihave}}({{c3::message_id}}, {{c4::data}})",
      "Body": "Send an IHAVE command. message_id is the id of the message to send to the server (enclosed in  '<' and '>').  The data parameter and the return value are the same as for post().",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.ihave"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::date}}()",
      "Body": "Return a pair (response, date).  date is a datetime object containing the current date and time of the server.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.date"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::slave}}()",
      "Body": "Send a SLAVE command.  Return the server's response.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.slave"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::set_debuglevel}}({{c3::level}})",
      "Body": "Set the instance's debugging level.  This controls the amount of debugging output printed.  The default, 0, produces no debugging output.  A value of 1 produces a moderate amount of debugging output, generally a single line per request or response.  A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the connection (including message text).",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.set_debuglevel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::xhdr}}({{c3::hdr}}, {{c4::str}}, *, {{c5::file}}={{c6::None}})",
      "Body": "Send an XHDR command.  The hdr argument is a header keyword, e.g. 'subject'.  The str argument should have the form 'first-last' where first and last are the first and last article numbers to search. Return a pair (response, list), where list is a list of pairs (id, text), where id is an article number (as a string) and text is the text of the requested header for that article. If the file parameter is supplied, then the output of the  XHDR command is stored in a file.  If file is a string, then the method will open a file with that name, write to it  then close it. If file is a file object, then it will start calling write() on it to store the lines of the command output. If file is supplied, then the returned list is an empty list.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.xhdr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::xover}}({{c3::start}}, {{c4::end}}, *, {{c5::file}}={{c6::None}})",
      "Body": "Send an XOVER command.  start and end are article numbers delimiting the range of articles to select.  The return value is the same of for over().  It is recommended to use over() instead, since it will automatically use the newer OVER command if available.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.xover"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::NNTP}}.{{c2::xpath}}({{c3::id}})",
      "Body": "Return a pair (resp, path), where path is the directory path to the article with message ID id.  Most of the time, this extension is not enabled by NNTP server administrators.",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.NNTP.xpath"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::nntplib}}.{{c2::decode_header}}({{c3::header_str}})",
      "Body": "Decode a header value, un-escaping any escaped non-ASCII characters. header_str must be a str object.  The unescaped value is returned.  Using this function is recommended to display some headers in a human readable form:",
      "Link": "https://docs.python.org/3/library/nntplib.html#nntplib.decode_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::smtplib}}.{{c3::SMTP}}({{c4::host}}='', {{c5::port}}=0, {{c6::local_hostname}}={{c7::None}}, [{{c8::timeout}}, ]source_address={{c9::None}})",
      "Body": "An SMTP instance encapsulates an SMTP connection.  It has methods that support a full repertoire of SMTP and ESMTP operations. If the optional host and port parameters are given, the SMTP connect() method is called with those parameters during initialization.  If specified, local_hostname is used as the FQDN of the local host in the HELO/EHLO command.  Otherwise, the local hostname is found using socket.getfqdn().  If the connect() call returns anything other than a success code, an SMTPConnectError is raised. The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).  If the timeout expires, socket.timeout is raised.  The optional source_address parameter allows binding to some specific source address in a machine with multiple network interfaces, and/or to some specific source TCP port. It takes a 2-tuple (host, port), for the socket to bind to as its source address before connecting. If omitted (or if host or port are '' and/or 0 respectively) the OS default behavior will be used.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::smtplib}}.{{c3::SMTP_SSL}}({{c4::host}}='', {{c5::port}}=0, {{c6::local_hostname}}={{c7::None}}, {{c8::keyfile}}={{c9::None}}, {{c10::certfile}}={{c11::None}}, [{{c12::timeout}}, ]context={{c13::None}}, {{c14::source_address}}={{c15::None}})",
      "Body": "An SMTP_SSL instance behaves exactly the same as instances of SMTP. SMTP_SSL should be used for situations where SSL is required from the beginning of the connection and using starttls() is not appropriate. If host is not specified, the local host is used. If port is zero, the standard SMTP-over-SSL port (465) is used.  The optional arguments local_hostname, timeout and source_address have the same meaning as they do in the SMTP class.  context, also optional, can contain a SSLContext and allows configuring various aspects of the secure connection.  Please read Security considerations for best practices.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP_SSL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::smtplib}}.{{c3::LMTP}}({{c4::host}}='', {{c5::port}}={{c6::LMTP_PORT}}, {{c7::local_hostname}}={{c8::None}}, {{c9::source_address}}={{c10::None}})",
      "Body": "The LMTP protocol, which is very similar to ESMTP, is heavily based on the standard SMTP client. It's common to use Unix sockets for LMTP, so our connect() method must support that as well as a regular host:port server. The optional arguments local_hostname and source_address have the same meaning as they do in the SMTP class. To specify a Unix socket, you must use an absolute path for host, starting with a '/'.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.LMTP"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPException}}",
      "Body": "Subclass of OSError that is the base exception class for all the other exceptions provided by this module.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPServerDisconnected}}",
      "Body": "This exception is raised when the server unexpectedly disconnects, or when an attempt is made to use the SMTP instance before connecting it to a server.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPServerDisconnected"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPResponseException}}",
      "Body": "Base class for all exceptions that include an SMTP error code. These exceptions are generated in some instances when the SMTP server returns an error code.  The error code is stored in the smtp_code attribute of the error, and the smtp_error attribute is set to the error message.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPResponseException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPSenderRefused}}",
      "Body": "Sender address refused.  In addition to the attributes set by on all SMTPResponseException exceptions, this sets 'sender' to the string that the SMTP server refused.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPSenderRefused"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPRecipientsRefused}}",
      "Body": "All recipient addresses refused.  The errors for each recipient are accessible through the attribute recipients, which is a dictionary of exactly the same sort as SMTP.sendmail() returns.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPRecipientsRefused"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPDataError}}",
      "Body": "The SMTP server refused to accept the message data.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPDataError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPConnectError}}",
      "Body": "Error occurred during establishment of a connection  with the server.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPConnectError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPHeloError}}",
      "Body": "The server refused our HELO message.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPHeloError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPNotSupportedError}}",
      "Body": "The command or option attempted is not supported by the server.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPNotSupportedError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::smtplib}}.{{c3::SMTPAuthenticationError}}",
      "Body": "SMTP authentication went wrong.  Most probably the server didn't accept the username/password combination provided.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTPAuthenticationError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::set_debuglevel}}({{c3::level}})",
      "Body": "Set the debug output level.  A value of 1 or True for level results in debug messages for connection and for all messages sent to and received from the server.  A value of 2 for level results in these messages being timestamped.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.set_debuglevel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::docmd}}({{c3::cmd}}, {{c4::args}}='')",
      "Body": "Send a command cmd to the server.  The optional argument args is simply concatenated to the command, separated by a space.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.docmd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::connect}}({{c3::host}}='{{c4::localhost}}', {{c5::port}}=0)",
      "Body": "Connect to a host on a given port.  The defaults are to connect to the local host at the standard SMTP port (25). If the hostname ends with a colon (':') followed by a number, that suffix will be stripped off and the number interpreted as the port number to use. This method is automatically invoked by the constructor if a host is specified during instantiation.  Returns a 2-tuple of the response code and message sent by the server in its connection response.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.connect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::helo}}({{c3::name}}='')",
      "Body": "Identify yourself to the SMTP server using HELO.  The hostname argument defaults to the fully qualified domain name of the local host. The message returned by the server is stored as the helo_resp attribute of the object.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.helo"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::ehlo}}({{c3::name}}='')",
      "Body": "Identify yourself to an ESMTP server using EHLO.  The hostname argument defaults to the fully qualified domain name of the local host.  Examine the response for ESMTP option and store them for use by has_extn(). Also sets several informational attributes: the message returned by the server is stored as the ehlo_resp attribute, does_esmtp is set to true or false depending on whether the server supports ESMTP, and esmtp_features will be a dictionary containing the names of the SMTP service extensions this server supports, and their parameters (if any).",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.ehlo"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::ehlo_or_helo_if_needed}}()",
      "Body": "This method calls ehlo() and/or helo() if there has been no previous EHLO or HELO command this session.  It tries ESMTP EHLO first.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.ehlo_or_helo_if_needed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::has_extn}}({{c3::name}})",
      "Body": "Return True if name is in the set of SMTP service extensions returned by the server, False otherwise. Case is ignored.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.has_extn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::verify}}({{c3::address}})",
      "Body": "Check the validity of an address on this server using SMTP VRFY. Returns a tuple consisting of code 250 and a full RFC 822 address (including human name) if the user address is valid. Otherwise returns an SMTP error code of 400 or greater and an error string.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.verify"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::login}}({{c3::user}}, {{c4::password}}, *, {{c5::initial_response_ok}}={{c6::True}})",
      "Body": "Log in on an SMTP server that requires authentication. The arguments are the username and the password to authenticate with. If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first. This method will return normally if the authentication was successful, or may raise the following exceptions:",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.login"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::auth}}({{c3::mechanism}}, {{c4::authobject}}, *, {{c5::initial_response_ok}}={{c6::True}})",
      "Body": "Issue an SMTP AUTH command for the specified authentication mechanism, and handle the challenge response via authobject.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.auth"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::starttls}}({{c3::keyfile}}={{c4::None}}, {{c5::certfile}}={{c6::None}}, {{c7::context}}={{c8::None}})",
      "Body": "Put the SMTP connection in TLS (Transport Layer Security) mode.  All SMTP commands that follow will be encrypted.  You should then call ehlo() again.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.starttls"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::sendmail}}({{c3::from_addr}}, {{c4::to_addrs}}, {{c5::msg}}, {{c6::mail_options}}=(), {{c7::rcpt_options}}=())",
      "Body": "Send mail.  The required arguments are an RFC 822 from-address string, a list of RFC 822 to-address strings (a bare string will be treated as a list with 1 address), and a message string.  The caller may pass a list of ESMTP options (such as 8bitmime) to be used in MAIL FROM commands as mail_options. ESMTP options (such as DSN commands) that should be used with all RCPT commands can be passed as rcpt_options.  (If you need to use different ESMTP options to different recipients you have to use the low-level methods such as mail(), rcpt() and data() to send the message.)",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.sendmail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::send_message}}({{c3::msg}}, {{c4::from_addr}}={{c5::None}}, {{c6::to_addrs}}={{c7::None}}, {{c8::mail_options}}=(), {{c9::rcpt_options}}=())",
      "Body": "This is a convenience method for calling sendmail() with the message represented by an email.message.Message object.  The arguments have the same meaning as for sendmail(), except that msg is a Message object.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.send_message"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SMTP}}.{{c2::quit}}()",
      "Body": "Terminate the SMTP session and close the connection.  Return the result of the SMTP QUIT command.",
      "Link": "https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.quit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::smtpd}}.{{c3::SMTPServer}}({{c4::localaddr}}, {{c5::remoteaddr}}, {{c6::data_size_limit}}=33554432, {{c7::map}}={{c8::None}}, {{c9::enable_SMTPUTF}}8={{c10::False}}, {{c11::decode_data}}={{c12::False}})",
      "Body": "Create a new SMTPServer object, which binds to local address localaddr.  It will treat remoteaddr as an upstream SMTP relayer.  Both localaddr and remoteaddr should be a (host, port) tuple.  The object inherits from asyncore.dispatcher, and so will insert itself into asyncore's event loop on instantiation.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPServer}}.{{c3::process_message}}({{c4::peer}}, {{c5::mailfrom}}, {{c6::rcpttos}}, {{c7::data}}, **kwargs)",
      "Body": "Raise a NotImplementedError exception. Override this in subclasses to do something useful with this message. Whatever was passed in the constructor as remoteaddr will be available as the _remoteaddr attribute. peer is the remote host's address, mailfrom is the envelope originator, rcpttos are the envelope recipients and data is a string containing the contents of the e-mail (which should be in RFC 5321 format).",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPServer.process_message"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPServer}}.{{c3::channel_class}}",
      "Body": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPServer.channel_class"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::smtpd}}.{{c3::DebuggingServer}}({{c4::localaddr}}, {{c5::remoteaddr}})",
      "Body": "Create a new debugging server.  Arguments are as per SMTPServer. Messages will be discarded, and printed on stdout.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.DebuggingServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::smtpd}}.{{c3::PureProxy}}({{c4::localaddr}}, {{c5::remoteaddr}})",
      "Body": "Create a new pure proxy server. Arguments are as per SMTPServer. Everything will be relayed to remoteaddr.  Note that running this has a good chance to make you into an open relay, so please be careful.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.PureProxy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::smtpd}}.{{c3::MailmanProxy}}({{c4::localaddr}}, {{c5::remoteaddr}})",
      "Body": "Create a new pure proxy server. Arguments are as per SMTPServer. Everything will be relayed to remoteaddr, unless local mailman configurations knows about an address, in which case it will be handled via mailman.  Note that running this has a good chance to make you into an open relay, so please be careful.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.MailmanProxy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::smtpd}}.{{c3::SMTPChannel}}({{c4::server}}, {{c5::conn}}, {{c6::addr}}, {{c7::data_size_limit}}=33554432, {{c8::map}}={{c9::None}}, {{c10::enable_SMTPUTF}}8={{c11::False}}, {{c12::decode_data}}={{c13::False}})",
      "Body": "Create a new SMTPChannel object which manages the communication between the server and a single SMTP client.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::smtp_server}}",
      "Body": "Holds the SMTPServer that spawned this channel.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.smtp_server"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::conn}}",
      "Body": "Holds the socket object connecting to the client.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.conn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::addr}}",
      "Body": "Holds the address of the client, the second value returned by socket.accept",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.addr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::received_lines}}",
      "Body": "Holds a list of the line strings (decoded using UTF-8) received from the client. The lines have their \"\\r\\n\" line ending translated to \"\\n\".",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.received_lines"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::smtp_state}}",
      "Body": "Holds the current state of the channel. This will be either COMMAND initially and then DATA after the client sends a DATA line.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.smtp_state"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::seen_greeting}}",
      "Body": "Holds a string containing the greeting sent by the client in its HELO.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.seen_greeting"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::mailfrom}}",
      "Body": "Holds a string containing the address identified in the MAIL FROM: line from the client.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.mailfrom"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::rcpttos}}",
      "Body": "Holds a list of strings containing the addresses identified in the RCPT TO: lines from the client.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.rcpttos"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::received_data}}",
      "Body": "Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\".",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.received_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::fqdn}}",
      "Body": "Holds the fully-qualified domain name of the server as returned by socket.getfqdn().",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.fqdn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::smtpd}}.{{c2::SMTPChannel}}.{{c3::peer}}",
      "Body": "Holds the name of the client peer as returned by conn.getpeername() where conn is conn.",
      "Link": "https://docs.python.org/3/library/smtpd.html#smtpd.SMTPChannel.peer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::telnetlib}}.{{c3::Telnet}}({{c4::host}}={{c5::None}}, {{c6::port}}=0[, {{c7::timeout}}])",
      "Body": "Telnet represents a connection to a Telnet server. The instance is initially not connected by default; the open() method must be used to establish a connection.  Alternatively, the host name and optional port number can be passed to the constructor too, in which case the connection to the server will be established before the constructor returns.  The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::read_until}}({{c3::expected}}, {{c4::timeout}}={{c5::None}})",
      "Body": "Read until a given byte string, expected, is encountered or until timeout seconds have passed.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.read_until"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::read_all}}()",
      "Body": "Read all data until EOF as bytes; block until connection closed.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.read_all"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::read_some}}()",
      "Body": "Read at least one byte of cooked data unless EOF is hit. Return b'' if EOF is hit.  Block if no data is immediately available.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.read_some"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::read_very_eager}}()",
      "Body": "Read everything that can be without blocking in I/O (eager).",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.read_very_eager"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::read_eager}}()",
      "Body": "Read readily available data.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.read_eager"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::read_lazy}}()",
      "Body": "Process and return data already in the queues (lazy).",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.read_lazy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::read_very_lazy}}()",
      "Body": "Return any data available in the cooked queue (very lazy).",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.read_very_lazy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::read_sb_data}}()",
      "Body": "Return the data collected between a SB/SE pair (suboption begin/end). The callback should access these data when it was invoked with a SE command. This method never blocks.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.read_sb_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::open}}({{c3::host}}, {{c4::port}}=0[, {{c5::timeout}}])",
      "Body": "Connect to a host. The optional second argument is the port number, which defaults to the standard Telnet port (23). The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::msg}}({{c3::msg}}, *args)",
      "Body": "Print a debug message when the debug level is > 0. If extra arguments are present, they are substituted in the message using the standard string formatting operator.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.msg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::set_debuglevel}}({{c3::debuglevel}})",
      "Body": "Set the debug level.  The higher the value of debuglevel, the more debug output you get (on sys.stdout).",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.set_debuglevel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::close}}()",
      "Body": "Close the connection.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::get_socket}}()",
      "Body": "Return the socket object used internally.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.get_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::fileno}}()",
      "Body": "Return the file descriptor of the socket object used internally.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::write}}({{c3::buffer}})",
      "Body": "Write a byte string to the socket, doubling any IAC characters. This can block if the connection is blocked.  May raise OSError if the connection is closed.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.write"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::interact}}()",
      "Body": "Interaction function, emulates a very dumb Telnet client.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.interact"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::mt_interact}}()",
      "Body": "Multithreaded version of interact().",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.mt_interact"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::expect}}({{c3::list}}, {{c4::timeout}}={{c5::None}})",
      "Body": "Read until one from a list of a regular expressions matches.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.expect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Telnet}}.{{c2::set_option_negotiation_callback}}({{c3::callback}})",
      "Body": "Each time a telnet option is read on the input flow, this callback (if set) is called with the following parameters: callback(telnet socket, command (DO/DONT/WILL/WONT), option).  No other action is done afterwards by telnetlib.",
      "Link": "https://docs.python.org/3/library/telnetlib.html#telnetlib.Telnet.set_option_negotiation_callback"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::uuid}}.{{c3::SafeUUID}}",
      "Body": "New in version 3.7.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.SafeUUID"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::SafeUUID}}.{{c3::safe}}",
      "Body": "The UUID was generated by the platform in a multiprocessing-safe way.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.SafeUUID.safe"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::SafeUUID}}.{{c3::unsafe}}",
      "Body": "The UUID was not generated in a multiprocessing-safe way.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.SafeUUID.unsafe"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::SafeUUID}}.{{c3::unknown}}",
      "Body": "The platform does not provide information on whether the UUID was generated safely or not.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.SafeUUID.unknown"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::uuid}}.{{c3::UUID}}({{c4::hex}}={{c5::None}}, {{c6::bytes}}={{c7::None}}, {{c8::bytes_le}}={{c9::None}}, {{c10::fields}}={{c11::None}}, {{c12::int}}={{c13::None}}, {{c14::version}}={{c15::None}}, *, {{c16::is_safe}}={{c17::SafeUUID}}.{{c18::unknown}})",
      "Body": "Create a UUID from either a string of 32 hexadecimal digits, a string of 16 bytes in big-endian order as the bytes argument, a string of 16 bytes in little-endian order as the bytes_le argument, a tuple of six integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version, 8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as the fields argument, or a single 128-bit integer as the int argument. When a string of hex digits is given, curly braces, hyphens, and a URN prefix are all optional.  For example, these expressions all yield the same UUID:",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::bytes}}",
      "Body": "The UUID as a 16-byte string (containing the six integer fields in big-endian byte order).",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.bytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::bytes_le}}",
      "Body": "The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order).",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.bytes_le"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::fields}}",
      "Body": "A tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes:",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.fields"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::hex}}",
      "Body": "The UUID as a 32-character hexadecimal string.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.hex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::int}}",
      "Body": "The UUID as a 128-bit integer.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.int"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::urn}}",
      "Body": "The UUID as a URN as specified in RFC 4122.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.urn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::variant}}",
      "Body": "The UUID variant, which determines the internal layout of the UUID. This will be one of the constants RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.variant"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::version}}",
      "Body": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::UUID}}.{{c2::is_safe}}",
      "Body": "An enumeration of SafeUUID which indicates whether the platform generated the UUID in a multiprocessing-safe way.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.UUID.is_safe"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::getnode}}()",
      "Body": "Get the hardware address as a 48-bit positive integer.  The first time this runs, it may launch a separate program, which could be quite slow.  If all attempts to obtain the hardware address fail, we choose a random 48-bit number with the multicast bit (least significant bit of the first octet) set to 1 as recommended in RFC 4122.  Hardware address means the MAC address of a network interface.  On a machine with multiple network interfaces, universally administered MAC addresses (i.e. where the second least significant bit of the first octet is unset) will be preferred over locally administered MAC addresses, but with no other ordering guarantees.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.getnode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::uuid}}1({{c3::node}}={{c4::None}}, {{c5::clock_seq}}={{c6::None}})",
      "Body": "Generate a UUID from a host ID, sequence number, and the current time. If node is not given, getnode() is used to obtain the hardware address. If clock_seq is given, it is used as the sequence number; otherwise a random 14-bit sequence number is chosen.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.uuid1"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::uuid}}3({{c3::namespace}}, {{c4::name}})",
      "Body": "Generate a UUID based on the MD5 hash of a namespace identifier (which is a UUID) and a name (which is a string).",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.uuid3"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::uuid}}4()",
      "Body": "Generate a random UUID.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.uuid4"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::uuid}}5({{c3::namespace}}, {{c4::name}})",
      "Body": "Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a UUID) and a name (which is a string).",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.uuid5"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::NAMESPACE_DNS}}",
      "Body": "When this namespace is specified, the name string is a fully-qualified domain name.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.NAMESPACE_DNS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::NAMESPACE_URL}}",
      "Body": "When this namespace is specified, the name string is a URL.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.NAMESPACE_URL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::NAMESPACE_OID}}",
      "Body": "When this namespace is specified, the name string is an ISO OID.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.NAMESPACE_OID"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::NAMESPACE_X}}500",
      "Body": "When this namespace is specified, the name string is an X.500 DN in DER or a text output format.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.NAMESPACE_X500"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::RESERVED_NCS}}",
      "Body": "Reserved for NCS compatibility.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.RESERVED_NCS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::RFC_}}4122",
      "Body": "Specifies the UUID layout given in RFC 4122.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.RFC_4122"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::RESERVED_MICROSOFT}}",
      "Body": "Reserved for Microsoft compatibility.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.RESERVED_MICROSOFT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "data",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::uuid}}.{{c2::RESERVED_FUTURE}}",
      "Body": "Reserved for future definition.",
      "Link": "https://docs.python.org/3/library/uuid.html#uuid.RESERVED_FUTURE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::TCPServer}}({{c4::server_address}}, {{c5::RequestHandlerClass}}, {{c6::bind_and_activate}}={{c7::True}})",
      "Body": "This uses the Internet TCP protocol, which provides for continuous streams of data between the client and server. If bind_and_activate is true, the constructor automatically attempts to invoke server_bind() and server_activate().  The other parameters are passed to the BaseServer base class.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.TCPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::UDPServer}}({{c4::server_address}}, {{c5::RequestHandlerClass}}, {{c6::bind_and_activate}}={{c7::True}})",
      "Body": "This uses datagrams, which are discrete packets of information that may arrive out of order or be lost while in transit.  The parameters are the same as for TCPServer.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.UDPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::UnixStreamServer}}({{c4::server_address}}, {{c5::RequestHandlerClass}}, {{c6::bind_and_activate}}={{c7::True}})",
      "Body": "These more infrequently used classes are similar to the TCP and UDP classes, but use Unix domain sockets; they're not available on non-Unix platforms.  The parameters are the same as for TCPServer.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.UnixStreamServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::UnixDatagramServer}}({{c4::server_address}}, {{c5::RequestHandlerClass}}, {{c6::bind_and_activate}}={{c7::True}})",
      "Body": "These more infrequently used classes are similar to the TCP and UDP classes, but use Unix domain sockets; they're not available on non-Unix platforms.  The parameters are the same as for TCPServer.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.UnixDatagramServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::ForkingMixIn}}",
      "Body": "Forking and threading versions of each type of server can be created using these mix-in classes.  For instance, ThreadingUDPServer is created as follows:",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.ForkingMixIn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::ThreadingMixIn}}",
      "Body": "Forking and threading versions of each type of server can be created using these mix-in classes.  For instance, ThreadingUDPServer is created as follows:",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingMixIn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::ForkingTCPServer}}",
      "Body": "These classes are pre-defined using the mix-in classes.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.ForkingTCPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::ForkingUDPServer}}",
      "Body": "These classes are pre-defined using the mix-in classes.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.ForkingUDPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::ThreadingTCPServer}}",
      "Body": "These classes are pre-defined using the mix-in classes.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingTCPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::ThreadingUDPServer}}",
      "Body": "These classes are pre-defined using the mix-in classes.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingUDPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::BaseServer}}({{c4::server_address}}, {{c5::RequestHandlerClass}})",
      "Body": "This is the superclass of all Server objects in the module.  It defines the interface, given below, but does not implement most of the methods, which is done in subclasses.  The two parameters are stored in the respective server_address and RequestHandlerClass attributes.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::fileno}}()",
      "Body": "Return an integer file descriptor for the socket on which the server is listening.  This function is most commonly passed to selectors, to allow monitoring multiple servers in the same process.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.fileno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::handle_request}}()",
      "Body": "Process a single request.  This function calls the following methods in order: get_request(), verify_request(), and process_request().  If the user-provided handle() method of the handler class raises an exception, the server's handle_error() method will be called.  If no request is received within timeout seconds, handle_timeout() will be called and handle_request() will return.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.handle_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::serve_forever}}({{c4::poll_interval}}=0.5)",
      "Body": "Handle requests until an explicit shutdown() request.  Poll for shutdown every poll_interval seconds. Ignores the timeout attribute.  It also calls service_actions(), which may be used by a subclass or mixin to provide actions specific to a given service.  For example, the ForkingMixIn class uses service_actions() to clean up zombie child processes.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.serve_forever"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::service_actions}}()",
      "Body": "This is called in the serve_forever() loop. This method can be overridden by subclasses or mixin classes to perform actions specific to a given service, such as cleanup actions.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.service_actions"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::shutdown}}()",
      "Body": "Tell the serve_forever() loop to stop and wait until it does.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.shutdown"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::server_close}}()",
      "Body": "Clean up the server. May be overridden.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.server_close"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::address_family}}",
      "Body": "The family of protocols to which the server's socket belongs. Common examples are socket.AF_INET and socket.AF_UNIX.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.address_family"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::RequestHandlerClass}}",
      "Body": "The user-provided request handler class; an instance of this class is created for each request.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.RequestHandlerClass"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::server_address}}",
      "Body": "The address on which the server is listening.  The format of addresses varies depending on the protocol family; see the documentation for the socket module for details.  For Internet protocols, this is a tuple containing a string giving the address, and an integer port number: ('127.0.0.1', 80), for example.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.server_address"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::socket}}",
      "Body": "The socket object on which the server will listen for incoming requests.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::allow_reuse_address}}",
      "Body": "Whether the server will allow the reuse of an address.  This defaults to False, and can be set in subclasses to change the policy.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.allow_reuse_address"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::request_queue_size}}",
      "Body": "The size of the request queue.  If it takes a long time to process a single request, any requests that arrive while the server is busy are placed into a queue, up to request_queue_size requests.  Once the queue is full, further requests from clients will get a Connection denied error.  The default value is usually 5, but this can be overridden by subclasses.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.request_queue_size"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::socket_type}}",
      "Body": "The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.socket_type"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::timeout}}",
      "Body": "Timeout duration, measured in seconds, or None if no timeout is desired.  If handle_request() receives no incoming requests within the timeout period, the handle_timeout() method is called.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.timeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::finish_request}}({{c4::request}}, {{c5::client_address}})",
      "Body": "Actually processes the request by instantiating RequestHandlerClass and calling its handle() method.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.finish_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::get_request}}()",
      "Body": "Must accept a request from the socket, and return a 2-tuple containing the new socket object to be used to communicate with the client, and the client's address.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.get_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::handle_error}}({{c4::request}}, {{c5::client_address}})",
      "Body": "This function is called if the handle() method of a RequestHandlerClass instance raises an exception.  The default action is to print the traceback to standard error and continue handling further requests.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.handle_error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::handle_timeout}}()",
      "Body": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received.  The default action for forking servers is to collect the status of any child processes that have exited, while in threading servers this method does nothing.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.handle_timeout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::process_request}}({{c4::request}}, {{c5::client_address}})",
      "Body": "Calls finish_request() to create an instance of the RequestHandlerClass.  If desired, this function can create a new process or thread to handle the request; the ForkingMixIn and ThreadingMixIn classes do this.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.process_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::server_activate}}()",
      "Body": "Called by the server's constructor to activate the server.  The default behavior for a TCP server just invokes listen() on the server's socket.  May be overridden.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.server_activate"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::server_bind}}()",
      "Body": "Called by the server's constructor to bind the socket to the desired address. May be overridden.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.server_bind"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseServer}}.{{c3::verify_request}}({{c4::request}}, {{c5::client_address}})",
      "Body": "Must return a Boolean value; if the value is True, the request will be processed, and if it's False, the request will be denied.  This function can be overridden to implement access controls for a server. The default implementation always returns True.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.verify_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::BaseRequestHandler}}",
      "Body": "This is the superclass of all request handler objects.  It defines the interface, given below.  A concrete request handler subclass must define a new handle() method, and can override any of the other methods.  A new instance of the subclass is created for each request.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseRequestHandler}}.{{c3::setup}}()",
      "Body": "Called before the handle() method to perform any initialization actions required.  The default implementation does nothing.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseRequestHandler.setup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseRequestHandler}}.{{c3::handle}}()",
      "Body": "This function must do all the work required to service a request.  The default implementation does nothing.  Several instance attributes are available to it; the request is available as self.request; the client address as self.client_address; and the server instance as self.server, in case it needs access to per-server information.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseRequestHandler.handle"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::socketserver}}.{{c2::BaseRequestHandler}}.{{c3::finish}}()",
      "Body": "Called after the handle() method to perform any clean-up actions required.  The default implementation does nothing.  If setup() raises an exception, this function will not be called.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.BaseRequestHandler.finish"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::StreamRequestHandler}}",
      "Body": "These BaseRequestHandler subclasses override the setup() and finish() methods, and provide self.rfile and self.wfile attributes. The self.rfile and self.wfile attributes can be read or written, respectively, to get the request data or return data to the client.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.StreamRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::socketserver}}.{{c3::DatagramRequestHandler}}",
      "Body": "These BaseRequestHandler subclasses override the setup() and finish() methods, and provide self.rfile and self.wfile attributes. The self.rfile and self.wfile attributes can be read or written, respectively, to get the request data or return data to the client.",
      "Link": "https://docs.python.org/3/library/socketserver.html#socketserver.DatagramRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::server}}.{{c4::HTTPServer}}({{c5::server_address}}, {{c6::RequestHandlerClass}})",
      "Body": "This class builds on the TCPServer class by storing the server address as instance variables named server_name and server_port. The server is accessible by the handler, typically through the handler's server instance variable.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.HTTPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::server}}.{{c4::ThreadingHTTPServer}}({{c5::server_address}}, {{c6::RequestHandlerClass}})",
      "Body": "This class is identical to HTTPServer but uses threads to handle requests by using the ThreadingMixIn. This is useful to handle web browsers pre-opening sockets, on which HTTPServer would wait indefinitely.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.ThreadingHTTPServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::server}}.{{c4::BaseHTTPRequestHandler}}({{c5::request}}, {{c6::client_address}}, {{c7::server}})",
      "Body": "This class is used to handle the HTTP requests that arrive at the server.  By itself, it cannot respond to any actual HTTP requests; it must be subclassed to handle each request method (e.g. GET or POST). BaseHTTPRequestHandler provides a number of class and instance variables, and methods for use by subclasses.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::client_address}}",
      "Body": "Contains a tuple of the form (host, port) referring to the client's address.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.client_address"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::server}}",
      "Body": "Contains the server instance.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.server"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::close_connection}}",
      "Body": "Boolean that should be set before handle_one_request() returns, indicating if another request may be expected, or if the connection should be shut down.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.close_connection"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::requestline}}",
      "Body": "Contains the string representation of the HTTP request line. The terminating CRLF is stripped. This attribute should be set by handle_one_request(). If no valid request line was processed, it should be set to the empty string.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.requestline"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::command}}",
      "Body": "Contains the command (request type). For example, 'GET'.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.command"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::path}}",
      "Body": "Contains the request path.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.path"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::request_version}}",
      "Body": "Contains the version string from the request. For example, 'HTTP/1.0'.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.request_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::headers}}",
      "Body": "Holds an instance of the class specified by the MessageClass class variable. This instance parses and manages the headers in the HTTP request. The parse_headers() function from http.client is used to parse the headers and it requires that the HTTP request provide a valid RFC 2822 style header.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.headers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::rfile}}",
      "Body": "An io.BufferedIOBase input stream, ready to read from the start of the optional input data.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.rfile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::wfile}}",
      "Body": "Contains the output stream for writing a response back to the client. Proper adherence to the HTTP protocol must be used when writing to this stream in order to achieve successful interoperation with HTTP clients.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.wfile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::server_version}}",
      "Body": "Specifies the server software version.  You may want to override this. The format is multiple whitespace-separated strings, where each string is of the form name[/version]. For example, 'BaseHTTP/0.2'.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.server_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::sys_version}}",
      "Body": "Contains the Python system version, in a form usable by the version_string method and the server_version class variable. For example, 'Python/1.4'.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.sys_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::error_message_format}}",
      "Body": "Specifies a format string that should be used by send_error() method for building an error response to the client. The string is filled by default with variables from responses based on the status code that passed to send_error().",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.error_message_format"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::error_content_type}}",
      "Body": "Specifies the Content-Type HTTP header of error responses sent to the client.  The default value is 'text/html'.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.error_content_type"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::protocol_version}}",
      "Body": "This specifies the HTTP protocol version used in responses.  If set to 'HTTP/1.1', the server will permit HTTP persistent connections; however, your server must then include an accurate Content-Length header (using send_header()) in all of its responses to clients. For backwards compatibility, the setting defaults to 'HTTP/1.0'.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.protocol_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::MessageClass}}",
      "Body": "Specifies an email.message.Message-like class to parse HTTP headers.  Typically, this is not overridden, and it defaults to http.client.HTTPMessage.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.MessageClass"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::responses}}",
      "Body": "This attribute contains a mapping of error code integers to two-element tuples containing a short and long message. For example, {code: (shortmessage, longmessage)}. The shortmessage is usually used as the message key in an error response, and longmessage as the explain key.  It is used by send_response_only() and send_error() methods.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.responses"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::handle}}()",
      "Body": "Calls handle_one_request() once (or, if persistent connections are enabled, multiple times) to handle incoming HTTP requests. You should never need to override it; instead, implement appropriate do_*() methods.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.handle"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::handle_one_request}}()",
      "Body": "This method will parse and dispatch the request to the appropriate do_*() method.  You should never need to override it.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.handle_one_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::handle_expect_}}100()",
      "Body": "When a HTTP/1.1 compliant server receives an Expect: 100-continue request header it responds back with a 100 Continue followed by 200 OK headers. This method can be overridden to raise an error if the server does not want the client to continue.  For e.g. server can chose to send 417 Expectation Failed as a response header and return False.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.handle_expect_100"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::send_error}}({{c5::code}}, {{c6::message}}={{c7::None}}, {{c8::explain}}={{c9::None}})",
      "Body": "Sends and logs a complete error reply to the client. The numeric code specifies the HTTP error code, with message as an optional, short, human readable description of the error.  The explain argument can be used to provide more detailed information about the error; it will be formatted using the error_message_format attribute and emitted, after a complete set of headers, as the response body.  The responses attribute holds the default values for message and explain that will be used if no value is provided; for unknown codes the default value for both is the string ???. The body will be empty if the method is HEAD or the response code is one of the following: 1xx, 204 No Content, 205 Reset Content, 304 Not Modified.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.send_error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::send_response}}({{c5::code}}, {{c6::message}}={{c7::None}})",
      "Body": "Adds a response header to the headers buffer and logs the accepted request. The HTTP response line is written to the internal buffer, followed by Server and Date headers. The values for these two headers are picked up from the version_string() and date_time_string() methods, respectively. If the server does not intend to send any other headers using the send_header() method, then send_response() should be followed by an end_headers() call.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.send_response"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::send_header}}({{c5::keyword}}, {{c6::value}})",
      "Body": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers() or flush_headers() is invoked. keyword should specify the header keyword, with value specifying its value. Note that, after the send_header calls are done, end_headers() MUST BE called in order to complete the operation.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.send_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::send_response_only}}({{c5::code}}, {{c6::message}}={{c7::None}})",
      "Body": "Sends the response header only, used for the purposes when 100 Continue response is sent by the server to the client. The headers not buffered and sent directly the output stream.If the message is not specified, the HTTP message corresponding the response code  is sent.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.send_response_only"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::end_headers}}()",
      "Body": "Adds a blank line (indicating the end of the HTTP headers in the response) to the headers buffer and calls flush_headers().",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.end_headers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::flush_headers}}()",
      "Body": "Finally send the headers to the output stream and flush the internal headers buffer.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.flush_headers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::log_request}}({{c5::code}}='-', {{c6::size}}='-')",
      "Body": "Logs an accepted (successful) request. code should specify the numeric HTTP code associated with the response. If a size of the response is available, then it should be passed as the size parameter.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.log_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::log_error}}(...)",
      "Body": "Logs an error when a request cannot be fulfilled. By default, it passes the message to log_message(), so it takes the same arguments (format and additional values).",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.log_error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::log_message}}({{c5::format}}, ...)",
      "Body": "Logs an arbitrary message to sys.stderr. This is typically overridden to create custom error logging mechanisms. The format argument is a standard printf-style format string, where the additional arguments to log_message() are applied as inputs to the formatting. The client ip address and current date and time are prefixed to every message logged.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.log_message"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::version_string}}()",
      "Body": "Returns the server software's version string. This is a combination of the server_version and sys_version attributes.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.version_string"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::date_time_string}}({{c5::timestamp}}={{c6::None}})",
      "Body": "Returns the date and time given by timestamp (which must be None or in the format returned by time.time()), formatted for a message header. If timestamp is omitted, it uses the current date and time.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.date_time_string"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::log_date_time_string}}()",
      "Body": "Returns the current date and time, formatted for logging.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.log_date_time_string"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::BaseHTTPRequestHandler}}.{{c4::address_string}}()",
      "Body": "Returns the client address.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.address_string"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::server}}.{{c4::SimpleHTTPRequestHandler}}({{c5::request}}, {{c6::client_address}}, {{c7::server}}, {{c8::directory}}={{c9::None}})",
      "Body": "This class serves files from the current directory and below, directly mapping the directory structure to HTTP requests.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::SimpleHTTPRequestHandler}}.{{c4::server_version}}",
      "Body": "This will be \"SimpleHTTP/\" + __version__, where __version__ is defined at the module level.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler.server_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::SimpleHTTPRequestHandler}}.{{c4::extensions_map}}",
      "Body": "A dictionary mapping suffixes into MIME types. The default is signified by an empty string, and is considered to be application/octet-stream. The mapping is used case-insensitively, and so should contain only lower-cased keys.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler.extensions_map"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::SimpleHTTPRequestHandler}}.{{c4::directory}}",
      "Body": "If not specified, the directory to serve is the current working directory.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler.directory"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::SimpleHTTPRequestHandler}}.{{c4::do_HEAD}}()",
      "Body": "This method serves the 'HEAD' request type: it sends the headers it would send for the equivalent GET request. See the do_GET() method for a more complete explanation of the possible headers.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler.do_HEAD"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::SimpleHTTPRequestHandler}}.{{c4::do_GET}}()",
      "Body": "The request is mapped to a local file by interpreting the request as a path relative to the current working directory.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler.do_GET"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::server}}.{{c4::CGIHTTPRequestHandler}}({{c5::request}}, {{c6::client_address}}, {{c7::server}})",
      "Body": "This class is used to serve either files or output of CGI scripts from the current directory and below. Note that mapping HTTP hierarchic structure to local directory structure is exactly as in SimpleHTTPRequestHandler.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::CGIHTTPRequestHandler}}.{{c4::cgi_directories}}",
      "Body": "This defaults to ['/cgi-bin', '/htbin'] and describes directories to treat as containing CGI scripts.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler.cgi_directories"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::http}}.{{c2::server}}.{{c3::CGIHTTPRequestHandler}}.{{c4::do_POST}}()",
      "Body": "This method serves the 'POST' request type, only allowed for CGI scripts.  Error 501, Can only POST to CGI scripts, is output when trying to POST to a non-CGI url.",
      "Link": "https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler.do_POST"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::cookies}}.{{c4::CookieError}}",
      "Body": "Exception failing because of RFC 2109 invalidity: incorrect attributes, incorrect Set-Cookie header, etc.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.CookieError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookies}}.{{c4::BaseCookie}}([{{c5::input}}])",
      "Body": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances. Note that upon setting a key to a value, the value is first converted to a Morsel containing the key and the value.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.BaseCookie"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookies}}.{{c4::SimpleCookie}}([{{c5::input}}])",
      "Body": "This class derives from BaseCookie and overrides value_decode() and value_encode() to be the identity and str() respectively.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.SimpleCookie"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseCookie}}.{{c2::value_decode}}({{c3::val}})",
      "Body": "Return a decoded value from a string representation. Return value can be any type. This method does nothing in BaseCookie  it exists so it can be overridden.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.BaseCookie.value_decode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseCookie}}.{{c2::value_encode}}({{c3::val}})",
      "Body": "Return an encoded value. val can be any type, but return value must be a string. This method does nothing in BaseCookie  it exists so it can be overridden.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.BaseCookie.value_encode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseCookie}}.{{c2::output}}({{c3::attrs}}={{c4::None}}, {{c5::header}}='{{c6::Set}}-{{c7::Cookie}}:', {{c8::sep}}='\\r\\n')",
      "Body": "Return a string representation suitable to be sent as HTTP headers. attrs and header are sent to each Morsel's output() method. sep is used to join the headers together, and is by default the combination '\\r\\n' (CRLF).",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.BaseCookie.output"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseCookie}}.{{c2::js_output}}({{c3::attrs}}={{c4::None}})",
      "Body": "Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP headers was sent.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.BaseCookie.js_output"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::BaseCookie}}.{{c2::load}}({{c3::rawdata}})",
      "Body": "If rawdata is a string, parse it as an HTTP_COOKIE and add the values found there as Morsels. If it is a dictionary, it is equivalent to:",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.BaseCookie.load"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookies}}.{{c4::Morsel}}",
      "Body": "Abstract a key/value pair, which has some RFC 2109 attributes.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::value}}",
      "Body": "The value of the cookie.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.value"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::coded_value}}",
      "Body": "The encoded value of the cookie  this is what should be sent.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.coded_value"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::key}}",
      "Body": "The name of the cookie.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.key"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::set}}({{c3::key}}, {{c4::value}}, {{c5::coded_value}})",
      "Body": "Set the key, value and coded_value attributes.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.set"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::isReservedKey}}({{c3::K}})",
      "Body": "Whether K is a member of the set of keys of a Morsel.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.isReservedKey"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::output}}({{c3::attrs}}={{c4::None}}, {{c5::header}}='{{c6::Set}}-{{c7::Cookie}}:')",
      "Body": "Return a string representation of the Morsel, suitable to be sent as an HTTP header. By default, all the attributes are included, unless attrs is given, in which case it should be a list of attributes to use. header is by default \"Set-Cookie:\".",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.output"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::js_output}}({{c3::attrs}}={{c4::None}})",
      "Body": "Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP header was sent.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.js_output"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::OutputString}}({{c3::attrs}}={{c4::None}})",
      "Body": "Return a string representing the Morsel, without any surrounding HTTP or JavaScript.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.OutputString"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::update}}({{c3::values}})",
      "Body": "Update the values in the Morsel dictionary with the values in the dictionary values.  Raise an error if any of the keys in the values dict is not a valid RFC 2109 attribute.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.update"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::copy}}({{c3::value}})",
      "Body": "Return a shallow copy of the Morsel object.",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.copy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Morsel}}.{{c2::setdefault}}({{c3::key}}, {{c4::value}}={{c5::None}})",
      "Body": "Raise an error if key is not a valid RFC 2109 attribute, otherwise behave the same as dict.setdefault().",
      "Link": "https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.setdefault"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::http}}.{{c3::cookiejar}}.{{c4::LoadError}}",
      "Body": "Instances of FileCookieJar raise this exception on failure to load cookies from a file.  LoadError is a subclass of OSError.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.LoadError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookiejar}}.{{c4::CookieJar}}({{c5::policy}}={{c6::None}})",
      "Body": "policy is an object implementing the CookiePolicy interface.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookiejar}}.{{c4::FileCookieJar}}({{c5::filename}}, {{c6::delayload}}={{c7::None}}, {{c8::policy}}={{c9::None}})",
      "Body": "policy is an object implementing the CookiePolicy interface.  For the other arguments, see the documentation for the corresponding attributes.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookiejar}}.{{c4::CookiePolicy}}",
      "Body": "This class is responsible for deciding whether each cookie should be accepted from / returned to the server.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookiePolicy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookiejar}}.{{c4::DefaultCookiePolicy}}({{c5::blocked_domains}}={{c6::None}}, {{c7::allowed_domains}}={{c8::None}}, {{c9::netscape}}={{c10::True}}, {{c11::rfc}}2965={{c12::False}}, {{c13::rfc}}2109{{c14::_as_netscape}}={{c15::None}}, {{c16::hide_cookie}}2={{c17::False}}, {{c18::strict_domain}}={{c19::False}}, {{c20::strict_rfc}}2965{{c21::_unverifiable}}={{c22::True}}, {{c23::strict_ns_unverifiable}}={{c24::False}}, {{c25::strict_ns_domain}}={{c26::DefaultCookiePolicy}}.{{c27::DomainLiberal}}, {{c28::strict_ns_set_initial_dollar}}={{c29::False}}, {{c30::strict_ns_set_path}}={{c31::False}})",
      "Body": "Constructor arguments should be passed as keyword arguments only. blocked_domains is a sequence of domain names that we never accept cookies from, nor return cookies to. allowed_domains if not None, this is a sequence of the only domains for which we accept and return cookies.  For all other arguments, see the documentation for CookiePolicy and DefaultCookiePolicy objects.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookiejar}}.{{c4::Cookie}}",
      "Body": "This class represents Netscape, RFC 2109 and RFC 2965 cookies.  It is not expected that users of http.cookiejar construct their own Cookie instances.  Instead, if necessary, call make_cookies() on a CookieJar instance.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookieJar}}.{{c2::add_cookie_header}}({{c3::request}})",
      "Body": "Add correct Cookie header to request.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar.add_cookie_header"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookieJar}}.{{c2::extract_cookies}}({{c3::response}}, {{c4::request}})",
      "Body": "Extract cookies from HTTP response and store them in the CookieJar, where allowed by policy.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar.extract_cookies"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookieJar}}.{{c2::set_policy}}({{c3::policy}})",
      "Body": "Set the CookiePolicy instance to be used.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar.set_policy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookieJar}}.{{c2::make_cookies}}({{c3::response}}, {{c4::request}})",
      "Body": "Return sequence of Cookie objects extracted from response object.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar.make_cookies"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookieJar}}.{{c2::set_cookie_if_ok}}({{c3::cookie}}, {{c4::request}})",
      "Body": "Set a Cookie if policy says it's OK to do so.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar.set_cookie_if_ok"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookieJar}}.{{c2::set_cookie}}({{c3::cookie}})",
      "Body": "Set a Cookie, without checking with policy to see whether or not it should be set.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar.set_cookie"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookieJar}}.{{c2::clear}}([{{c3::domain}}[, {{c4::path}}[, {{c5::name}}]]])",
      "Body": "Clear some cookies.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar.clear"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookieJar}}.{{c2::clear_session_cookies}}()",
      "Body": "Discard all session cookies.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar.clear_session_cookies"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FileCookieJar}}.{{c2::save}}({{c3::filename}}={{c4::None}}, {{c5::ignore_discard}}={{c6::False}}, {{c7::ignore_expires}}={{c8::False}})",
      "Body": "Save cookies to a file.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar.save"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FileCookieJar}}.{{c2::load}}({{c3::filename}}={{c4::None}}, {{c5::ignore_discard}}={{c6::False}}, {{c7::ignore_expires}}={{c8::False}})",
      "Body": "Load cookies from a file.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar.load"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FileCookieJar}}.{{c2::revert}}({{c3::filename}}={{c4::None}}, {{c5::ignore_discard}}={{c6::False}}, {{c7::ignore_expires}}={{c8::False}})",
      "Body": "Clear all cookies and reload cookies from a saved file.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar.revert"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FileCookieJar}}.{{c2::filename}}",
      "Body": "Filename of default file in which to keep cookies.  This attribute may be assigned to.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar.filename"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::FileCookieJar}}.{{c2::delayload}}",
      "Body": "If true, load cookies lazily from disk.  This attribute should not be assigned to.  This is only a hint, since this only affects performance, not behaviour (unless the cookies on disk are changing). A CookieJar object may ignore it.  None of the FileCookieJar classes included in the standard library lazily loads cookies.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar.delayload"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookiejar}}.{{c4::MozillaCookieJar}}({{c5::filename}}, {{c6::delayload}}={{c7::None}}, {{c8::policy}}={{c9::None}})",
      "Body": "A FileCookieJar that can load from and save cookies to disk in the Mozilla cookies.txt file format (which is also used by the Lynx and Netscape browsers).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.MozillaCookieJar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::http}}.{{c3::cookiejar}}.{{c4::LWPCookieJar}}({{c5::filename}}, {{c6::delayload}}={{c7::None}}, {{c8::policy}}={{c9::None}})",
      "Body": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library's Set-Cookie3 file format.  This is convenient if you want to store cookies in a human-readable file.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.LWPCookieJar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookiePolicy}}.{{c2::set_ok}}({{c3::cookie}}, {{c4::request}})",
      "Body": "Return boolean value indicating whether cookie should be accepted from server.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookiePolicy.set_ok"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookiePolicy}}.{{c2::return_ok}}({{c3::cookie}}, {{c4::request}})",
      "Body": "Return boolean value indicating whether cookie should be returned to server.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookiePolicy.return_ok"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookiePolicy}}.{{c2::domain_return_ok}}({{c3::domain}}, {{c4::request}})",
      "Body": "Return false if cookies should not be returned, given cookie domain.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookiePolicy.domain_return_ok"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookiePolicy}}.{{c2::path_return_ok}}({{c3::path}}, {{c4::request}})",
      "Body": "Return false if cookies should not be returned, given cookie path.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookiePolicy.path_return_ok"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookiePolicy}}.{{c2::netscape}}",
      "Body": "Implement Netscape protocol.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookiePolicy.netscape"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookiePolicy}}.{{c2::rfc}}2965",
      "Body": "Implement RFC 2965 protocol.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookiePolicy.rfc2965"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CookiePolicy}}.{{c2::hide_cookie}}2",
      "Body": "Don't add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookiePolicy.hide_cookie2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::blocked_domains}}()",
      "Body": "Return the sequence of blocked domains (as a tuple).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.blocked_domains"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::set_blocked_domains}}({{c3::blocked_domains}})",
      "Body": "Set the sequence of blocked domains.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.set_blocked_domains"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::is_blocked}}({{c3::domain}})",
      "Body": "Return whether domain is on the blacklist for setting or receiving cookies.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.is_blocked"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::allowed_domains}}()",
      "Body": "Return None, or the sequence of allowed domains (as a tuple).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.allowed_domains"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::set_allowed_domains}}({{c3::allowed_domains}})",
      "Body": "Set the sequence of allowed domains, or None.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.set_allowed_domains"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::is_not_allowed}}({{c3::domain}})",
      "Body": "Return whether domain is not on the whitelist for setting or receiving cookies.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.is_not_allowed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::rfc}}2109{{c3::_as_netscape}}",
      "Body": "If true, request that the CookieJar instance downgrade RFC 2109 cookies (ie. cookies received in a Set-Cookie header with a version cookie-attribute of 1) to Netscape cookies by setting the version attribute of the Cookie instance to 0.  The default value is None, in which case RFC 2109 cookies are downgraded if and only if RFC 2965 handling is turned off.  Therefore, RFC 2109 cookies are downgraded by default.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.rfc2109_as_netscape"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::strict_domain}}",
      "Body": "Don't allow sites to set two-component domains with country-code top-level domains like .co.uk, .gov.uk, .co.nz.etc.  This is far from perfect and isn't guaranteed to work!",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.strict_domain"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::strict_rfc}}2965{{c3::_unverifiable}}",
      "Body": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).  If this is false, cookies are never blocked on the basis of verifiability",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.strict_rfc2965_unverifiable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::strict_ns_unverifiable}}",
      "Body": "Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.strict_ns_unverifiable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::strict_ns_domain}}",
      "Body": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.  See below for acceptable values.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.strict_ns_domain"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::strict_ns_set_initial_dollar}}",
      "Body": "Ignore cookies in Set-Cookie: headers that have names starting with '$'.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.strict_ns_set_initial_dollar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::strict_ns_set_path}}",
      "Body": "Don't allow setting cookies whose path doesn't path-match request URI.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.strict_ns_set_path"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::DomainStrictNoDots}}",
      "Body": "When setting cookies, the 'host prefix' must not contain a dot (eg. www.foo.bar.com can't set a cookie for .bar.com, because www.foo contains a dot).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.DomainStrictNoDots"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::DomainStrictNonDomain}}",
      "Body": "Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg. spam.example.com won't be returned cookies from example.com that had no domain cookie-attribute).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.DomainStrictNonDomain"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::DomainRFC}}2965{{c3::Match}}",
      "Body": "When setting cookies, require a full RFC 2965 domain-match.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.DomainRFC2965Match"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::DomainLiberal}}",
      "Body": "Equivalent to 0 (ie. all of the above Netscape domain strictness flags switched off).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.DomainLiberal"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DefaultCookiePolicy}}.{{c2::DomainStrict}}",
      "Body": "Equivalent to DomainStrictNoDots|DomainStrictNonDomain.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.DefaultCookiePolicy.DomainStrict"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::version}}",
      "Body": "Integer or None.  Netscape cookies have version 0. RFC 2965 and RFC 2109 cookies have a version cookie-attribute of 1.  However, note that http.cookiejar may 'downgrade' RFC 2109 cookies to Netscape cookies, in which case version is 0.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::name}}",
      "Body": "Cookie name (a string).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.name"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::value}}",
      "Body": "Cookie value (a string), or None.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.value"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::port}}",
      "Body": "String representing a port or a set of ports (eg. '80', or '80,8080'), or None.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.port"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::path}}",
      "Body": "Cookie path (a string, eg. '/acme/rocket_launchers').",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.path"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::secure}}",
      "Body": "True if cookie should only be returned over a secure connection.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.secure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::expires}}",
      "Body": "Integer expiry date in seconds since epoch, or None.  See also the is_expired() method.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.expires"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::discard}}",
      "Body": "True if this is a session cookie.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.discard"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::comment}}",
      "Body": "String comment from the server explaining the function of this cookie, or None.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.comment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::comment_url}}",
      "Body": "URL linking to a comment from the server explaining the function of this cookie, or None.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.comment_url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::rfc}}2109",
      "Body": "True if this cookie was received as an RFC 2109 cookie (ie. the cookie arrived in a Set-Cookie header, and the value of the Version cookie-attribute in that header was 1).  This attribute is provided because http.cookiejar may 'downgrade' RFC 2109 cookies to Netscape cookies, in which case version is 0.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.rfc2109"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::port_specified}}",
      "Body": "True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header).",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.port_specified"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::domain_specified}}",
      "Body": "True if a domain was explicitly specified by the server.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.domain_specified"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::domain_initial_dot}}",
      "Body": "True if the domain explicitly specified by the server began with a dot ('.').",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.domain_initial_dot"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::has_nonstandard_attr}}({{c3::name}})",
      "Body": "Return true if cookie has the named cookie-attribute.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.has_nonstandard_attr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::get_nonstandard_attr}}({{c3::name}}, {{c4::default}}={{c5::None}})",
      "Body": "If cookie has the named cookie-attribute, return its value. Otherwise, return default.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.get_nonstandard_attr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::set_nonstandard_attr}}({{c3::name}}, {{c4::value}})",
      "Body": "Set the value of the named cookie-attribute.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.set_nonstandard_attr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::Cookie}}.{{c2::is_expired}}({{c3::now}}={{c4::None}})",
      "Body": "True if cookie has passed the time at which the server requested it should expire.  If now is given (in seconds since the epoch), return whether the cookie has expired at the specified time.",
      "Link": "https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.Cookie.is_expired"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::client}}.{{c4::ServerProxy}}({{c5::uri}}, {{c6::transport}}={{c7::None}}, {{c8::encoding}}={{c9::None}}, {{c10::verbose}}={{c11::False}}, {{c12::allow_none}}={{c13::False}}, {{c14::use_datetime}}={{c15::False}}, {{c16::use_builtin_types}}={{c17::False}}, *, {{c18::context}}={{c19::None}})",
      "Body": "Changed in version 3.3: The use_builtin_types flag was added.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ServerProxy}}.{{c2::system}}.{{c3::listMethods}}()",
      "Body": "This method returns a list of strings, one for each (non-system) method supported by the XML-RPC server.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy.system.listMethods"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ServerProxy}}.{{c2::system}}.{{c3::methodSignature}}({{c4::name}})",
      "Body": "This method takes one parameter, the name of a method implemented by the XML-RPC server. It returns an array of possible signatures for this method. A signature is an array of types. The first of these types is the return type of the method, the rest are parameters.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy.system.methodSignature"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ServerProxy}}.{{c2::system}}.{{c3::methodHelp}}({{c4::name}})",
      "Body": "This method takes one parameter, the name of a method implemented by the XML-RPC server.  It returns a documentation string describing the use of that method. If no such string is available, an empty string is returned. The documentation string may contain HTML markup.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy.system.methodHelp"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::client}}.{{c4::DateTime}}",
      "Body": "This class may be initialized with seconds since the epoch, a time tuple, an ISO 8601 time/date string, or a datetime.datetime instance.  It has the following methods, supported mainly for internal use by the marshalling/unmarshalling code:",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.DateTime"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::DateTime}}.{{c4::decode}}({{c5::string}})",
      "Body": "Accept a string as the instance's new time value.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.DateTime.decode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::DateTime}}.{{c4::encode}}({{c5::out}})",
      "Body": "Write the XML-RPC encoding of this DateTime item to the out stream object.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.DateTime.encode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::client}}.{{c4::Binary}}",
      "Body": "This class may be initialized from bytes data (which may include NULs). The primary access to the content of a Binary object is provided by an attribute:",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.Binary"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::Binary}}.{{c4::data}}",
      "Body": "The binary data encapsulated by the Binary instance.  The data is provided as a bytes object.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.Binary.data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::Binary}}.{{c4::decode}}({{c5::bytes}})",
      "Body": "Accept a base64 bytes object and decode it as the instance's new data.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.Binary.decode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::Binary}}.{{c4::encode}}({{c5::out}})",
      "Body": "Write the XML-RPC base 64 encoding of this binary item to the out stream object.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.Binary.encode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::client}}.{{c4::Fault}}",
      "Body": "A Fault object encapsulates the content of an XML-RPC fault tag. Fault objects have the following attributes:",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.Fault"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::Fault}}.{{c4::faultCode}}",
      "Body": "A string indicating the fault type.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.Fault.faultCode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::Fault}}.{{c4::faultString}}",
      "Body": "A string containing a diagnostic message associated with the fault.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.Fault.faultString"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::client}}.{{c4::ProtocolError}}",
      "Body": "A ProtocolError object describes a protocol error in the underlying transport layer (such as a 404 'not found' error if the server named by the URI does not exist).  It has the following attributes:",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ProtocolError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::ProtocolError}}.{{c4::url}}",
      "Body": "The URI or URL that triggered the error.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ProtocolError.url"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::ProtocolError}}.{{c4::errcode}}",
      "Body": "The error code.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ProtocolError.errcode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::ProtocolError}}.{{c4::errmsg}}",
      "Body": "The error message or diagnostic string.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ProtocolError.errmsg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::ProtocolError}}.{{c4::headers}}",
      "Body": "A dict containing the headers of the HTTP/HTTPS request that triggered the error.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ProtocolError.headers"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::client}}.{{c4::MultiCall}}({{c5::server}})",
      "Body": "Create an object used to boxcar method calls. server is the eventual target of the call. Calls can be made to the result object, but they will immediately return None, and only store the call name and parameters in the MultiCall object. Calling the object itself causes all stored calls to be transmitted as a single system.multicall request. The result of this call is a generator; iterating over this generator yields the individual results.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.MultiCall"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::dumps}}({{c4::params}}, {{c5::methodname}}={{c6::None}}, {{c7::methodresponse}}={{c8::None}}, {{c9::encoding}}={{c10::None}}, {{c11::allow_none}}={{c12::False}})",
      "Body": "Convert params into an XML-RPC request. or into a response if methodresponse is true. params can be either a tuple of arguments or an instance of the Fault exception class.  If methodresponse is true, only a single value can be returned, meaning that params must be of length 1. encoding, if supplied, is the encoding to use in the generated XML; the default is UTF-8. Python's None value cannot be used in standard XML-RPC; to allow using it via an extension,  provide a true value for allow_none.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.dumps"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::xmlrpc}}.{{c2::client}}.{{c3::loads}}({{c4::data}}, {{c5::use_datetime}}={{c6::False}}, {{c7::use_builtin_types}}={{c8::False}})",
      "Body": "Convert an XML-RPC request or response into Python objects, a (params, methodname).  params is a tuple of argument; methodname is a string, or None if no method name is present in the packet. If the XML-RPC packet represents a fault condition, this function will raise a Fault exception. The use_builtin_types flag can be used to cause date/time values to be presented as datetime.datetime objects and binary data to be presented as bytes objects; this flag is false by default.",
      "Link": "https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.loads"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::server}}.{{c4::SimpleXMLRPCServer}}({{c5::addr}}, {{c6::requestHandler}}={{c7::SimpleXMLRPCRequestHandler}}, {{c8::logRequests}}={{c9::True}}, {{c10::allow_none}}={{c11::False}}, {{c12::encoding}}={{c13::None}}, {{c14::bind_and_activate}}={{c15::True}}, {{c16::use_builtin_types}}={{c17::False}})",
      "Body": "Create a new server instance.  This class provides methods for registration of functions that can be called by the XML-RPC protocol.  The requestHandler parameter should be a factory for request handler instances; it defaults to SimpleXMLRPCRequestHandler.  The addr and requestHandler parameters are passed to the socketserver.TCPServer constructor.  If logRequests is true (the default), requests will be logged; setting this parameter to false will turn off logging.   The allow_none and encoding parameters are passed on to xmlrpc.client and control the XML-RPC responses that will be returned from the server. The bind_and_activate parameter controls whether server_bind() and server_activate() are called immediately by the constructor; it defaults to true. Setting it to false allows code to manipulate the allow_reuse_address class variable before the address is bound. The use_builtin_types parameter is passed to the loads() function and controls which types are processed when date/times values or binary data are received; it defaults to false.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.SimpleXMLRPCServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::server}}.{{c4::CGIXMLRPCRequestHandler}}({{c5::allow_none}}={{c6::False}}, {{c7::encoding}}={{c8::None}}, {{c9::use_builtin_types}}={{c10::False}})",
      "Body": "Create a new instance to handle XML-RPC requests in a CGI environment.  The allow_none and encoding parameters are passed on to xmlrpc.client and control the XML-RPC responses that will be returned from the server. The use_builtin_types parameter is passed to the loads() function and controls which types are processed when date/times values or binary data are received; it defaults to false.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.CGIXMLRPCRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::server}}.{{c4::SimpleXMLRPCRequestHandler}}",
      "Body": "Create a new request handler instance.  This request handler supports POST requests and modifies logging so that the logRequests parameter to the SimpleXMLRPCServer constructor parameter is honored.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.SimpleXMLRPCRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SimpleXMLRPCServer}}.{{c2::register_function}}({{c3::function}}={{c4::None}}, {{c5::name}}={{c6::None}})",
      "Body": "Register a function that can respond to XML-RPC requests.  If name is given, it will be the method name associated with function, otherwise function.__name__ will be used.  name is a string, and may contain characters not legal in Python identifiers, including the period character.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.SimpleXMLRPCServer.register_function"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SimpleXMLRPCServer}}.{{c2::register_instance}}({{c3::instance}}, {{c4::allow_dotted_names}}={{c5::False}})",
      "Body": "Register an object which is used to expose method names which have not been registered using register_function().  If instance contains a _dispatch() method, it is called with the requested method name and the parameters from the request.  Its API is def _dispatch(self, method, params) (note that params does not represent a variable argument list).  If it calls an underlying function to perform its task, that function is called as func(*params), expanding the parameter list. The return value from _dispatch() is returned to the client as the result.  If instance does not have a _dispatch() method, it is searched for an attribute matching the name of the requested method.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.SimpleXMLRPCServer.register_instance"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SimpleXMLRPCServer}}.{{c2::register_introspection_functions}}()",
      "Body": "Registers the XML-RPC introspection functions system.listMethods, system.methodHelp and system.methodSignature.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SimpleXMLRPCServer}}.{{c2::register_multicall_functions}}()",
      "Body": "Registers the XML-RPC multicall function system.multicall.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::SimpleXMLRPCRequestHandler}}.{{c2::rpc_paths}}",
      "Body": "An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.  Requests posted to other paths will result in a 404 no such page HTTP error.  If this tuple is empty, all paths will be considered valid. The default value is ('/', '/RPC2').",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CGIXMLRPCRequestHandler}}.{{c2::register_function}}({{c3::function}}={{c4::None}}, {{c5::name}}={{c6::None}})",
      "Body": "Register a function that can respond to XML-RPC requests.  If name is given, it will be the method name associated with function, otherwise function.__name__ will be used.  name is a string, and may contain characters not legal in Python identifiers, including the period character.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.CGIXMLRPCRequestHandler.register_function"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CGIXMLRPCRequestHandler}}.{{c2::register_instance}}({{c3::instance}})",
      "Body": "Register an object which is used to expose method names  which have not been registered using register_function(). If  instance contains a _dispatch() method, it is called with the  requested method name and the parameters from the  request; the return value is returned to the client as the result. If instance does not have a _dispatch() method, it is searched for an attribute matching the name of the requested method; if  the requested method name contains periods, each  component of the method name is searched for individually,  with the effect that a simple hierarchical search is performed. The value found from this search is then called with the  parameters from the request, and the return value is passed  back to the client.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.CGIXMLRPCRequestHandler.register_instance"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CGIXMLRPCRequestHandler}}.{{c2::register_introspection_functions}}()",
      "Body": "Register the XML-RPC introspection functions  system.listMethods, system.methodHelp and  system.methodSignature.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CGIXMLRPCRequestHandler}}.{{c2::register_multicall_functions}}()",
      "Body": "Register the XML-RPC multicall function system.multicall.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::CGIXMLRPCRequestHandler}}.{{c2::handle_request}}({{c3::request_text}}={{c4::None}})",
      "Body": "Handle an XML-RPC request. If request_text is given, it should be the POST data provided by the HTTP server,  otherwise the contents of stdin will be used.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.CGIXMLRPCRequestHandler.handle_request"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::server}}.{{c4::DocXMLRPCServer}}({{c5::addr}}, {{c6::requestHandler}}={{c7::DocXMLRPCRequestHandler}}, {{c8::logRequests}}={{c9::True}}, {{c10::allow_none}}={{c11::False}}, {{c12::encoding}}={{c13::None}}, {{c14::bind_and_activate}}={{c15::True}}, {{c16::use_builtin_types}}={{c17::True}})",
      "Body": "Create a new server instance. All parameters have the same meaning as for SimpleXMLRPCServer; requestHandler defaults to DocXMLRPCRequestHandler.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocXMLRPCServer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::server}}.{{c4::DocCGIXMLRPCRequestHandler}}",
      "Body": "Create a new instance to handle XML-RPC requests in a CGI environment.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocCGIXMLRPCRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::xmlrpc}}.{{c3::server}}.{{c4::DocXMLRPCRequestHandler}}",
      "Body": "Create a new request handler instance. This request handler supports XML-RPC POST requests, documentation GET requests, and modifies logging so that the logRequests parameter to the DocXMLRPCServer constructor parameter is honored.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocXMLRPCRequestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocXMLRPCServer}}.{{c2::set_server_title}}({{c3::server_title}})",
      "Body": "Set the title used in the generated HTML documentation. This title will be used inside the HTML title element.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocXMLRPCServer.set_server_title"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocXMLRPCServer}}.{{c2::set_server_name}}({{c3::server_name}})",
      "Body": "Set the name used in the generated HTML documentation. This name will appear at the top of the generated documentation inside a h1 element.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocXMLRPCServer.set_server_name"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocXMLRPCServer}}.{{c2::set_server_documentation}}({{c3::server_documentation}})",
      "Body": "Set the description used in the generated HTML documentation. This description will appear as a paragraph, below the server name, in the documentation.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocXMLRPCServer.set_server_documentation"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocCGIXMLRPCRequestHandler}}.{{c2::set_server_title}}({{c3::server_title}})",
      "Body": "Set the title used in the generated HTML documentation. This title will be used inside the HTML title element.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocCGIXMLRPCRequestHandler}}.{{c2::set_server_name}}({{c3::server_name}})",
      "Body": "Set the name used in the generated HTML documentation. This name will appear at the top of the generated documentation inside a h1 element.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::DocCGIXMLRPCRequestHandler}}.{{c2::set_server_documentation}}({{c3::server_documentation}})",
      "Body": "Set the description used in the generated HTML documentation. This description will appear as a paragraph, below the server name, in the documentation.",
      "Link": "https://docs.python.org/3/library/xmlrpc.server.html#xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::ip_address}}({{c3::address}})",
      "Body": "Return an IPv4Address or IPv6Address object depending on the IP address passed as argument.  Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default. A ValueError is raised if address does not represent a valid IPv4 or IPv6 address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_address"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::ip_network}}({{c3::address}}, {{c4::strict}}={{c5::True}})",
      "Body": "Return an IPv4Network or IPv6Network object depending on the IP address passed as argument.  address is a string or integer representing the IP network.  Either IPv4 or IPv6 networks may be supplied; integers less than 2**32 will be considered to be IPv4 by default.  strict is passed to IPv4Network or IPv6Network constructor.  A ValueError is raised if address does not represent a valid IPv4 or IPv6 address, or if the network has host bits set.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_network"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::ip_interface}}({{c3::address}})",
      "Body": "Return an IPv4Interface or IPv6Interface object depending on the IP address passed as argument.  address is a string or integer representing the IP address.  Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default.  A ValueError is raised if address does not represent a valid IPv4 or IPv6 address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_interface"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ipaddress}}.{{c3::IPv}}4{{c4::Address}}({{c5::address}})",
      "Body": "Construct an IPv4 address.  An AddressValueError is raised if address is not a valid IPv4 address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::version}}",
      "Body": "The appropriate version number: 4 for IPv4, 6 for IPv6.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::max_prefixlen}}",
      "Body": "The total number of bits in the address representation for this version: 32 for IPv4, 128 for IPv6.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.max_prefixlen"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::exploded}}",
      "Body": "The string representation in dotted decimal notation. Leading zeroes are never included in the representation.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.exploded"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::packed}}",
      "Body": "The binary representation of this address - a bytes object of the appropriate length (most significant octet first). This is 4 bytes for IPv4 and 16 bytes for IPv6.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.packed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::reverse_pointer}}",
      "Body": "The name of the reverse DNS PTR record for the IP address, e.g.:",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.reverse_pointer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::is_multicast}}",
      "Body": "True if the address is reserved for multicast use.  See RFC 3171 (for IPv4) or RFC 2373 (for IPv6).",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_multicast"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::is_private}}",
      "Body": "True if the address is allocated for private networks.  See iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry (for IPv6).",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_private"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::is_global}}",
      "Body": "True if the address is allocated for public networks.  See iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry (for IPv6).",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_global"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::is_unspecified}}",
      "Body": "True if the address is unspecified.  See RFC 5735 (for IPv4) or RFC 2373 (for IPv6).",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_unspecified"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::is_reserved}}",
      "Body": "True if the address is otherwise IETF reserved.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_reserved"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::is_loopback}}",
      "Body": "True if this is a loopback address.  See RFC 3330 (for IPv4) or RFC 2373 (for IPv6).",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_loopback"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Address}}.{{c4::is_link_local}}",
      "Body": "True if the address is reserved for link-local usage.  See RFC 3927.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_link_local"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ipaddress}}.{{c3::IPv}}6{{c4::Address}}({{c5::address}})",
      "Body": "Construct an IPv6 address.  An AddressValueError is raised if address is not a valid IPv6 address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Address}}.{{c4::is_link_local}}",
      "Body": "New in version 3.4: is_global",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.is_link_local"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Address}}.{{c4::is_site_local}}",
      "Body": "True if the address is reserved for site-local usage.  Note that the site-local address space has been deprecated by RFC 3879. Use is_private to test if this address is in the space of unique local addresses as defined by RFC 4193.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.is_site_local"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Address}}.{{c4::ipv}}4{{c5::_mapped}}",
      "Body": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address. For any other address, this property will be None.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.ipv4_mapped"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Address}}.{{c4::sixtofour}}",
      "Body": "For addresses that appear to be 6to4 addresses  (starting with 2002::/16) as defined by RFC 3056, this property will report the embedded IPv4 address.  For any other address, this property will be None.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.sixtofour"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Address}}.{{c4::teredo}}",
      "Body": "For addresses that appear to be Teredo addresses (starting with 2001::/32) as defined by RFC 4380, this property will report the embedded (server, client) IP address pair.  For any other address, this property will be None.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.teredo"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ipaddress}}.{{c3::IPv}}4{{c4::Network}}({{c5::address}}, {{c6::strict}}={{c7::True}})",
      "Body": "Construct an IPv4 network definition.  address can be one of the following:",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::max_prefixlen}}",
      "Body": "Refer to the corresponding attribute documentation in IPv4Address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.max_prefixlen"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::is_link_local}}",
      "Body": "These attributes are true for the network as a whole if they are true for both the network address and the broadcast address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.is_link_local"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::network_address}}",
      "Body": "The network address for the network. The network address and the prefix length together uniquely define a network.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.network_address"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::broadcast_address}}",
      "Body": "The broadcast address for the network. Packets sent to the broadcast address should be received by every host on the network.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.broadcast_address"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::hostmask}}",
      "Body": "The host mask, as an IPv4Address object.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.hostmask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::netmask}}",
      "Body": "The net mask, as an IPv4Address object.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.netmask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::exploded}}",
      "Body": "A string representation of the network, with the mask in prefix notation.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.exploded"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::with_netmask}}",
      "Body": "A string representation of the network, with the mask in net mask notation.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.with_netmask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::with_hostmask}}",
      "Body": "A string representation of the network, with the mask in host mask notation.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.with_hostmask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::num_addresses}}",
      "Body": "The total number of addresses in the network.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.num_addresses"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::prefixlen}}",
      "Body": "Length of the network prefix, in bits.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.prefixlen"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::hosts}}()",
      "Body": "Returns an iterator over the usable hosts in the network.  The usable hosts are all the IP addresses that belong to the network, except the network address itself and the network broadcast address.  For networks with a mask length of 31, the network address and network broadcast address are also included in the result.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.hosts"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::overlaps}}({{c5::other}})",
      "Body": "True if this network is partly or wholly contained in other or other is wholly contained in this network.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.overlaps"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::address_exclude}}({{c5::network}})",
      "Body": "Computes the network definitions resulting from removing the given network from this one.  Returns an iterator of network objects. Raises ValueError if network is not completely contained in this network.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.address_exclude"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::subnets}}({{c5::prefixlen_diff}}=1, {{c6::new_prefix}}={{c7::None}})",
      "Body": "The subnets that join to make the current network definition, depending on the argument values.  prefixlen_diff is the amount our prefix length should be increased by.  new_prefix is the desired new prefix of the subnets; it must be larger than our prefix.  One and only one of prefixlen_diff and new_prefix must be set.  Returns an iterator of network objects.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.subnets"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::supernet}}({{c5::prefixlen_diff}}=1, {{c6::new_prefix}}={{c7::None}})",
      "Body": "The supernet containing this network definition, depending on the argument values.  prefixlen_diff is the amount our prefix length should be decreased by.  new_prefix is the desired new prefix of the supernet; it must be smaller than our prefix.  One and only one of prefixlen_diff and new_prefix must be set.  Returns a single network object.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.supernet"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::subnet_of}}({{c5::other}})",
      "Body": "Returns True if this network is a subnet of other.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.subnet_of"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::supernet_of}}({{c5::other}})",
      "Body": "Returns True if this network is a supernet of other.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.supernet_of"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Network}}.{{c4::compare_networks}}({{c5::other}})",
      "Body": "Compare this network to other.  In this comparison only the network addresses are considered; host bits aren't.  Returns either -1, 0 or 1.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.compare_networks"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ipaddress}}.{{c3::IPv}}6{{c4::Network}}({{c5::address}}, {{c6::strict}}={{c7::True}})",
      "Body": "Construct an IPv6 network definition.  address can be one of the following:",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Network}}.{{c4::hosts}}()",
      "Body": "Returns an iterator over the usable hosts in the network.  The usable hosts are all the IP addresses that belong to the network, except the Subnet-Router anycast address.  For networks with a mask length of 127, the Subnet-Router anycast address is also included in the result.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.hosts"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Network}}.{{c4::compare_networks}}({{c5::other}})",
      "Body": "Refer to the corresponding attribute documentation in IPv4Network.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.compare_networks"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Network}}.{{c4::is_site_local}}",
      "Body": "These attribute is true for the network as a whole if it is true for both the network address and the broadcast address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.is_site_local"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ipaddress}}.{{c3::IPv}}4{{c4::Interface}}({{c5::address}})",
      "Body": "Construct an IPv4 interface.  The meaning of address is as in the constructor of IPv4Network, except that arbitrary host addresses are always accepted.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Interface}}.{{c4::ip}}",
      "Body": "The address (IPv4Address) without network information.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.ip"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Interface}}.{{c4::network}}",
      "Body": "The network (IPv4Network) this interface belongs to.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.network"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Interface}}.{{c4::with_prefixlen}}",
      "Body": "A string representation of the interface with the mask in prefix notation.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.with_prefixlen"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Interface}}.{{c4::with_netmask}}",
      "Body": "A string representation of the interface with the network as a net mask.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.with_netmask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}4{{c3::Interface}}.{{c4::with_hostmask}}",
      "Body": "A string representation of the interface with the network as a host mask.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.with_hostmask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::ipaddress}}.{{c3::IPv}}6{{c4::Interface}}({{c5::address}})",
      "Body": "Construct an IPv6 interface.  The meaning of address is as in the constructor of IPv6Network, except that arbitrary host addresses are always accepted.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::IPv}}6{{c3::Interface}}.{{c4::with_hostmask}}",
      "Body": "Refer to the corresponding attribute documentation in IPv4Interface.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface.with_hostmask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::v}}4{{c3::_int_to_packed}}({{c4::address}})",
      "Body": "Represent an address as 4 packed bytes in network (big-endian) order. address is an integer representation of an IPv4 IP address.  A ValueError is raised if the integer is negative or too large to be an IPv4 IP address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.v4_int_to_packed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::v}}6{{c3::_int_to_packed}}({{c4::address}})",
      "Body": "Represent an address as 16 packed bytes in network (big-endian) order. address is an integer representation of an IPv6 IP address.  A ValueError is raised if the integer is negative or too large to be an IPv6 IP address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.v6_int_to_packed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::summarize_address_range}}({{c3::first}}, {{c4::last}})",
      "Body": "Return an iterator of the summarized network range given the first and last IP addresses.  first is the first IPv4Address or IPv6Address in the range and last is the last IPv4Address or IPv6Address in the range.  A TypeError is raised if first or last are not IP addresses or are not of the same version.  A ValueError is raised if last is not greater than first or if first address version is not 4 or 6.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.summarize_address_range"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::collapse_addresses}}({{c3::addresses}})",
      "Body": "Return an iterator of the collapsed IPv4Network or IPv6Network objects.  addresses is an iterator of IPv4Network or IPv6Network objects.  A TypeError is raised if addresses contains mixed version objects.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.collapse_addresses"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::ipaddress}}.{{c2::get_mixed_type_key}}({{c3::obj}})",
      "Body": "Return a key suitable for sorting between networks and addresses.  Address and Network objects are not sortable by default; they're fundamentally different, so the expression:",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.get_mixed_type_key"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ipaddress}}.{{c3::AddressValueError}}({{c4::ValueError}})",
      "Body": "Any value error related to the address.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.AddressValueError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "exception",
      "Internet Protocols and Support",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::ipaddress}}.{{c3::NetmaskValueError}}({{c4::ValueError}})",
      "Body": "Any value error related to the net mask.",
      "Link": "https://docs.python.org/3/library/ipaddress.html#ipaddress.NetmaskValueError"
    },
    "modelName": "ClozePy"
  }
]
