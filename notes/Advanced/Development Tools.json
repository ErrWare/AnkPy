[
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::TypeVar}}",
      "Body": "Type variable.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.TypeVar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Generic}}",
      "Body": "Abstract base class for generic types.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Generic"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Type}}({{c4::Generic}}[{{c5::CT_co}}])",
      "Body": "A variable annotated with C may accept a value of type C. In contrast, a variable annotated with Type[C] may accept values that are classes themselves  specifically, it will accept the class object of C. For example:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Type"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Iterable}}({{c4::Generic}}[{{c5::T_co}}])",
      "Body": "A generic version of collections.abc.Iterable.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Iterable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Iterator}}({{c4::Iterable}}[{{c5::T_co}}])",
      "Body": "A generic version of collections.abc.Iterator.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Iterator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Reversible}}({{c4::Iterable}}[{{c5::T_co}}])",
      "Body": "A generic version of collections.abc.Reversible.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Reversible"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::SupportsInt}}",
      "Body": "An ABC with one abstract method __int__.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.SupportsInt"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::SupportsFloat}}",
      "Body": "An ABC with one abstract method __float__.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.SupportsFloat"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::SupportsComplex}}",
      "Body": "An ABC with one abstract method __complex__.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.SupportsComplex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::SupportsBytes}}",
      "Body": "An ABC with one abstract method __bytes__.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.SupportsBytes"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::SupportsAbs}}",
      "Body": "An ABC with one abstract method __abs__ that is covariant in its return type.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.SupportsAbs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::SupportsRound}}",
      "Body": "An ABC with one abstract method __round__ that is covariant in its return type.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.SupportsRound"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Container}}({{c4::Generic}}[{{c5::T_co}}])",
      "Body": "A generic version of collections.abc.Container.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Container"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Hashable}}",
      "Body": "An alias to collections.abc.Hashable",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Hashable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Sized}}",
      "Body": "An alias to collections.abc.Sized",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Sized"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Collection}}({{c4::Sized}}, {{c5::Iterable}}[{{c6::T_co}}], {{c7::Container}}[{{c8::T_co}}])",
      "Body": "A generic version of collections.abc.Collection",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Collection"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::AbstractSet}}({{c4::Sized}}, {{c5::Collection}}[{{c6::T_co}}])",
      "Body": "A generic version of collections.abc.Set.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.AbstractSet"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::MutableSet}}({{c4::AbstractSet}}[{{c5::T}}])",
      "Body": "A generic version of collections.abc.MutableSet.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.MutableSet"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Mapping}}({{c4::Sized}}, {{c5::Collection}}[{{c6::KT}}], {{c7::Generic}}[{{c8::VT_co}}])",
      "Body": "A generic version of collections.abc.Mapping.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Mapping"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::MutableMapping}}({{c4::Mapping}}[{{c5::KT}}, {{c6::VT}}])",
      "Body": "A generic version of collections.abc.MutableMapping.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.MutableMapping"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Sequence}}({{c4::Reversible}}[{{c5::T_co}}], {{c6::Collection}}[{{c7::T_co}}])",
      "Body": "A generic version of collections.abc.Sequence.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Sequence"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::MutableSequence}}({{c4::Sequence}}[{{c5::T}}])",
      "Body": "A generic version of collections.abc.MutableSequence.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.MutableSequence"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::ByteString}}({{c4::Sequence}}[{{c5::int}}])",
      "Body": "A generic version of collections.abc.ByteString.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.ByteString"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Deque}}({{c4::deque}}, {{c5::MutableSequence}}[{{c6::T}}])",
      "Body": "A generic version of collections.deque.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Deque"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::List}}({{c4::list}}, {{c5::MutableSequence}}[{{c6::T}}])",
      "Body": "Generic version of list. Useful for annotating return types. To annotate arguments it is preferred to use abstract collection types such as Mapping, Sequence, or AbstractSet.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.List"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Set}}({{c4::set}}, {{c5::MutableSet}}[{{c6::T}}])",
      "Body": "A generic version of builtins.set.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Set"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::FrozenSet}}({{c4::frozenset}}, {{c5::AbstractSet}}[{{c6::T_co}}])",
      "Body": "A generic version of builtins.frozenset.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.FrozenSet"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::MappingView}}({{c4::Sized}}, {{c5::Iterable}}[{{c6::T_co}}])",
      "Body": "A generic version of collections.abc.MappingView.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.MappingView"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::KeysView}}({{c4::MappingView}}[{{c5::KT_co}}], {{c6::AbstractSet}}[{{c7::KT_co}}])",
      "Body": "A generic version of collections.abc.KeysView.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.KeysView"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::ItemsView}}({{c4::MappingView}}, {{c5::Generic}}[{{c6::KT_co}}, {{c7::VT_co}}])",
      "Body": "A generic version of collections.abc.ItemsView.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.ItemsView"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::ValuesView}}({{c4::MappingView}}[{{c5::VT_co}}])",
      "Body": "A generic version of collections.abc.ValuesView.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.ValuesView"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Awaitable}}({{c4::Generic}}[{{c5::T_co}}])",
      "Body": "A generic version of collections.abc.Awaitable.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Awaitable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Coroutine}}({{c4::Awaitable}}[{{c5::V_co}}], {{c6::Generic}}[{{c7::T_co}} {{c8::T_contra}}, {{c9::V_co}}])",
      "Body": "A generic version of collections.abc.Coroutine. The variance and order of type variables correspond to those of Generator, for example:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Coroutine"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::AsyncIterable}}({{c4::Generic}}[{{c5::T_co}}])",
      "Body": "A generic version of collections.abc.AsyncIterable.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.AsyncIterable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::AsyncIterator}}({{c4::AsyncIterable}}[{{c5::T_co}}])",
      "Body": "A generic version of collections.abc.AsyncIterator.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.AsyncIterator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::ContextManager}}({{c4::Generic}}[{{c5::T_co}}])",
      "Body": "A generic version of contextlib.AbstractContextManager.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.ContextManager"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::AsyncContextManager}}({{c4::Generic}}[{{c5::T_co}}])",
      "Body": "A generic version of contextlib.AbstractAsyncContextManager.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.AsyncContextManager"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Dict}}({{c4::dict}}, {{c5::MutableMapping}}[{{c6::KT}}, {{c7::VT}}])",
      "Body": "A generic version of dict. The usage of this type is as follows:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Dict"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::DefaultDict}}({{c4::collections}}.{{c5::defaultdict}}, {{c6::MutableMapping}}[{{c7::KT}}, {{c8::VT}}])",
      "Body": "A generic version of collections.defaultdict.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.DefaultDict"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Counter}}({{c4::collections}}.{{c5::Counter}}, {{c6::Dict}}[{{c7::T}}, {{c8::int}}])",
      "Body": "A generic version of collections.Counter.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Counter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::ChainMap}}({{c4::collections}}.{{c5::ChainMap}}, {{c6::MutableMapping}}[{{c7::KT}}, {{c8::VT}}])",
      "Body": "A generic version of collections.ChainMap.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.ChainMap"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Generator}}({{c4::Iterator}}[{{c5::T_co}}], {{c6::Generic}}[{{c7::T_co}}, {{c8::T_contra}}, {{c9::V_co}}])",
      "Body": "A generator can be annotated by the generic type Generator[YieldType, SendType, ReturnType]. For example:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Generator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::AsyncGenerator}}({{c4::AsyncIterator}}[{{c5::T_co}}], {{c6::Generic}}[{{c7::T_co}}, {{c8::T_contra}}])",
      "Body": "An async generator can be annotated by the generic type AsyncGenerator[YieldType, SendType]. For example:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.AsyncGenerator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::Text}}",
      "Body": "Text is an alias for str. It is provided to supply a forward compatible path for Python 2 code: in Python 2, Text is an alias for unicode.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Text"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::io}}",
      "Body": "Wrapper namespace for I/O stream types.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.io"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::re}}",
      "Body": "Wrapper namespace for regular expression matching types.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.re"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::typing}}.{{c3::NamedTuple}}",
      "Body": "Typed version of namedtuple.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.NamedTuple"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::NewType}}({{c3::typ}})",
      "Body": "A helper function to indicate a distinct types to a typechecker, see NewType. At runtime it returns a function that returns its argument. Usage:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.NewType"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::cast}}({{c3::typ}}, {{c4::val}})",
      "Body": "Cast a value to a type.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.cast"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::get_type_hints}}({{c3::obj}}[, {{c4::globals}}[, {{c5::locals}}]])",
      "Body": "Return a dictionary containing type hints for a function, method, module or class object.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.get_type_hints"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::typing}}.{{c2::overload}}",
      "Body": "The @overload decorator allows describing functions and methods that support multiple different combinations of argument types. A series of @overload-decorated definitions must be followed by exactly one non-@overload-decorated definition (for the same function/method). The @overload-decorated definitions are for the benefit of the type checker only, since they will be overwritten by the non-@overload-decorated definition, while the latter is used at runtime but should be ignored by a type checker.  At runtime, calling a @overload-decorated function directly will raise NotImplementedError. An example of overload that gives a more precise type than can be expressed using a union or a type variable:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.overload"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::typing}}.{{c2::no_type_check}}",
      "Body": "Decorator to indicate that annotations are not type hints.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.no_type_check"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::typing}}.{{c2::no_type_check_decorator}}",
      "Body": "Decorator to give another decorator the no_type_check() effect.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.no_type_check_decorator"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::Any}}",
      "Body": "Special type indicating an unconstrained type.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Any"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::NoReturn}}",
      "Body": "Special type indicating that a function never returns. For example:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.NoReturn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::Union}}",
      "Body": "Union type; Union[X, Y] means either X or Y.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Union"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::Optional}}",
      "Body": "Optional type.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Optional"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::Tuple}}",
      "Body": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Tuple"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::Callable}}",
      "Body": "Callable type; Callable[[int], str] is a function of (int) -> str.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.Callable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::ClassVar}}",
      "Body": "Special type construct to mark class variables.",
      "Link": "https://docs.python.org/3/library/typing.html#typing.ClassVar"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::AnyStr}}",
      "Body": "AnyStr is a type variable defined as AnyStr = TypeVar('AnyStr', str, bytes).",
      "Link": "https://docs.python.org/3/library/typing.html#typing.AnyStr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::typing}}.{{c2::TYPE_CHECKING}}",
      "Body": "A special constant that is assumed to be True by 3rd party static type checkers. It is False at runtime. Usage:",
      "Link": "https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DONT_ACCEPT_TRUE_FOR_}}1",
      "Body": "By default, if an expected output block contains just 1, an actual output block containing just 1 or just True is considered to be a match, and similarly for 0 versus False.  When DONT_ACCEPT_TRUE_FOR_1 is specified, neither substitution is allowed.  The default behavior caters to that Python changed the return type of many functions from integer to boolean; doctests expecting little integer output still work in these cases.  This option will probably go away, but not for several years.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DONT_ACCEPT_TRUE_FOR_1"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DONT_ACCEPT_BLANKLINE}}",
      "Body": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.  Because a genuinely blank line delimits the expected output, this is the only way to communicate that a blank line is expected.  When DONT_ACCEPT_BLANKLINE is specified, this substitution is not allowed.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DONT_ACCEPT_BLANKLINE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::NORMALIZE_WHITESPACE}}",
      "Body": "When specified, all sequences of whitespace (blanks and newlines) are treated as equal.  Any sequence of whitespace within the expected output will match any sequence of whitespace within the actual output. By default, whitespace must match exactly. NORMALIZE_WHITESPACE is especially useful when a line of expected output is very long, and you want to wrap it across multiple lines in your source.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.NORMALIZE_WHITESPACE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::ELLIPSIS}}",
      "Body": "When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.  This includes substrings that span line boundaries, and empty substrings, so it's best to keep usage of this simple. Complicated uses can lead to the same kinds of oops, it matched too much! surprises that .* is prone to in regular expressions.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.ELLIPSIS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::IGNORE_EXCEPTION_DETAIL}}",
      "Body": "When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.  For example, an example expecting ValueError: 42 will pass if the actual exception raised is ValueError: 3*14, but will fail, e.g., if TypeError is raised.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.IGNORE_EXCEPTION_DETAIL"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::SKIP}}",
      "Body": "When specified, do not run the example at all.  This can be useful in contexts where doctest examples serve as both documentation and test cases, and an example should be included for documentation purposes, but should not be checked.  E.g., the example's output might be random; or the example might depend on resources which would be unavailable to the test driver.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.SKIP"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::COMPARISON_FLAGS}}",
      "Body": "A bitmask or'ing together all the comparison flags above.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.COMPARISON_FLAGS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::REPORT_UDIFF}}",
      "Body": "When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.REPORT_UDIFF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::REPORT_CDIFF}}",
      "Body": "When specified, failures that involve multi-line expected and actual outputs will be displayed using a context diff.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.REPORT_CDIFF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::REPORT_NDIFF}}",
      "Body": "When specified, differences are computed by difflib.Differ, using the same algorithm as the popular ndiff.py utility. This is the only method that marks differences within lines as well as across lines.  For example, if a line of expected output contains digit 1 where actual output contains letter l, a line is inserted with a caret marking the mismatching column positions.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.REPORT_NDIFF"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::REPORT_ONLY_FIRST_FAILURE}}",
      "Body": "When specified, display the first failing example in each doctest, but suppress output for all remaining examples.  This will prevent doctest from reporting correct examples that break because of earlier failures; but it might also hide incorrect examples that fail independently of the first failure.  When REPORT_ONLY_FIRST_FAILURE is specified, the remaining examples are still run, and still count towards the total number of failures reported; only the output is suppressed.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.REPORT_ONLY_FIRST_FAILURE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::FAIL_FAST}}",
      "Body": "When specified, exit after the first failing example and don't attempt to run the remaining examples. Thus, the number of failures reported will be at most 1.  This flag may be useful during debugging, since examples after the first failure won't even produce debugging output.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.FAIL_FAST"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::REPORTING_FLAGS}}",
      "Body": "A bitmask or'ing together all the reporting flags above.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.REPORTING_FLAGS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::register_optionflag}}({{c3::name}})",
      "Body": "Create a new option flag with a given name, and return the new flag's integer value.  register_optionflag() can be used when subclassing OutputChecker or DocTestRunner to create new options that are supported by your subclasses.  register_optionflag() should always be called using the following idiom:",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.register_optionflag"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::testfile}}({{c3::filename}}, {{c4::module_relative}}={{c5::True}}, {{c6::name}}={{c7::None}}, {{c8::package}}={{c9::None}}, {{c10::globs}}={{c11::None}}, {{c12::verbose}}={{c13::None}}, {{c14::report}}={{c15::True}}, {{c16::optionflags}}=0, {{c17::extraglobs}}={{c18::None}}, {{c19::raise_on_error}}={{c20::False}}, {{c21::parser}}={{c22::DocTestParser}}(), {{c23::encoding}}={{c24::None}})",
      "Body": "All arguments except filename are optional, and should be specified in keyword form.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.testfile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::testmod}}({{c3::m}}={{c4::None}}, {{c5::name}}={{c6::None}}, {{c7::globs}}={{c8::None}}, {{c9::verbose}}={{c10::None}}, {{c11::report}}={{c12::True}}, {{c13::optionflags}}=0, {{c14::extraglobs}}={{c15::None}}, {{c16::raise_on_error}}={{c17::False}}, {{c18::exclude_empty}}={{c19::False}})",
      "Body": "All arguments are optional, and all except for m should be specified in keyword form.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.testmod"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::run_docstring_examples}}({{c3::f}}, {{c4::globs}}, {{c5::verbose}}={{c6::False}}, {{c7::name}}=\"{{c8::NoName}}\", {{c9::compileflags}}={{c10::None}}, {{c11::optionflags}}=0)",
      "Body": "Test examples associated with object f; for example, f may be a string, a module, a function, or a class object.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.run_docstring_examples"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocFileSuite}}(*paths, {{c3::module_relative}}={{c4::True}}, {{c5::package}}={{c6::None}}, {{c7::setUp}}={{c8::None}}, {{c9::tearDown}}={{c10::None}}, {{c11::globs}}={{c12::None}}, {{c13::optionflags}}=0, {{c14::parser}}={{c15::DocTestParser}}(), {{c16::encoding}}={{c17::None}})",
      "Body": "Convert doctest tests from one or more text files to a unittest.TestSuite.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocFileSuite"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestSuite}}({{c3::module}}={{c4::None}}, {{c5::globs}}={{c6::None}}, {{c7::extraglobs}}={{c8::None}}, {{c9::test_finder}}={{c10::None}}, {{c11::setUp}}={{c12::None}}, {{c13::tearDown}}={{c14::None}}, {{c15::checker}}={{c16::None}})",
      "Body": "Convert doctest tests for a module to a unittest.TestSuite.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestSuite"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::set_unittest_reportflags}}({{c3::flags}})",
      "Body": "Set the doctest reporting flags to use.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.set_unittest_reportflags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::doctest}}.{{c3::DocTest}}({{c4::examples}}, {{c5::globs}}, {{c6::name}}, {{c7::filename}}, {{c8::lineno}}, {{c9::docstring}})",
      "Body": "A collection of doctest examples that should be run in a single namespace.  The constructor arguments are used to initialize the attributes of the same names.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTest}}.{{c3::examples}}",
      "Body": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTest.examples"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTest}}.{{c3::globs}}",
      "Body": "The namespace (aka globals) that the examples should be run in. This is a dictionary mapping names to values.  Any changes to the namespace made by the examples (such as binding new variables) will be reflected in globs after the test is run.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTest.globs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTest}}.{{c3::name}}",
      "Body": "A string name identifying the DocTest.  Typically, this is the name of the object or file that the test was extracted from.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTest.name"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTest}}.{{c3::filename}}",
      "Body": "The name of the file that this DocTest was extracted from; or None if the filename is unknown, or if the DocTest was not extracted from a file.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTest.filename"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTest}}.{{c3::lineno}}",
      "Body": "The line number within filename where this DocTest begins, or None if the line number is unavailable.  This line number is zero-based with respect to the beginning of the file.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTest.lineno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTest}}.{{c3::docstring}}",
      "Body": "The string that the test was extracted from, or None if the string is unavailable, or if the test was not extracted from a string.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTest.docstring"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::doctest}}.{{c3::Example}}({{c4::source}}, {{c5::want}}, {{c6::exc_msg}}={{c7::None}}, {{c8::lineno}}=0, {{c9::indent}}=0, {{c10::options}}={{c11::None}})",
      "Body": "A single interactive example, consisting of a Python statement and its expected output.  The constructor arguments are used to initialize the attributes of the same names.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.Example"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::Example}}.{{c3::source}}",
      "Body": "A string containing the example's source code.  This source code consists of a single Python statement, and always ends with a newline; the constructor adds a newline when necessary.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.Example.source"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::Example}}.{{c3::want}}",
      "Body": "The expected output from running the example's source code (either from stdout, or a traceback in case of exception).  want ends with a newline unless no output is expected, in which case it's an empty string.  The constructor adds a newline when necessary.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.Example.want"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::Example}}.{{c3::exc_msg}}",
      "Body": "The exception message generated by the example, if the example is expected to generate an exception; or None if it is not expected to generate an exception.  This exception message is compared against the return value of traceback.format_exception_only().  exc_msg ends with a newline unless it's None.  The constructor adds a newline if needed.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.Example.exc_msg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::Example}}.{{c3::lineno}}",
      "Body": "The line number within the string containing this example where the example begins.  This line number is zero-based with respect to the beginning of the containing string.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.Example.lineno"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::Example}}.{{c3::indent}}",
      "Body": "The example's indentation in the containing string, i.e., the number of space characters that precede the example's first prompt.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.Example.indent"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::Example}}.{{c3::options}}",
      "Body": "A dictionary mapping from option flags to True or False, which is used to override default options for this example.  Any option flags not contained in this dictionary are left at their default value (as specified by the DocTestRunner's optionflags). By default, no options are set.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.Example.options"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::doctest}}.{{c3::DocTestFinder}}({{c4::verbose}}={{c5::False}}, {{c6::parser}}={{c7::DocTestParser}}(), {{c8::recurse}}={{c9::True}}, {{c10::exclude_empty}}={{c11::True}})",
      "Body": "A processing class used to extract the DocTests that are relevant to a given object, from its docstring and the docstrings of its contained objects. DocTests can be extracted from modules, classes, functions, methods, staticmethods, classmethods, and properties.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestFinder"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestFinder}}.{{c3::find}}({{c4::obj}}[, {{c5::name}}][, {{c6::module}}][, {{c7::globs}}][, {{c8::extraglobs}}])",
      "Body": "Return a list of the DocTests that are defined by obj's docstring, or by any of its contained objects' docstrings.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestFinder.find"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::doctest}}.{{c3::DocTestParser}}",
      "Body": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestParser"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestParser}}.{{c3::get_doctest}}({{c4::string}}, {{c5::globs}}, {{c6::name}}, {{c7::filename}}, {{c8::lineno}})",
      "Body": "Extract all doctest examples from the given string, and collect them into a DocTest object.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestParser.get_doctest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestParser}}.{{c3::get_examples}}({{c4::string}}, {{c5::name}}='<{{c6::string}}>')",
      "Body": "Extract all doctest examples from the given string, and return them as a list of Example objects.  Line numbers are 0-based.  The optional argument name is a name identifying this string, and is only used for error messages.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestParser.get_examples"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestParser}}.{{c3::parse}}({{c4::string}}, {{c5::name}}='<{{c6::string}}>')",
      "Body": "Divide the given string into examples and intervening text, and return them as a list of alternating Examples and strings. Line numbers for the Examples are 0-based.  The optional argument name is a name identifying this string, and is only used for error messages.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestParser.parse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::doctest}}.{{c3::DocTestRunner}}({{c4::checker}}={{c5::None}}, {{c6::verbose}}={{c7::None}}, {{c8::optionflags}}=0)",
      "Body": "A processing class used to execute and verify the interactive examples in a DocTest.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestRunner}}.{{c3::report_start}}({{c4::out}}, {{c5::test}}, {{c6::example}})",
      "Body": "Report that the test runner is about to process the given example. This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner.report_start"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestRunner}}.{{c3::report_success}}({{c4::out}}, {{c5::test}}, {{c6::example}}, {{c7::got}})",
      "Body": "Report that the given example ran successfully.  This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner.report_success"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestRunner}}.{{c3::report_failure}}({{c4::out}}, {{c5::test}}, {{c6::example}}, {{c7::got}})",
      "Body": "Report that the given example failed.  This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner.report_failure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestRunner}}.{{c3::report_unexpected_exception}}({{c4::out}}, {{c5::test}}, {{c6::example}}, {{c7::exc_info}})",
      "Body": "Report that the given example raised an unexpected exception. This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner.report_unexpected_exception"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestRunner}}.{{c3::run}}({{c4::test}}, {{c5::compileflags}}={{c6::None}}, {{c7::out}}={{c8::None}}, {{c9::clear_globs}}={{c10::True}})",
      "Body": "Run the examples in test (a DocTest object), and display the results using the writer function out.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner.run"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::DocTestRunner}}.{{c3::summarize}}({{c4::verbose}}={{c5::None}})",
      "Body": "Print a summary of all the test cases that have been run by this DocTestRunner, and return a named tuple TestResults(failed, attempted).",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner.summarize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::doctest}}.{{c3::OutputChecker}}",
      "Body": "A class used to check the whether the actual output from a doctest example matches the expected output.  OutputChecker defines two methods: check_output(), which compares a given pair of outputs, and returns true if they match; and output_difference(), which returns a string describing the differences between two outputs.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.OutputChecker"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::OutputChecker}}.{{c3::check_output}}({{c4::want}}, {{c5::got}}, {{c6::optionflags}})",
      "Body": "Return True iff the actual output from an example (got) matches the expected output (want).  These strings are always considered to match if they are identical; but depending on what option flags the test runner is using, several non-exact match types are also possible.  See section Option Flags for more information about option flags.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.OutputChecker.check_output"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::OutputChecker}}.{{c3::output_difference}}({{c4::example}}, {{c5::got}}, {{c6::optionflags}})",
      "Body": "Return a string describing the differences between the expected output for a given example (example) and the actual output (got).  optionflags is the set of option flags used to compare want and got.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.OutputChecker.output_difference"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::script_from_examples}}({{c3::s}})",
      "Body": "Convert text with examples to a script.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.script_from_examples"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::testsource}}({{c3::module}}, {{c4::name}})",
      "Body": "Convert the doctest for an object to a script.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.testsource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::debug}}({{c3::module}}, {{c4::name}}, {{c5::pm}}={{c6::False}})",
      "Body": "Debug the doctests for an object.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.debug"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::doctest}}.{{c2::debug_src}}({{c3::src}}, {{c4::pm}}={{c5::False}}, {{c6::globs}}={{c7::None}})",
      "Body": "Debug the doctests in a string.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.debug_src"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::doctest}}.{{c3::DebugRunner}}({{c4::checker}}={{c5::None}}, {{c6::verbose}}={{c7::None}}, {{c8::optionflags}}=0)",
      "Body": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered.  If an unexpected exception occurs, an UnexpectedException exception is raised, containing the test, the example, and the original exception.  If the output doesn't match, then a DocTestFailure exception is raised, containing the test, the example, and the actual output.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DebugRunner"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::doctest}}.{{c3::DocTestFailure}}({{c4::test}}, {{c5::example}}, {{c6::got}})",
      "Body": "An exception raised by DocTestRunner to signal that a doctest example's actual output did not match its expected output. The constructor arguments are used to initialize the attributes of the same names.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestFailure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::DocTestFailure}}.{{c2::test}}",
      "Body": "The DocTest object that was being run when the example failed.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestFailure.test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::DocTestFailure}}.{{c2::example}}",
      "Body": "The Example that failed.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestFailure.example"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::DocTestFailure}}.{{c2::got}}",
      "Body": "The example's actual output.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.DocTestFailure.got"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::doctest}}.{{c3::UnexpectedException}}({{c4::test}}, {{c5::example}}, {{c6::exc_info}})",
      "Body": "An exception raised by DocTestRunner to signal that a doctest example raised an unexpected exception.  The constructor arguments are used to initialize the attributes of the same names.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.UnexpectedException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::UnexpectedException}}.{{c2::test}}",
      "Body": "The DocTest object that was being run when the example failed.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.UnexpectedException.test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::UnexpectedException}}.{{c2::example}}",
      "Body": "The Example that failed.",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.UnexpectedException.example"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::UnexpectedException}}.{{c2::exc_info}}",
      "Body": "A tuple containing information about the unexpected exception, as returned by sys.exc_info().",
      "Link": "https://docs.python.org/3/library/doctest.html#doctest.UnexpectedException.exc_info"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "-{{c1::b}}, --{{c2::buffer}}",
      "Body": "The standard output and standard error streams are buffered during the test run. Output during a passing test is discarded. Output is echoed normally on test fail or error and is added to the failure messages.",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-b"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "-{{c1::c}}, --{{c2::catch}}",
      "Body": "Control-C during the test run waits for the current test to end and then reports all the results so far. A second Control-C raises the normal KeyboardInterrupt exception.",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-c"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "-{{c1::f}}, --{{c2::failfast}}",
      "Body": "Stop the test run on the first error or failure.",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-f"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "-{{c1::k}}",
      "Body": "Only run test methods and classes that match the pattern or substring. This option may be used multiple times, in which case all test cases that match of the given patterns are included.",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-k"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "--{{c1::locals}}",
      "Body": "Show local variables in tracebacks.",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-locals"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "-{{c1::v}}, --{{c2::verbose}}",
      "Body": "Verbose output",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-discover-v"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "-{{c1::s}}, --{{c2::start}}-{{c3::directory}} {{c4::directory}}",
      "Body": "Directory to start discovery (. default)",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-discover-s"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "-{{c1::p}}, --{{c2::pattern}} {{c3::pattern}}",
      "Body": "Pattern to match test files (test*.py default)",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-discover-p"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["cmdoption", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "-{{c1::t}}, --{{c2::top}}-{{c3::level}}-{{c4::directory}} {{c5::directory}}",
      "Body": "Top level directory of project (defaults to start directory)",
      "Link": "https://docs.python.org/3/library/unittest.html#cmdoption-unittest-discover-t"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::unittest}}.{{c2::skip}}({{c3::reason}})",
      "Body": "Unconditionally skip the decorated test.  reason should describe why the test is being skipped.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.skip"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::unittest}}.{{c2::skipIf}}({{c3::condition}}, {{c4::reason}})",
      "Body": "Skip the decorated test if condition is true.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.skipIf"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::unittest}}.{{c2::skipUnless}}({{c3::condition}}, {{c4::reason}})",
      "Body": "Skip the decorated test unless condition is true.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.skipUnless"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::unittest}}.{{c2::expectedFailure}}",
      "Body": "Mark the test as an expected failure.  If the test fails when run, the test is not counted as a failure.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.expectedFailure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::unittest}}.{{c3::SkipTest}}({{c4::reason}})",
      "Body": "This exception is raised to skip a test.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.SkipTest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::TestCase}}({{c4::methodName}}='{{c5::runTest}}')",
      "Body": "Instances of the TestCase class represent the logical test units in the unittest universe.  This class is intended to be used as a base class, with specific tests being implemented by concrete subclasses.  This class implements the interface needed by the test runner to allow it to drive the tests, and methods that the test code can use to check for and report various kinds of failure.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::setUp}}()",
      "Body": "Method called to prepare the test fixture.  This is called immediately before calling the test method; other than AssertionError or SkipTest, any exception raised by this method will be considered an error rather than a test failure. The default implementation does nothing.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::tearDown}}()",
      "Body": "Method called immediately after the test method has been called and the result recorded.  This is called even if the test method raised an exception, so the implementation in subclasses may need to be particularly careful about checking internal state.  Any exception, other than AssertionError or SkipTest, raised by this method will be considered an additional error rather than a test failure (thus increasing the total number of reported errors). This method will only be called if the setUp() succeeds, regardless of the outcome of the test method. The default implementation does nothing.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::setUpClass}}()",
      "Body": "A class method called before tests in an individual class are run. setUpClass is called with the class as the only argument and must be decorated as a classmethod():",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUpClass"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::tearDownClass}}()",
      "Body": "A class method called after tests in an individual class have run. tearDownClass is called with the class as the only argument and must be decorated as a classmethod():",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDownClass"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::run}}({{c4::result}}={{c5::None}})",
      "Body": "Run the test, collecting the result into the TestResult object passed as result.  If result is omitted or None, a temporary result object is created (by calling the defaultTestResult() method) and used. The result object is returned to run()'s caller.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.run"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::skipTest}}({{c4::reason}})",
      "Body": "Calling this during a test method or setUp() skips the current test.  See Skipping tests and expected failures for more information.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.skipTest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::subTest}}({{c4::msg}}={{c5::None}}, **params)",
      "Body": "Return a context manager which executes the enclosed code block as a subtest.  msg and params are optional, arbitrary values which are displayed whenever a subtest fails, allowing you to identify them clearly.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.subTest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::debug}}()",
      "Body": "Run the test without collecting the result.  This allows exceptions raised by the test to be propagated to the caller, and can be used to support running tests under a debugger.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first and second are equal.  If the values do not compare equal, the test will fail.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertNotEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first and second are not equal.  If the values do compare equal, the test will fail.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertTrue}}({{c4::expr}}, {{c5::msg}}={{c6::None}})",
      "Body": "Test that expr is true (or false).",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertFalse}}({{c4::expr}}, {{c5::msg}}={{c6::None}})",
      "Body": "Test that expr is true (or false).",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertFalse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertIs}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first and second evaluate (or don't evaluate) to the same object.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertIsNot}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first and second evaluate (or don't evaluate) to the same object.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNot"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertIsNone}}({{c4::expr}}, {{c5::msg}}={{c6::None}})",
      "Body": "Test that expr is (or is not) None.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNone"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertIsNotNone}}({{c4::expr}}, {{c5::msg}}={{c6::None}})",
      "Body": "Test that expr is (or is not) None.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNotNone"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertIn}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first is (or is not) in second.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertNotIn}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first is (or is not) in second.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIn"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertIsInstance}}({{c4::obj}}, {{c5::cls}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that obj is (or is not) an instance of cls (which can be a class or a tuple of classes, as supported by isinstance()). To check for the exact type, use assertIs(type(obj), cls).",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsInstance"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertNotIsInstance}}({{c4::obj}}, {{c5::cls}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that obj is (or is not) an instance of cls (which can be a class or a tuple of classes, as supported by isinstance()). To check for the exact type, use assertIs(type(obj), cls).",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIsInstance"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertRaises}}({{c4::exception}}, {{c5::callable}}, *args, **kwds)",
      "Body": "Test that an exception is raised when callable is called with any positional or keyword arguments that are also passed to assertRaises().  The test passes if exception is raised, is an error if another exception is raised, or fails if no exception is raised. To catch any of a group of exceptions, a tuple containing the exception classes may be passed as exception.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::assertRaises}}({{c2::exception}}, *, {{c3::msg}}={{c4::None}})",
      "Body": "Test that an exception is raised when callable is called with any positional or keyword arguments that are also passed to assertRaises().  The test passes if exception is raised, is an error if another exception is raised, or fails if no exception is raised. To catch any of a group of exceptions, a tuple containing the exception classes may be passed as exception.",
      "Link": "https://docs.python.org/3/library/unittest.html#test-cases"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertRaisesRegex}}({{c4::exception}}, {{c5::regex}}, {{c6::callable}}, *args, **kwds)",
      "Body": "Like assertRaises() but also tests that regex matches on the string representation of the raised exception.  regex may be a regular expression object or a string containing a regular expression suitable for use by re.search().  Examples:",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::assertRaisesRegex}}({{c2::exception}}, {{c3::regex}}, *, {{c4::msg}}={{c5::None}})",
      "Body": "Like assertRaises() but also tests that regex matches on the string representation of the raised exception.  regex may be a regular expression object or a string containing a regular expression suitable for use by re.search().  Examples:",
      "Link": "https://docs.python.org/3/library/unittest.html#test-cases"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertWarns}}({{c4::warning}}, {{c5::callable}}, *args, **kwds)",
      "Body": "Test that a warning is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns().  The test passes if warning is triggered and fails if it isn't.  Any exception is an error. To catch any of a group of warnings, a tuple containing the warning classes may be passed as warnings.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarns"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::assertWarns}}({{c2::warning}}, *, {{c3::msg}}={{c4::None}})",
      "Body": "Test that a warning is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns().  The test passes if warning is triggered and fails if it isn't.  Any exception is an error. To catch any of a group of warnings, a tuple containing the warning classes may be passed as warnings.",
      "Link": "https://docs.python.org/3/library/unittest.html#test-cases"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertWarnsRegex}}({{c4::warning}}, {{c5::regex}}, {{c6::callable}}, *args, **kwds)",
      "Body": "Like assertWarns() but also tests that regex matches on the message of the triggered warning.  regex may be a regular expression object or a string containing a regular expression suitable for use by re.search().  Example:",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::assertWarnsRegex}}({{c2::warning}}, {{c3::regex}}, *, {{c4::msg}}={{c5::None}})",
      "Body": "Like assertWarns() but also tests that regex matches on the message of the triggered warning.  regex may be a regular expression object or a string containing a regular expression suitable for use by re.search().  Example:",
      "Link": "https://docs.python.org/3/library/unittest.html#test-cases"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertLogs}}({{c4::logger}}={{c5::None}}, {{c6::level}}={{c7::None}})",
      "Body": "A context manager to test that at least one message is logged on the logger or one of its children, with at least the given level.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLogs"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::records}}",
      "Body": "A list of logging.LogRecord objects of the matching log messages.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.records"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::output}}",
      "Body": "A list of str objects with the formatted output of matching messages.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.output"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertAlmostEqual}}({{c4::first}}, {{c5::second}}, {{c6::places}}=7, {{c7::msg}}={{c8::None}}, {{c9::delta}}={{c10::None}})",
      "Body": "Test that first and second are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal places (default 7), and comparing to zero.  Note that these methods round the values to the given number of decimal places (i.e. like the round() function) and not significant digits.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertNotAlmostEqual}}({{c4::first}}, {{c5::second}}, {{c6::places}}=7, {{c7::msg}}={{c8::None}}, {{c9::delta}}={{c10::None}})",
      "Body": "Test that first and second are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal places (default 7), and comparing to zero.  Note that these methods round the values to the given number of decimal places (i.e. like the round() function) and not significant digits.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotAlmostEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertGreater}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first is respectively >, >=, < or <= than second depending on the method name.  If not, the test will fail:",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreater"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertGreaterEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first is respectively >, >=, < or <= than second depending on the method name.  If not, the test will fail:",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreaterEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertLess}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first is respectively >, >=, < or <= than second depending on the method name.  If not, the test will fail:",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLess"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertLessEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that first is respectively >, >=, < or <= than second depending on the method name.  If not, the test will fail:",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLessEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertRegex}}({{c4::text}}, {{c5::regex}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that a regex search matches (or does not match) text.  In case of failure, the error message will include the pattern and the text (or the pattern and the part of text that unexpectedly matched).  regex may be a regular expression object or a string containing a regular expression suitable for use by re.search().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertNotRegex}}({{c4::text}}, {{c5::regex}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that a regex search matches (or does not match) text.  In case of failure, the error message will include the pattern and the text (or the pattern and the part of text that unexpectedly matched).  regex may be a regular expression object or a string containing a regular expression suitable for use by re.search().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotRegex"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertCountEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that sequence first contains the same elements as second, regardless of their order. When they don't, an error message listing the differences between the sequences will be generated.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertCountEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::addTypeEqualityFunc}}({{c4::typeobj}}, {{c5::function}})",
      "Body": "Registers a type-specific method called by assertEqual() to check if two objects of exactly the same typeobj (not subclasses) compare equal.  function must take two positional arguments and a third msg=None keyword argument just as assertEqual() does.  It must raise self.failureException(msg) when inequality between the first two parameters is detected  possibly providing useful information and explaining the inequalities in details in the error message.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.addTypeEqualityFunc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertMultiLineEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that the multiline string first is equal to the string second. When not equal a diff of the two strings highlighting the differences will be included in the error message. This method is used by default when comparing strings with assertEqual().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertMultiLineEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertSequenceEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}}, {{c8::seq_type}}={{c9::None}})",
      "Body": "Tests that two sequences are equal.  If a seq_type is supplied, both first and second must be instances of seq_type or a failure will be raised.  If the sequences are different an error message is constructed that shows the difference between the two.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSequenceEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertListEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Tests that two lists or tuples are equal.  If not, an error message is constructed that shows only the differences between the two.  An error is also raised if either of the parameters are of the wrong type. These methods are used by default when comparing lists or tuples with assertEqual().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertListEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertTupleEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Tests that two lists or tuples are equal.  If not, an error message is constructed that shows only the differences between the two.  An error is also raised if either of the parameters are of the wrong type. These methods are used by default when comparing lists or tuples with assertEqual().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTupleEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertSetEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Tests that two sets are equal.  If not, an error message is constructed that lists the differences between the sets.  This method is used by default when comparing sets or frozensets with assertEqual().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSetEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::assertDictEqual}}({{c4::first}}, {{c5::second}}, {{c6::msg}}={{c7::None}})",
      "Body": "Test that two dictionaries are equal.  If not, an error message is constructed that shows the differences in the dictionaries. This method will be used by default to compare dictionaries in calls to assertEqual().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertDictEqual"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::fail}}({{c4::msg}}={{c5::None}})",
      "Body": "Signals a test failure unconditionally, with msg or None for the error message.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.fail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::failureException}}",
      "Body": "This class attribute gives the exception raised by the test method.  If a test framework needs to use a specialized exception, possibly to carry additional information, it must subclass this exception in order to play fair with the framework.  The initial value of this attribute is AssertionError.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.failureException"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::longMessage}}",
      "Body": "This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails. True is the default value. In this case, the custom message is appended to the end of the standard failure message. When set to False, the custom message replaces the standard message.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.longMessage"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::maxDiff}}",
      "Body": "This attribute controls the maximum length of diffs output by assert methods that report diffs on failure. It defaults to 80*8 characters. Assert methods affected by this attribute are assertSequenceEqual() (including all the sequence comparison methods that delegate to it), assertDictEqual() and assertMultiLineEqual().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.maxDiff"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::countTestCases}}()",
      "Body": "Return the number of tests represented by this test object.  For TestCase instances, this will always be 1.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.countTestCases"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::defaultTestResult}}()",
      "Body": "Return an instance of the test result class that should be used for this test case class (if no other result instance is provided to the run() method).",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.defaultTestResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::id}}()",
      "Body": "Return a string identifying the specific test case.  This is usually the full name of the test method, including the module and class name.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.id"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::shortDescription}}()",
      "Body": "Returns a description of the test, or None if no description has been provided.  The default implementation of this method returns the first line of the test method's docstring, if available, or None.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.shortDescription"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::addCleanup}}({{c4::function}}, *args, **kwargs)",
      "Body": "Add a function to be called after tearDown() to cleanup resources used during the test. Functions will be called in reverse order to the order they are added (LIFO).  They are called with any arguments and keyword arguments passed into addCleanup() when they are added.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestCase}}.{{c3::doCleanups}}()",
      "Body": "This method is called unconditionally after tearDown(), or after setUp() if setUp() raises an exception.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestCase.doCleanups"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::FunctionTestCase}}({{c4::testFunc}}, {{c5::setUp}}={{c6::None}}, {{c7::tearDown}}={{c8::None}}, {{c9::description}}={{c10::None}})",
      "Body": "This class implements the portion of the TestCase interface which allows the test runner to drive the test, but does not provide the methods which test code can use to check and report errors.  This is used to create test cases using legacy test code, allowing it to be integrated into a unittest-based test framework.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.FunctionTestCase"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::TestSuite}}({{c4::tests}}=())",
      "Body": "This class represents an aggregation of individual test cases and test suites. The class presents the interface needed by the test runner to allow it to be run as any other test case.  Running a TestSuite instance is the same as iterating over the suite, running each test individually.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestSuite"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestSuite}}.{{c3::addTest}}({{c4::test}})",
      "Body": "Add a TestCase or TestSuite to the suite.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestSuite.addTest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestSuite}}.{{c3::addTests}}({{c4::tests}})",
      "Body": "Add all the tests from an iterable of TestCase and TestSuite instances to this test suite.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestSuite.addTests"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestSuite}}.{{c3::run}}({{c4::result}})",
      "Body": "Run the tests associated with this suite, collecting the result into the test result object passed as result.  Note that unlike TestCase.run(), TestSuite.run() requires the result object to be passed in.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestSuite.run"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestSuite}}.{{c3::debug}}()",
      "Body": "Run the tests associated with this suite without collecting the result. This allows exceptions raised by the test to be propagated to the caller and can be used to support running tests under a debugger.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestSuite.debug"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestSuite}}.{{c3::countTestCases}}()",
      "Body": "Return the number of tests represented by this test object, including all individual tests and sub-suites.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestSuite.countTestCases"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestSuite}}.{{c3::__iter__}}()",
      "Body": "Tests grouped by a TestSuite are always accessed by iteration. Subclasses can lazily provide tests by overriding __iter__(). Note that this method may be called several times on a single suite (for example when counting tests or comparing for equality) so the tests returned by repeated iterations before TestSuite.run() must be the same for each call iteration. After TestSuite.run(), callers should not rely on the tests returned by this method unless the caller uses a subclass that overrides TestSuite._removeTestAtIndex() to preserve test references.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestSuite.__iter__"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::TestLoader}}",
      "Body": "The TestLoader class is used to create test suites from classes and modules.  Normally, there is no need to create an instance of this class; the unittest module provides an instance that can be shared as unittest.defaultTestLoader.  Using a subclass or instance, however, allows customization of some configurable properties.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::errors}}",
      "Body": "A list of the non-fatal errors encountered while loading tests. Not reset by the loader at any point. Fatal errors are signalled by the relevant a method raising an exception to the caller. Non-fatal errors are also indicated by a synthetic test that will raise the original error when run.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.errors"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::loadTestsFromTestCase}}({{c4::testCaseClass}})",
      "Body": "Return a suite of all test cases contained in the TestCase-derived testCaseClass.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromTestCase"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::loadTestsFromModule}}({{c4::module}}, {{c5::pattern}}={{c6::None}})",
      "Body": "Return a suite of all test cases contained in the given module. This method searches module for classes derived from TestCase and creates an instance of the class for each test method defined for the class.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromModule"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::loadTestsFromName}}({{c4::name}}, {{c5::module}}={{c6::None}})",
      "Body": "Return a suite of all test cases given a string specifier.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromName"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::loadTestsFromNames}}({{c4::names}}, {{c5::module}}={{c6::None}})",
      "Body": "Similar to loadTestsFromName(), but takes a sequence of names rather than a single name.  The return value is a test suite which supports all the tests defined for each name.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromNames"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::getTestCaseNames}}({{c4::testCaseClass}})",
      "Body": "Return a sorted sequence of method names found within testCaseClass; this should be a subclass of TestCase.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.getTestCaseNames"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::discover}}({{c4::start_dir}}, {{c5::pattern}}='{{c6::test}}*.{{c7::py}}', {{c8::top_level_dir}}={{c9::None}})",
      "Body": "Find all the test modules by recursing into subdirectories from the specified start directory, and return a TestSuite object containing them. Only test files that match pattern will be loaded. (Using shell style pattern matching.) Only module names that are importable (i.e. are valid Python identifiers) will be loaded.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.discover"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::testMethodPrefix}}",
      "Body": "String giving the prefix of method names which will be interpreted as test methods.  The default value is 'test'.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.testMethodPrefix"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::sortTestMethodsUsing}}",
      "Body": "Function to be used to compare method names when sorting them in getTestCaseNames() and all the loadTestsFrom*() methods.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.sortTestMethodsUsing"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::suiteClass}}",
      "Body": "Callable object that constructs a test suite from a list of tests. No methods on the resulting object are needed.  The default value is the TestSuite class.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.suiteClass"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestLoader}}.{{c3::testNamePatterns}}",
      "Body": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestLoader.testNamePatterns"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::TestResult}}",
      "Body": "This class is used to compile information about which tests have succeeded and which have failed.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::errors}}",
      "Body": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks. Each tuple represents a test which raised an unexpected exception.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.errors"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::failures}}",
      "Body": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks. Each tuple represents a test where a failure was explicitly signalled using the TestCase.assert*() methods.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.failures"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::skipped}}",
      "Body": "A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.skipped"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::expectedFailures}}",
      "Body": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.  Each tuple represents an expected failure of the test case.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.expectedFailures"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::unexpectedSuccesses}}",
      "Body": "A list containing TestCase instances that were marked as expected failures, but succeeded.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.unexpectedSuccesses"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::shouldStop}}",
      "Body": "Set to True when the execution of tests should stop by stop().",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.shouldStop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::testsRun}}",
      "Body": "The total number of tests run so far.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.testsRun"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::buffer}}",
      "Body": "If set to true, sys.stdout and sys.stderr will be buffered in between startTest() and stopTest() being called. Collected output will only be echoed onto the real sys.stdout and sys.stderr if the test fails or errors. Any output is also attached to the failure / error message.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.buffer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::failfast}}",
      "Body": "If set to true stop() will be called on the first failure or error, halting the test run.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.failfast"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::tb_locals}}",
      "Body": "If set to true then local variables will be shown in tracebacks.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.tb_locals"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::wasSuccessful}}()",
      "Body": "Return True if all tests run so far have passed, otherwise returns False.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.wasSuccessful"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::stop}}()",
      "Body": "This method can be called to signal that the set of tests being run should be aborted by setting the shouldStop attribute to True. TestRunner objects should respect this flag and return without running any additional tests.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.stop"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::startTest}}({{c4::test}})",
      "Body": "Called when the test case test is about to be run.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.startTest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::stopTest}}({{c4::test}})",
      "Body": "Called after the test case test has been executed, regardless of the outcome.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.stopTest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::startTestRun}}()",
      "Body": "Called once before any tests are executed.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.startTestRun"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::stopTestRun}}()",
      "Body": "Called once after all tests are executed.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.stopTestRun"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::addError}}({{c4::test}}, {{c5::err}})",
      "Body": "Called when the test case test raises an unexpected exception. err is a tuple of the form returned by sys.exc_info(): (type, value, traceback).",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.addError"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::addFailure}}({{c4::test}}, {{c5::err}})",
      "Body": "Called when the test case test signals a failure. err is a tuple of the form returned by sys.exc_info(): (type, value, traceback).",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.addFailure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::addSuccess}}({{c4::test}})",
      "Body": "Called when the test case test succeeds.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.addSuccess"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::addSkip}}({{c4::test}}, {{c5::reason}})",
      "Body": "Called when the test case test is skipped.  reason is the reason the test gave for skipping.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.addSkip"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::addExpectedFailure}}({{c4::test}}, {{c5::err}})",
      "Body": "Called when the test case test fails, but was marked with the expectedFailure() decorator.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.addExpectedFailure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::addUnexpectedSuccess}}({{c4::test}})",
      "Body": "Called when the test case test was marked with the expectedFailure() decorator, but succeeded.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.addUnexpectedSuccess"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TestResult}}.{{c3::addSubTest}}({{c4::test}}, {{c5::subtest}}, {{c6::outcome}})",
      "Body": "Called when a subtest finishes.  test is the test case corresponding to the test method.  subtest is a custom TestCase instance describing the subtest.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TestResult.addSubTest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::TextTestResult}}({{c4::stream}}, {{c5::descriptions}}, {{c6::verbosity}})",
      "Body": "A concrete implementation of TestResult used by the TextTestRunner.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TextTestResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::defaultTestLoader}}",
      "Body": "Instance of the TestLoader class intended to be shared.  If no customization of the TestLoader is needed, this instance can be used instead of repeatedly creating new instances.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.defaultTestLoader"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::TextTestRunner}}({{c4::stream}}={{c5::None}}, {{c6::descriptions}}={{c7::True}}, {{c8::verbosity}}=1, {{c9::failfast}}={{c10::False}}, {{c11::buffer}}={{c12::False}}, {{c13::resultclass}}={{c14::None}}, {{c15::warnings}}={{c16::None}}, *, {{c17::tb_locals}}={{c18::False}})",
      "Body": "A basic test runner implementation that outputs results to a stream. If stream is None, the default, sys.stderr is used as the output stream. This class has a few configurable parameters, but is essentially very simple.  Graphical applications which run test suites should provide alternate implementations. Such implementations should accept **kwargs as the interface to construct runners changes when features are added to unittest.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TextTestRunner"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TextTestRunner}}.{{c3::_makeResult}}()",
      "Body": "This method returns the instance of TestResult used by run(). It is not intended to be called directly, but can be overridden in subclasses to provide a custom TestResult.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TextTestRunner._makeResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::TextTestRunner}}.{{c3::run}}({{c4::test}})",
      "Body": "This method is the main public interface to the TextTestRunner. This method takes a TestSuite or TestCase instance. A TestResult is created by calling _makeResult() and the test(s) are run and the results printed to stdout.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.TextTestRunner.run"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::main}}({{c3::module}}='{{c4::__main__}}', {{c5::defaultTest}}={{c6::None}}, {{c7::argv}}={{c8::None}}, {{c9::testRunner}}={{c10::None}}, {{c11::testLoader}}={{c12::unittest}}.{{c13::defaultTestLoader}}, {{c14::exit}}={{c15::True}}, {{c16::verbosity}}=1, {{c17::failfast}}={{c18::None}}, {{c19::catchbreak}}={{c20::None}}, {{c21::buffer}}={{c22::None}}, {{c23::warnings}}={{c24::None}})",
      "Body": "A command-line program that loads a set of tests from module and runs them; this is primarily for making test modules conveniently executable. The simplest use for this function is to include the following line at the end of a test script:",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.main"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::installHandler}}()",
      "Body": "Install the control-c handler. When a signal.SIGINT is received (usually in response to the user pressing control-c) all registered results have stop() called.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.installHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::registerResult}}({{c3::result}})",
      "Body": "Register a TestResult object for control-c handling. Registering a result stores a weak reference to it, so it doesn't prevent the result from being garbage collected.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.registerResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::removeResult}}({{c3::result}})",
      "Body": "Remove a registered result. Once a result has been removed then stop() will no longer be called on that result object in response to a control-c.",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.removeResult"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::removeHandler}}({{c3::function}}={{c4::None}})",
      "Body": "When called without arguments this function removes the control-c handler if it has been installed. This function can also be used as a test decorator to temporarily remove the handler while the test is being executed:",
      "Link": "https://docs.python.org/3/library/unittest.html#unittest.removeHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::mock}}.{{c4::Mock}}({{c5::spec}}={{c6::None}}, {{c7::side_effect}}={{c8::None}}, {{c9::return_value}}={{c10::DEFAULT}}, {{c11::wraps}}={{c12::None}}, {{c13::name}}={{c14::None}}, {{c15::spec_set}}={{c16::None}}, {{c17::unsafe}}={{c18::False}}, **kwargs)",
      "Body": "Create a new Mock object. Mock takes several optional arguments that specify the behaviour of the Mock object:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::assert_called}}(*args, **kwargs)",
      "Body": "Assert that the mock was called at least once.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::assert_called_once}}(*args, **kwargs)",
      "Body": "Assert that the mock was called exactly once.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_once"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::assert_called_with}}(*args, **kwargs)",
      "Body": "This method is a convenient way of asserting that calls are made in a particular way:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_with"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::assert_called_once_with}}(*args, **kwargs)",
      "Body": "Assert that the mock was called exactly once and that that call was with the specified arguments.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_once_with"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::assert_any_call}}(*args, **kwargs)",
      "Body": "assert the mock has been called with the specified arguments.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_any_call"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::assert_has_calls}}({{c5::calls}}, {{c6::any_order}}={{c7::False}})",
      "Body": "assert the mock has been called with the specified calls. The mock_calls list is checked for the calls.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::assert_not_called}}()",
      "Body": "Assert the mock was never called.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_not_called"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::reset_mock}}(*, {{c5::return_value}}={{c6::False}}, {{c7::side_effect}}={{c8::False}})",
      "Body": "The reset_mock method resets all the call attributes on a mock object:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.reset_mock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::mock_add_spec}}({{c5::spec}}, {{c6::spec_set}}={{c7::False}})",
      "Body": "Add a spec to a mock. spec can either be an object or a list of strings. Only attributes on the spec can be fetched as attributes from the mock.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_add_spec"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::attach_mock}}({{c5::mock}}, {{c6::attribute}})",
      "Body": "Attach a mock as an attribute of this one, replacing its name and parent. Calls to the attached mock will be recorded in the method_calls and mock_calls attributes of this one.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.attach_mock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::configure_mock}}(**kwargs)",
      "Body": "Set attributes on the mock through keyword arguments.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.configure_mock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::__dir__}}()",
      "Body": "Mock objects limit the results of dir(some_mock) to useful results. For mocks with a spec this includes all the permitted attributes for the mock.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.__dir__"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::_get_child_mock}}(**kw)",
      "Body": "Create the child mocks for attributes and return value. By default child mocks will be the same type as the parent. Subclasses of Mock may want to override this to customize the way child mocks are made.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock._get_child_mock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::called}}",
      "Body": "A boolean representing whether or not the mock object has been called:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.called"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::call_count}}",
      "Body": "An integer telling you how many times the mock object has been called:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_count"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::return_value}}",
      "Body": "Set this to configure the value returned by calling the mock:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::side_effect}}",
      "Body": "This can either be a function to be called when the mock is called, an iterable or an exception (class or instance) to be raised.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::call_args}}",
      "Body": "This is either None (if the mock hasn't been called), or the arguments that the mock was last called with. This will be in the form of a tuple: the first member is any ordered arguments the mock was called with (or an empty tuple) and the second member is any keyword arguments (or an empty dictionary).",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::call_args_list}}",
      "Body": "This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called). Before any calls have been made it is an empty list. The call object can be used for conveniently constructing lists of calls to compare with call_args_list.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args_list"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::method_calls}}",
      "Body": "As well as tracking calls to themselves, mocks also track calls to methods and attributes, and their methods and attributes:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.method_calls"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::mock_calls}}",
      "Body": "mock_calls records all calls to the mock object, its methods, magic methods and return value mocks.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["attribute", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::Mock}}.{{c4::__class__}}",
      "Body": "Normally the __class__ attribute of an object will return its type. For a mock object with a spec, __class__ returns the spec class instead. This allows mock objects to pass isinstance() tests for the object they are replacing / masquerading as:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.__class__"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::mock}}.{{c4::NonCallableMock}}({{c5::spec}}={{c6::None}}, {{c7::wraps}}={{c8::None}}, {{c9::name}}={{c10::None}}, {{c11::spec_set}}={{c12::None}}, **kwargs)",
      "Body": "A non-callable version of Mock. The constructor parameters have the same meaning of Mock, with the exception of return_value and side_effect which have no meaning on a non-callable mock.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.NonCallableMock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::mock}}.{{c4::PropertyMock}}(*args, **kwargs)",
      "Body": "A mock intended to be used as a property, or other descriptor, on a class. PropertyMock provides __get__() and __set__() methods so you can specify a return value when it is fetched.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.PropertyMock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::patch}}({{c4::target}}, {{c5::new}}={{c6::DEFAULT}}, {{c7::spec}}={{c8::None}}, {{c9::create}}={{c10::False}}, {{c11::spec_set}}={{c12::None}}, {{c13::autospec}}={{c14::None}}, {{c15::new_callable}}={{c16::None}}, **kwargs)",
      "Body": "patch() acts as a function decorator, class decorator or a context manager. Inside the body of the function or with statement, the target is patched with a new object. When the function/with statement exits the patch is undone.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::patch}}.{{c2::object}}({{c3::target}}, {{c4::attribute}}, {{c5::new}}={{c6::DEFAULT}}, {{c7::spec}}={{c8::None}}, {{c9::create}}={{c10::False}}, {{c11::spec_set}}={{c12::None}}, {{c13::autospec}}={{c14::None}}, {{c15::new_callable}}={{c16::None}}, **kwargs)",
      "Body": "patch the named member (attribute) on an object (target) with a mock object.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.object"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::patch}}.{{c2::dict}}({{c3::in_dict}}, {{c4::values}}=(), {{c5::clear}}={{c6::False}}, **kwargs)",
      "Body": "Patch a dictionary, or dictionary like object, and restore the dictionary to its original state after the test.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.dict"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::patch}}.{{c2::multiple}}({{c3::target}}, {{c4::spec}}={{c5::None}}, {{c6::create}}={{c7::False}}, {{c8::spec_set}}={{c9::None}}, {{c10::autospec}}={{c11::None}}, {{c12::new_callable}}={{c13::None}}, **kwargs)",
      "Body": "Perform multiple patches in a single call. It takes the object to be patched (either as an object or a string to fetch the object by importing) and keyword arguments for the patches:",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.multiple"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::patch}}.{{c2::stopall}}()",
      "Body": "Stop all active patches. Only stops patches started with start.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.stopall"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::mock}}.{{c4::MagicMock}}(*args, **kw)",
      "Body": "MagicMock is a subclass of Mock with default implementations of most of the magic methods. You can use MagicMock without having to configure the magic methods yourself.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::unittest}}.{{c3::mock}}.{{c4::NonCallableMagicMock}}(*args, **kw)",
      "Body": "A non-callable version of MagicMock.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.NonCallableMagicMock"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::sentinel}}",
      "Body": "The sentinel object provides a convenient way of providing unique objects for your tests.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.sentinel"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::DEFAULT}}",
      "Body": "The DEFAULT object is a pre-created sentinel (actually sentinel.DEFAULT). It can be used by side_effect functions to indicate that the normal return value should be used.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.DEFAULT"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::call}}(*args, **kwargs)",
      "Body": "call() is a helper object for making simpler assertions, for comparing with call_args, call_args_list, mock_calls and method_calls. call() can also be used with assert_has_calls().",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.call"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::call}}.{{c2::call_list}}()",
      "Body": "For a call object that represents multiple calls, call_list() returns a list of all the intermediate calls as well as the final call.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.call.call_list"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::create_autospec}}({{c4::spec}}, {{c5::spec_set}}={{c6::False}}, {{c7::instance}}={{c8::False}}, **kwargs)",
      "Body": "Create a mock object using another object as a spec. Attributes on the mock will use the corresponding attribute on the spec object as their spec.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.create_autospec"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::mock_open}}({{c4::mock}}={{c5::None}}, {{c6::read_data}}={{c7::None}})",
      "Body": "A helper function to create a mock to replace the use of open(). It works for open() called directly or used as a context manager.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.mock_open"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::unittest}}.{{c2::mock}}.{{c3::seal}}({{c4::mock}})",
      "Body": "Seal will disable the automatic creation of mocks when accessing an attribute of the mock being sealed or any of its attributes that are already mocks recursively.",
      "Link": "https://docs.python.org/3/library/unittest.mock.html#unittest.mock.seal"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::test}}.{{c3::support}}.{{c4::TestFailed}}",
      "Body": "Exception to be raised when a test fails. This is deprecated in favor of unittest-based tests and unittest.TestCase's assertion methods.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TestFailed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::test}}.{{c3::support}}.{{c4::ResourceDenied}}",
      "Body": "Subclass of unittest.SkipTest. Raised when a resource (such as a network connection) is not available. Raised by the requires() function.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.ResourceDenied"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::verbose}}",
      "Body": "True when verbose output is enabled. Should be checked when more detailed information is desired about a running test. verbose is set by test.regrtest.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.verbose"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_jython}}",
      "Body": "True if the running interpreter is Jython.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.is_jython"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_android}}",
      "Body": "True if the system is Android.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.is_android"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unix_shell}}",
      "Body": "Path for shell if not on Windows; otherwise None.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.unix_shell"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::FS_NONASCII}}",
      "Body": "A non-ASCII character encodable by os.fsencode().",
      "Link": "https://docs.python.org/3/library/test.html#test.support.FS_NONASCII"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN}}",
      "Body": "Set to a name that is safe to use as the name of a temporary file.  Any temporary file that is created should be closed and unlinked (removed).",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TESTFN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNICODE}}",
      "Body": "Set to a non-ASCII name for a temporary file.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TESTFN_UNICODE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_ENCODING}}",
      "Body": "Set to sys.getfilesystemencoding().",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TESTFN_ENCODING"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNENCODABLE}}",
      "Body": "Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.  It may be None if it's not possible to generate such a filename.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TESTFN_UNENCODABLE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNDECODABLE}}",
      "Body": "Set to a filename (bytes type) that should not be able to be decoded by file system encoding in strict mode.  It may be None if it's not possible to generate such a filename.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TESTFN_UNDECODABLE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_NONASCII}}",
      "Body": "Set to a filename containing the FS_NONASCII character.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TESTFN_NONASCII"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::IPV}}6{{c4::_ENABLED}}",
      "Body": "Set to True if IPV6 is enabled on this host, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.IPV6_ENABLED"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::SAVEDCWD}}",
      "Body": "Set to os.getcwd().",
      "Link": "https://docs.python.org/3/library/test.html#test.support.SAVEDCWD"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::PGO}}",
      "Body": "Set when tests can be skipped when they are not useful for PGO.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.PGO"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::PIPE_MAX_SIZE}}",
      "Body": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.PIPE_MAX_SIZE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::SOCK_MAX_SIZE}}",
      "Body": "A constant that is likely larger than the underlying OS socket buffer size, to make writes blocking.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.SOCK_MAX_SIZE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_SUPPORT_DIR}}",
      "Body": "Set to the top level directory that contains test.support.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TEST_SUPPORT_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_HOME_DIR}}",
      "Body": "Set to the top level directory for the test package.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TEST_HOME_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_DATA_DIR}}",
      "Body": "Set to the data directory within the test package.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TEST_DATA_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::MAX_Py_ssize_t}}",
      "Body": "Set to sys.maxsize for big memory tests.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.MAX_Py_ssize_t"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::max_memuse}}",
      "Body": "Set by set_memlimit() as the memory limit for big memory tests. Limited by MAX_Py_ssize_t.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.max_memuse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::real_max_memuse}}",
      "Body": "Set by set_memlimit() as the memory limit for big memory tests.  Not limited by MAX_Py_ssize_t.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.real_max_memuse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::MISSING_C_DOCSTRINGS}}",
      "Body": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.MISSING_C_DOCSTRINGS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::HAVE_DOCSTRINGS}}",
      "Body": "Check for presence of docstrings.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.HAVE_DOCSTRINGS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::forget}}({{c4::module_name}})",
      "Body": "Remove the module named module_name from sys.modules and delete any byte-compiled files of the module.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.forget"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unload}}({{c4::name}})",
      "Body": "Delete name from sys.modules.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.unload"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unlink}}({{c4::filename}})",
      "Body": "Call os.unlink() on filename.  On Windows platforms, this is wrapped with a wait loop that checks for the existence fo the file.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.unlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::rmdir}}({{c4::filename}})",
      "Body": "Call os.rmdir() on filename.  On Windows platforms, this is wrapped with a wait loop that checks for the existence of the file.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.rmdir"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::rmtree}}({{c4::path}})",
      "Body": "Call shutil.rmtree() on path or call os.lstat() and os.rmdir() to remove a path and its contents.  On Windows platforms, this is wrapped with a wait loop that checks for the existence of the files.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.rmtree"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::make_legacy_pyc}}({{c4::source}})",
      "Body": "Move a PEP 3147/488 pyc file to its legacy pyc location and return the file system path to the legacy pyc file.  The source value is the file system path to the source file.  It does not need to exist, however the PEP 3147/488 pyc file must exist.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.make_legacy_pyc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_resource_enabled}}({{c4::resource}})",
      "Body": "Return True if resource is enabled and available. The list of available resources is only set when test.regrtest is executing the tests.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.is_resource_enabled"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::python_is_optimized}}()",
      "Body": "Return True if Python was not built with -O0 or -Og.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.python_is_optimized"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::with_pymalloc}}()",
      "Body": "Return _testcapi.WITH_PYMALLOC.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.with_pymalloc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::requires}}({{c4::resource}}, {{c5::msg}}={{c6::None}})",
      "Body": "Raise ResourceDenied if resource is not available. msg is the argument to ResourceDenied if it is raised. Always returns True if called by a function whose __name__ is '__main__'. Used when tests are executed by test.regrtest.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::system_must_validate_cert}}({{c4::f}})",
      "Body": "Raise unittest.SkipTest on TLS certification validation failures.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.system_must_validate_cert"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::sortdict}}({{c4::dict}})",
      "Body": "Return a repr of dict with keys sorted.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.sortdict"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::findfile}}({{c4::filename}}, {{c5::subdir}}={{c6::None}})",
      "Body": "Return the path to the file named filename. If no match is found filename is returned. This does not equal a failure since it could be the path to the file.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.findfile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::create_empty_file}}({{c4::filename}})",
      "Body": "Create an empty file with filename.  If it already exists, truncate it.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.create_empty_file"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::fd_count}}()",
      "Body": "Count the number of open file descriptors.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.fd_count"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::match_test}}({{c4::test}})",
      "Body": "Match test to patterns set in set_match_tests().",
      "Link": "https://docs.python.org/3/library/test.html#test.support.match_test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::set_match_tests}}({{c4::patterns}})",
      "Body": "Define match test with regular expression patterns.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.set_match_tests"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_unittest}}(*classes)",
      "Body": "Execute unittest.TestCase subclasses passed to the function. The function scans the classes for methods starting with the prefix test_ and executes the tests individually.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.run_unittest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_doctest}}({{c4::module}}, {{c5::verbosity}}={{c6::None}}, {{c7::optionflags}}=0)",
      "Body": "Run doctest.testmod() on the given module.  Return (failure_count, test_count).",
      "Link": "https://docs.python.org/3/library/test.html#test.support.run_doctest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::setswitchinterval}}({{c4::interval}})",
      "Body": "Set the sys.setswitchinterval() to the given interval.  Defines a minimum interval for Android systems to prevent the system from hanging.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.setswitchinterval"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_impl_detail}}(**guards)",
      "Body": "Use this check to guard CPython's implementation-specific tests or to run them only on the implementations guarded by the arguments:",
      "Link": "https://docs.python.org/3/library/test.html#test.support.check_impl_detail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_warnings}}(*filters, {{c4::quiet}}={{c5::True}})",
      "Body": "A convenience wrapper for warnings.catch_warnings() that makes it easier to test that a warning was correctly raised.  It is approximately equivalent to calling warnings.catch_warnings(record=True) with warnings.simplefilter() set to always and with the option to automatically validate the results that are recorded.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.check_warnings"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_no_resource_warning}}({{c4::testcase}})",
      "Body": "Context manager to check that no ResourceWarning was raised.  You must remove the object which may emit ResourceWarning before the end of the context manager.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.check_no_resource_warning"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::set_memlimit}}({{c4::limit}})",
      "Body": "Set the values for max_memuse and real_max_memuse for big memory tests.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.set_memlimit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::record_original_stdout}}({{c4::stdout}})",
      "Body": "Store the value from stdout.  It is meant to hold the stdout at the time the regrtest began.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.record_original_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::get_original_stdout}}()",
      "Body": "Return the original stdout set by record_original_stdout() or sys.stdout if it's not set.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.get_original_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::strip_python_strerr}}({{c4::stderr}})",
      "Body": "Strip the stderr of a Python process from potential debug output emitted by the interpreter.  This will typically be run on the result of subprocess.Popen.communicate().",
      "Link": "https://docs.python.org/3/library/test.html#test.support.strip_python_strerr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::args_from_interpreter_flags}}()",
      "Body": "Return a list of command line arguments reproducing the current settings in sys.flags and sys.warnoptions.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.args_from_interpreter_flags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::optim_args_from_interpreter_flags}}()",
      "Body": "Return a list of command line arguments reproducing the current optimization settings in sys.flags.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.optim_args_from_interpreter_flags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stdin}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.captured_stdin"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stdout}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.captured_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stderr}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.captured_stderr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_dir}}({{c4::path}}={{c5::None}}, {{c6::quiet}}={{c7::False}})",
      "Body": "A context manager that creates a temporary directory at path and yields the directory.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.temp_dir"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::change_cwd}}({{c4::path}}, {{c5::quiet}}={{c6::False}})",
      "Body": "A context manager that temporarily changes the current working directory to path and yields the directory.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.change_cwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_cwd}}({{c4::name}}='{{c5::tempcwd}}', {{c6::quiet}}={{c7::False}})",
      "Body": "A context manager that temporarily creates a new directory and changes the current working directory (CWD).",
      "Link": "https://docs.python.org/3/library/test.html#test.support.temp_cwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_umask}}({{c4::umask}})",
      "Body": "A context manager that temporarily sets the process umask.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.temp_umask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::transient_internet}}({{c4::resource_name}}, *, {{c5::timeout}}=30.0, {{c6::errnos}}=())",
      "Body": "A context manager that raises ResourceDenied when various issues with the internet connection manifest themselves as exceptions.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.transient_internet"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::disable_faulthandler}}()",
      "Body": "A context manager that replaces sys.stderr with sys.__stderr__.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.disable_faulthandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::gc_collect}}()",
      "Body": "Force as many objects as possible to be collected.  This is needed because timely deallocation is not guaranteed by the garbage collector.  This means that __del__ methods may be called later than expected and weakrefs may remain alive for longer than expected.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.gc_collect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::disable_gc}}()",
      "Body": "A context manager that disables the garbage collector upon entry and reenables it upon exit.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.disable_gc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::swap_attr}}({{c4::obj}}, {{c5::attr}}, {{c6::new_val}})",
      "Body": "Context manager to swap out an attribute with a new object.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.swap_attr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::swap_item}}({{c4::obj}}, {{c5::attr}}, {{c6::new_val}})",
      "Body": "Context manager to swap out an item with a new object.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.swap_item"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::wait_threads_exit}}({{c4::timeout}}=60.0)",
      "Body": "Context manager to wait until all threads created in the with statement exit.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.wait_threads_exit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::start_threads}}({{c4::threads}}, {{c5::unlock}}={{c6::None}})",
      "Body": "Context manager to start threads.  It attempts to join the threads upon exit.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.start_threads"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::calcobjsize}}({{c4::fmt}})",
      "Body": "Return struct.calcsize() for nP{fmt}0n or, if gettotalrefcount exists, 2PnP{fmt}0P.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.calcobjsize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::calcvobjsize}}({{c4::fmt}})",
      "Body": "Return struct.calcsize() for nPn{fmt}0n or, if gettotalrefcount exists, 2PnPn{fmt}0P.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.calcvobjsize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::checksizeof}}({{c4::test}}, {{c5::o}}, {{c6::size}})",
      "Body": "For testcase test, assert that the sys.getsizeof for o plus the GC header size equals size.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.checksizeof"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::can_symlink}}()",
      "Body": "Return True if the OS supports symbolic links, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.can_symlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::can_xattr}}()",
      "Body": "Return True if the OS supports xattr, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.can_xattr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_symlink}}",
      "Body": "A decorator for running tests that require support for symbolic links.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.skip_unless_symlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_xattr}}",
      "Body": "A decorator for running tests that require support for xattr.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.skip_unless_xattr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_bind_unix_socket}}",
      "Body": "A decorator for running tests that require a functional bind() for Unix sockets.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.skip_unless_bind_unix_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::anticipate_failure}}({{c4::condition}})",
      "Body": "A decorator to conditionally mark tests with unittest.expectedFailure(). Any use of this decorator should have an associated comment identifying the relevant tracker issue.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.anticipate_failure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::run_with_locale}}({{c4::catstr}}, *locales)",
      "Body": "A decorator for running a function in a different locale, correctly resetting it after it has finished.  catstr is the locale category as a string (for example \"LC_ALL\").  The locales passed will be tried sequentially, and the first valid locale will be used.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.run_with_locale"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::run_with_tz}}({{c4::tz}})",
      "Body": "A decorator for running a function in a specific timezone, correctly resetting it after it has finished.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.run_with_tz"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_freebsd_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on FreeBSD.  If the FreeBSD version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_freebsd_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_linux_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on Linux.  If the Linux version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_linux_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_mac_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on Mac OS X.  If the MAC OS X version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_mac_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_IEEE_}}754",
      "Body": "Decorator for skipping tests on non-IEEE 754 platforms.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_IEEE_754"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_zlib}}",
      "Body": "Decorator for skipping tests if zlib doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_zlib"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_gzip}}",
      "Body": "Decorator for skipping tests if gzip doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_gzip"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_bz}}2",
      "Body": "Decorator for skipping tests if bz2 doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_bz2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_lzma}}",
      "Body": "Decorator for skipping tests if lzma doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_lzma"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_resource}}({{c4::resource}})",
      "Body": "Decorator for skipping tests if resource is not available.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_resource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_docstrings}}",
      "Body": "Decorator for only running the test if HAVE_DOCSTRINGS.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.requires_docstrings"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::cpython_only}}({{c4::test}})",
      "Body": "Decorator for tests only applicable to CPython.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.cpython_only"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::impl_detail}}({{c4::msg}}={{c5::None}}, **guards)",
      "Body": "Decorator for invoking check_impl_detail() on guards.  If that returns False, then uses msg as the reason for skipping the test.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.impl_detail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::no_tracing}}({{c4::func}})",
      "Body": "Decorator to temporarily turn off tracing for the duration of the test.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.no_tracing"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::refcount_test}}({{c4::test}})",
      "Body": "Decorator for tests which involve reference counting.  The decorator does not run the test if it is not run by CPython.  Any trace function is unset for the duration of the test to prevent unexpected refcounts caused by the trace function.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.refcount_test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::reap_threads}}({{c4::func}})",
      "Body": "Decorator to ensure the threads are cleaned up even if the test fails.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.reap_threads"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::bigmemtest}}({{c4::size}}, {{c5::memuse}}, {{c6::dry_run}}={{c7::True}})",
      "Body": "Decorator for bigmem tests.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.bigmemtest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::bigaddrspacetest}}({{c4::f}})",
      "Body": "Decorator for tests that fill the address space.  f is the function to wrap.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.bigaddrspacetest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::make_bad_fd}}()",
      "Body": "Create an invalid file descriptor by opening and closing a temporary file, and returning its descriptor.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.make_bad_fd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_syntax_error}}({{c4::testcase}}, {{c5::statement}}, {{c6::errtext}}='', *, {{c7::lineno}}={{c8::None}}, {{c9::offset}}={{c10::None}})",
      "Body": "Test for syntax errors in statement by attempting to compile statement. testcase is the unittest instance for the test.  errtext is the text of the error raised by SyntaxError.  If lineno is not None, compares to the line of the SyntaxError.  If offset is not None, compares to the offset of the SyntaxError.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.check_syntax_error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::open_urlresource}}({{c4::url}}, *args, **kw)",
      "Body": "Open url.  If open fails, raises TestFailed.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.open_urlresource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::import_module}}({{c4::name}}, {{c5::deprecated}}={{c6::False}}, *, {{c7::required_on}}())",
      "Body": "This function imports and returns the named module. Unlike a normal import, this function raises unittest.SkipTest if the module cannot be imported.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.import_module"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::import_fresh_module}}({{c4::name}}, {{c5::fresh}}=(), {{c6::blocked}}=(), {{c7::deprecated}}={{c8::False}})",
      "Body": "This function imports and returns a fresh copy of the named Python module by removing the named module from sys.modules before doing the import. Note that unlike reload(), the original module is not affected by this operation.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.import_fresh_module"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::modules_setup}}()",
      "Body": "Return a copy of sys.modules.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.modules_setup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::modules_cleanup}}({{c4::oldmodules}})",
      "Body": "Remove modules except for oldmodules and encodings in order to preserve internal cache.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.modules_cleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::threading_setup}}()",
      "Body": "Return current thread count and copy of dangling threads.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.threading_setup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::threading_cleanup}}(*original_values)",
      "Body": "Cleanup up threads not specified in original_values.  Designed to emit a warning if a test leaves running threads in the background.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.threading_cleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::join_thread}}({{c4::thread}}, {{c5::timeout}}=30.0)",
      "Body": "Join a thread within timeout.  Raise an AssertionError if thread is still alive after timeout seconds.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.join_thread"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::reap_children}}()",
      "Body": "Use this at the end of test_main whenever sub-processes are started. This will help ensure that no extra children (zombies) stick around to hog resources and create problems when looking for refleaks.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.reap_children"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::get_attribute}}({{c4::obj}}, {{c5::name}})",
      "Body": "Get an attribute, raising unittest.SkipTest if AttributeError is raised.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.get_attribute"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::bind_port}}({{c4::sock}}, {{c5::host}}={{c6::HOST}})",
      "Body": "Bind the socket to a free port and return the port number.  Relies on ephemeral ports in order to ensure we are using an unbound port.  This is important as many tests may be running simultaneously, especially in a buildbot environment.  This method raises an exception if the sock.family is AF_INET and sock.type is SOCK_STREAM, and the socket has SO_REUSEADDR or SO_REUSEPORT set on it. Tests should never set these socket options for TCP/IP sockets. The only case for setting these options is testing multicasting via multiple UDP sockets.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.bind_port"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::bind_unix_socket}}({{c4::sock}}, {{c5::addr}})",
      "Body": "Bind a unix socket, raising unittest.SkipTest if PermissionError is raised.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.bind_unix_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::find_unused_port}}({{c4::family}}={{c5::socket}}.{{c6::AF_INET}}, {{c7::socktype}}={{c8::socket}}.{{c9::SOCK_STREAM}})",
      "Body": "Returns an unused port that should be suitable for binding.  This is achieved by creating a temporary socket with the same family and type as the sock parameter (default is AF_INET, SOCK_STREAM), and binding it to the specified host address (defaults to 0.0.0.0) with the port set to 0, eliciting an unused ephemeral port from the OS. The temporary socket is then closed and deleted, and the ephemeral port is returned.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.find_unused_port"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::load_package_tests}}({{c4::pkg_dir}}, {{c5::loader}}, {{c6::standard_tests}}, {{c7::pattern}})",
      "Body": "Generic implementation of the unittest load_tests protocol for use in test packages.  pkg_dir is the root directory of the package; loader, standard_tests, and pattern are the arguments expected by load_tests.  In simple cases, the test package's __init__.py can be the following:",
      "Link": "https://docs.python.org/3/library/test.html#test.support.load_package_tests"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::fs_is_case_insensitive}}({{c4::directory}})",
      "Body": "Return True if the file system for directory is case-insensitive.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.fs_is_case_insensitive"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::detect_api_mismatch}}({{c4::ref_api}}, {{c5::other_api}}, *, {{c6::ignore}}=())",
      "Body": "Returns the set of attributes, functions or methods of ref_api not found on other_api, except for a defined list of items to be ignored in this check specified in ignore.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.detect_api_mismatch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::patch}}({{c4::test_instance}}, {{c5::object_to_patch}}, {{c6::attr_name}}, {{c7::new_value}})",
      "Body": "Override object_to_patch.attr_name with new_value.  Also add cleanup procedure to test_instance to restore object_to_patch for attr_name.  The attr_name should be a valid attribute for object_to_patch.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.patch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_in_subinterp}}({{c4::code}})",
      "Body": "Run code in subinterpreter.  Raise unittest.SkipTest if tracemalloc is enabled.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.run_in_subinterp"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_free_after_iterating}}({{c4::test}}, {{c5::iter}}, {{c6::cls}}, {{c7::args}}=())",
      "Body": "Assert that iter is deallocated after iterating.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.check_free_after_iterating"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::missing_compiler_executable}}({{c4::cmd_names}}=[])",
      "Body": "Check for the existence of the compiler executables whose names are listed in cmd_names or all the compiler executables when cmd_names is empty and return the first missing executable or None when none is found missing.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.missing_compiler_executable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check__all__}}({{c4::test_case}}, {{c5::module}}, {{c6::name_of_module}}={{c7::None}}, {{c8::extra}}=(), {{c9::blacklist}}=())",
      "Body": "Assert that the __all__ variable of module contains all public names.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.check__all__"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::TransientResource}}({{c5::exc}}, **kwargs)",
      "Body": "Instances are a context manager that raises ResourceDenied if the specified exception type is raised.  Any keyword arguments are treated as attribute/value pairs to be compared against any exception raised within the with statement.  Only if all pairs match properly against attributes on the exception is ResourceDenied raised.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TransientResource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::EnvironmentVarGuard}}",
      "Body": "Class used to temporarily set or unset environment variables.  Instances can be used as a context manager and have a complete dictionary interface for querying/modifying the underlying os.environ. After exit from the context manager all changes to environment variables done through this instance will be rolled back.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.EnvironmentVarGuard"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::EnvironmentVarGuard}}.{{c2::set}}({{c3::envvar}}, {{c4::value}})",
      "Body": "Temporarily set the environment variable envvar to the value of value.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.EnvironmentVarGuard.set"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::EnvironmentVarGuard}}.{{c2::unset}}({{c3::envvar}})",
      "Body": "Temporarily unset the environment variable envvar.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.EnvironmentVarGuard.unset"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::SuppressCrashReport}}",
      "Body": "A context manager used to try to prevent crash dialog popups on tests that are expected to crash a subprocess.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.SuppressCrashReport"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::CleanImport}}(*module_names)",
      "Body": "A context manager to force import to return a new module reference.  This is useful for testing module-level behaviors, such as the emission of a DeprecationWarning on import.  Example usage:",
      "Link": "https://docs.python.org/3/library/test.html#test.support.CleanImport"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::DirsOnSysPath}}(*paths)",
      "Body": "A context manager to temporarily add directories to sys.path.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.DirsOnSysPath"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::SaveSignals}}",
      "Body": "Class to save and restore signal handlers registered by the Python signal handler.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.SaveSignals"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::Matcher}}",
      "Body": "Try to match a single dict with the supplied arguments.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.Matcher"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::Matcher}}.{{c4::matches}}({{c5::self}}, {{c6::d}}, **kwargs)",
      "Body": "Try to match a single dict with the supplied arguments.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.Matcher.matches"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::Matcher}}.{{c4::match_value}}({{c5::self}}, {{c6::k}}, {{c7::dv}}, {{c8::v}})",
      "Body": "Try to match a single stored value (dv) with a supplied value (v).",
      "Link": "https://docs.python.org/3/library/test.html#test.support.Matcher.match_value"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::WarningsRecorder}}",
      "Body": "Class used to record warnings for unit tests. See documentation of check_warnings() above for more details.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.WarningsRecorder"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::BasicTestRunner}}",
      "Body": "Run test and return the result.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.BasicTestRunner"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::BasicTestRunner}}.{{c4::run}}({{c5::test}})",
      "Body": "Run test and return the result.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.BasicTestRunner.run"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::TestHandler}}({{c5::logging}}.{{c6::handlers}}.{{c7::BufferingHandler}})",
      "Body": "Class for logging support.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.TestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::FakePath}}({{c5::path}})",
      "Body": "Simple path-like object.  It implements the __fspath__() method which just returns the path argument.  If path is an exception, it will be raised in __fspath__().",
      "Link": "https://docs.python.org/3/library/test.html#test.support.FakePath"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::interpreter_requires_environment}}()",
      "Body": "Return True if sys.executable interpreter requires environment variables in order to be able to run at all.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.interpreter_requires_environment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::run_python_until_end}}(*args, **env_vars)",
      "Body": "Set up the environment based on env_vars for running the interpreter in a subprocess.  The values can include __isolated, __cleanenv, __cwd, and TERM.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.run_python_until_end"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::assert_python_ok}}(*args, **env_vars)",
      "Body": "Assert that running the interpreter with args and optional environment variables env_vars succeeds (rc == 0) and return a (return code, stdout, stderr) tuple.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.assert_python_ok"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::assert_python_failure}}(*args, **env_vars)",
      "Body": "Assert that running the interpreter with args and optional environment variables env_vars fails (rc != 0) and return a (return code, stdout, stderr) tuple.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.assert_python_failure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::spawn_python}}(*args, {{c5::stdout}}={{c6::subprocess}}.{{c7::PIPE}}, {{c8::stderr}}={{c9::subprocess}}.{{c10::STDOUT}}, **kw)",
      "Body": "Run a Python subprocess with the given arguments.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.spawn_python"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::kill_python}}({{c5::p}})",
      "Body": "Run the given subprocess.Popen process until completion and return stdout.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.kill_python"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_script}}({{c5::script_dir}}, {{c6::script_basename}}, {{c7::source}}, {{c8::omit_suffix}}={{c9::False}})",
      "Body": "Create script containing source in path script_dir and script_basename. If omit_suffix is False, append .py to the name.  Return the full script path.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.make_script"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_zip_script}}({{c5::zip_dir}}, {{c6::zip_basename}}, {{c7::script_name}}, {{c8::name_in_zip}}={{c9::None}})",
      "Body": "Create zip file at zip_dir and zip_basename with extension zip which contains the files in script_name. name_in_zip is the archive name. Return a tuple containing (full path, full path of archive name).",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.make_zip_script"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_pkg}}({{c5::pkg_dir}}, {{c6::init_source}}='')",
      "Body": "Create a directory named pkg_dir containing an __init__ file with init_source as its contents.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.make_pkg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_zip_pkg}}({{c5::zip_dir}}, {{c6::zip_basename}}, {{c7::pkg_name}}, {{c8::script_basename}}, {{c9::source}}, {{c10::depth}}=1, {{c11::compiled}}={{c12::False}})",
      "Body": "Create a zip package directory with a path of zip_dir and zip_basename containing an empty __init__ file and a file script_basename containing the source.  If compiled is True, both source files will be compiled and added to the zip package.  Return a tuple of the full zip path and the archive name for the zip file.",
      "Link": "https://docs.python.org/3/library/test.html#test.support.script_helper.make_zip_pkg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::test}}.{{c3::support}}.{{c4::TestFailed}}",
      "Body": "Exception to be raised when a test fails. This is deprecated in favor of unittest-based tests and unittest.TestCase's assertion methods.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TestFailed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::test}}.{{c3::support}}.{{c4::ResourceDenied}}",
      "Body": "Subclass of unittest.SkipTest. Raised when a resource (such as a network connection) is not available. Raised by the requires() function.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.ResourceDenied"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::verbose}}",
      "Body": "True when verbose output is enabled. Should be checked when more detailed information is desired about a running test. verbose is set by test.regrtest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.verbose"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_jython}}",
      "Body": "True if the running interpreter is Jython.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.is_jython"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_android}}",
      "Body": "True if the system is Android.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.is_android"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unix_shell}}",
      "Body": "Path for shell if not on Windows; otherwise None.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.unix_shell"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::FS_NONASCII}}",
      "Body": "A non-ASCII character encodable by os.fsencode().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.FS_NONASCII"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN}}",
      "Body": "Set to a name that is safe to use as the name of a temporary file.  Any temporary file that is created should be closed and unlinked (removed).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TESTFN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNICODE}}",
      "Body": "Set to a non-ASCII name for a temporary file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TESTFN_UNICODE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_ENCODING}}",
      "Body": "Set to sys.getfilesystemencoding().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TESTFN_ENCODING"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNENCODABLE}}",
      "Body": "Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.  It may be None if it's not possible to generate such a filename.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TESTFN_UNENCODABLE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNDECODABLE}}",
      "Body": "Set to a filename (bytes type) that should not be able to be decoded by file system encoding in strict mode.  It may be None if it's not possible to generate such a filename.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TESTFN_UNDECODABLE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_NONASCII}}",
      "Body": "Set to a filename containing the FS_NONASCII character.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TESTFN_NONASCII"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::IPV}}6{{c4::_ENABLED}}",
      "Body": "Set to True if IPV6 is enabled on this host, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.IPV6_ENABLED"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::SAVEDCWD}}",
      "Body": "Set to os.getcwd().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.SAVEDCWD"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::PGO}}",
      "Body": "Set when tests can be skipped when they are not useful for PGO.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.PGO"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::PIPE_MAX_SIZE}}",
      "Body": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.PIPE_MAX_SIZE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::SOCK_MAX_SIZE}}",
      "Body": "A constant that is likely larger than the underlying OS socket buffer size, to make writes blocking.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.SOCK_MAX_SIZE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_SUPPORT_DIR}}",
      "Body": "Set to the top level directory that contains test.support.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TEST_SUPPORT_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_HOME_DIR}}",
      "Body": "Set to the top level directory for the test package.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TEST_HOME_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_DATA_DIR}}",
      "Body": "Set to the data directory within the test package.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TEST_DATA_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::MAX_Py_ssize_t}}",
      "Body": "Set to sys.maxsize for big memory tests.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.MAX_Py_ssize_t"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::max_memuse}}",
      "Body": "Set by set_memlimit() as the memory limit for big memory tests. Limited by MAX_Py_ssize_t.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.max_memuse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::real_max_memuse}}",
      "Body": "Set by set_memlimit() as the memory limit for big memory tests.  Not limited by MAX_Py_ssize_t.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.real_max_memuse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::MISSING_C_DOCSTRINGS}}",
      "Body": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.MISSING_C_DOCSTRINGS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::HAVE_DOCSTRINGS}}",
      "Body": "Check for presence of docstrings.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.HAVE_DOCSTRINGS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::forget}}({{c4::module_name}})",
      "Body": "Remove the module named module_name from sys.modules and delete any byte-compiled files of the module.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.forget"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unload}}({{c4::name}})",
      "Body": "Delete name from sys.modules.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.unload"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unlink}}({{c4::filename}})",
      "Body": "Call os.unlink() on filename.  On Windows platforms, this is wrapped with a wait loop that checks for the existence fo the file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.unlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::rmdir}}({{c4::filename}})",
      "Body": "Call os.rmdir() on filename.  On Windows platforms, this is wrapped with a wait loop that checks for the existence of the file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.rmdir"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::rmtree}}({{c4::path}})",
      "Body": "Call shutil.rmtree() on path or call os.lstat() and os.rmdir() to remove a path and its contents.  On Windows platforms, this is wrapped with a wait loop that checks for the existence of the files.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.rmtree"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::make_legacy_pyc}}({{c4::source}})",
      "Body": "Move a PEP 3147/488 pyc file to its legacy pyc location and return the file system path to the legacy pyc file.  The source value is the file system path to the source file.  It does not need to exist, however the PEP 3147/488 pyc file must exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.make_legacy_pyc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_resource_enabled}}({{c4::resource}})",
      "Body": "Return True if resource is enabled and available. The list of available resources is only set when test.regrtest is executing the tests.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.is_resource_enabled"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::python_is_optimized}}()",
      "Body": "Return True if Python was not built with -O0 or -Og.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.python_is_optimized"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::with_pymalloc}}()",
      "Body": "Return _testcapi.WITH_PYMALLOC.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.with_pymalloc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::requires}}({{c4::resource}}, {{c5::msg}}={{c6::None}})",
      "Body": "Raise ResourceDenied if resource is not available. msg is the argument to ResourceDenied if it is raised. Always returns True if called by a function whose __name__ is '__main__'. Used when tests are executed by test.regrtest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::system_must_validate_cert}}({{c4::f}})",
      "Body": "Raise unittest.SkipTest on TLS certification validation failures.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.system_must_validate_cert"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::sortdict}}({{c4::dict}})",
      "Body": "Return a repr of dict with keys sorted.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.sortdict"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::findfile}}({{c4::filename}}, {{c5::subdir}}={{c6::None}})",
      "Body": "Return the path to the file named filename. If no match is found filename is returned. This does not equal a failure since it could be the path to the file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.findfile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::create_empty_file}}({{c4::filename}})",
      "Body": "Create an empty file with filename.  If it already exists, truncate it.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.create_empty_file"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::fd_count}}()",
      "Body": "Count the number of open file descriptors.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.fd_count"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::match_test}}({{c4::test}})",
      "Body": "Match test to patterns set in set_match_tests().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.match_test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::set_match_tests}}({{c4::patterns}})",
      "Body": "Define match test with regular expression patterns.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.set_match_tests"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_unittest}}(*classes)",
      "Body": "Execute unittest.TestCase subclasses passed to the function. The function scans the classes for methods starting with the prefix test_ and executes the tests individually.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.run_unittest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_doctest}}({{c4::module}}, {{c5::verbosity}}={{c6::None}}, {{c7::optionflags}}=0)",
      "Body": "Run doctest.testmod() on the given module.  Return (failure_count, test_count).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.run_doctest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::setswitchinterval}}({{c4::interval}})",
      "Body": "Set the sys.setswitchinterval() to the given interval.  Defines a minimum interval for Android systems to prevent the system from hanging.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.setswitchinterval"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_impl_detail}}(**guards)",
      "Body": "Use this check to guard CPython's implementation-specific tests or to run them only on the implementations guarded by the arguments:",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.check_impl_detail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_warnings}}(*filters, {{c4::quiet}}={{c5::True}})",
      "Body": "A convenience wrapper for warnings.catch_warnings() that makes it easier to test that a warning was correctly raised.  It is approximately equivalent to calling warnings.catch_warnings(record=True) with warnings.simplefilter() set to always and with the option to automatically validate the results that are recorded.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.check_warnings"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_no_resource_warning}}({{c4::testcase}})",
      "Body": "Context manager to check that no ResourceWarning was raised.  You must remove the object which may emit ResourceWarning before the end of the context manager.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.check_no_resource_warning"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::set_memlimit}}({{c4::limit}})",
      "Body": "Set the values for max_memuse and real_max_memuse for big memory tests.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.set_memlimit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::record_original_stdout}}({{c4::stdout}})",
      "Body": "Store the value from stdout.  It is meant to hold the stdout at the time the regrtest began.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.record_original_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::get_original_stdout}}()",
      "Body": "Return the original stdout set by record_original_stdout() or sys.stdout if it's not set.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.get_original_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::strip_python_strerr}}({{c4::stderr}})",
      "Body": "Strip the stderr of a Python process from potential debug output emitted by the interpreter.  This will typically be run on the result of subprocess.Popen.communicate().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.strip_python_strerr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::args_from_interpreter_flags}}()",
      "Body": "Return a list of command line arguments reproducing the current settings in sys.flags and sys.warnoptions.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.args_from_interpreter_flags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::optim_args_from_interpreter_flags}}()",
      "Body": "Return a list of command line arguments reproducing the current optimization settings in sys.flags.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.optim_args_from_interpreter_flags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stdin}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.captured_stdin"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stdout}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.captured_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stderr}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.captured_stderr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_dir}}({{c4::path}}={{c5::None}}, {{c6::quiet}}={{c7::False}})",
      "Body": "A context manager that creates a temporary directory at path and yields the directory.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.temp_dir"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::change_cwd}}({{c4::path}}, {{c5::quiet}}={{c6::False}})",
      "Body": "A context manager that temporarily changes the current working directory to path and yields the directory.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.change_cwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_cwd}}({{c4::name}}='{{c5::tempcwd}}', {{c6::quiet}}={{c7::False}})",
      "Body": "A context manager that temporarily creates a new directory and changes the current working directory (CWD).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.temp_cwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_umask}}({{c4::umask}})",
      "Body": "A context manager that temporarily sets the process umask.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.temp_umask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::transient_internet}}({{c4::resource_name}}, *, {{c5::timeout}}=30.0, {{c6::errnos}}=())",
      "Body": "A context manager that raises ResourceDenied when various issues with the internet connection manifest themselves as exceptions.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.transient_internet"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::disable_faulthandler}}()",
      "Body": "A context manager that replaces sys.stderr with sys.__stderr__.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.disable_faulthandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::gc_collect}}()",
      "Body": "Force as many objects as possible to be collected.  This is needed because timely deallocation is not guaranteed by the garbage collector.  This means that __del__ methods may be called later than expected and weakrefs may remain alive for longer than expected.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.gc_collect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::disable_gc}}()",
      "Body": "A context manager that disables the garbage collector upon entry and reenables it upon exit.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.disable_gc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::swap_attr}}({{c4::obj}}, {{c5::attr}}, {{c6::new_val}})",
      "Body": "Context manager to swap out an attribute with a new object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.swap_attr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::swap_item}}({{c4::obj}}, {{c5::attr}}, {{c6::new_val}})",
      "Body": "Context manager to swap out an item with a new object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.swap_item"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::wait_threads_exit}}({{c4::timeout}}=60.0)",
      "Body": "Context manager to wait until all threads created in the with statement exit.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.wait_threads_exit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::start_threads}}({{c4::threads}}, {{c5::unlock}}={{c6::None}})",
      "Body": "Context manager to start threads.  It attempts to join the threads upon exit.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.start_threads"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::calcobjsize}}({{c4::fmt}})",
      "Body": "Return struct.calcsize() for nP{fmt}0n or, if gettotalrefcount exists, 2PnP{fmt}0P.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.calcobjsize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::calcvobjsize}}({{c4::fmt}})",
      "Body": "Return struct.calcsize() for nPn{fmt}0n or, if gettotalrefcount exists, 2PnPn{fmt}0P.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.calcvobjsize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::checksizeof}}({{c4::test}}, {{c5::o}}, {{c6::size}})",
      "Body": "For testcase test, assert that the sys.getsizeof for o plus the GC header size equals size.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.checksizeof"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::can_symlink}}()",
      "Body": "Return True if the OS supports symbolic links, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.can_symlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::can_xattr}}()",
      "Body": "Return True if the OS supports xattr, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.can_xattr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_symlink}}",
      "Body": "A decorator for running tests that require support for symbolic links.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.skip_unless_symlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_xattr}}",
      "Body": "A decorator for running tests that require support for xattr.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.skip_unless_xattr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_bind_unix_socket}}",
      "Body": "A decorator for running tests that require a functional bind() for Unix sockets.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.skip_unless_bind_unix_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::anticipate_failure}}({{c4::condition}})",
      "Body": "A decorator to conditionally mark tests with unittest.expectedFailure(). Any use of this decorator should have an associated comment identifying the relevant tracker issue.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.anticipate_failure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::run_with_locale}}({{c4::catstr}}, *locales)",
      "Body": "A decorator for running a function in a different locale, correctly resetting it after it has finished.  catstr is the locale category as a string (for example \"LC_ALL\").  The locales passed will be tried sequentially, and the first valid locale will be used.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.run_with_locale"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::run_with_tz}}({{c4::tz}})",
      "Body": "A decorator for running a function in a specific timezone, correctly resetting it after it has finished.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.run_with_tz"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_freebsd_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on FreeBSD.  If the FreeBSD version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_freebsd_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_linux_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on Linux.  If the Linux version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_linux_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_mac_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on Mac OS X.  If the MAC OS X version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_mac_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_IEEE_}}754",
      "Body": "Decorator for skipping tests on non-IEEE 754 platforms.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_IEEE_754"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_zlib}}",
      "Body": "Decorator for skipping tests if zlib doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_zlib"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_gzip}}",
      "Body": "Decorator for skipping tests if gzip doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_gzip"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_bz}}2",
      "Body": "Decorator for skipping tests if bz2 doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_bz2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_lzma}}",
      "Body": "Decorator for skipping tests if lzma doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_lzma"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_resource}}({{c4::resource}})",
      "Body": "Decorator for skipping tests if resource is not available.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_resource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_docstrings}}",
      "Body": "Decorator for only running the test if HAVE_DOCSTRINGS.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.requires_docstrings"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::cpython_only}}({{c4::test}})",
      "Body": "Decorator for tests only applicable to CPython.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.cpython_only"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::impl_detail}}({{c4::msg}}={{c5::None}}, **guards)",
      "Body": "Decorator for invoking check_impl_detail() on guards.  If that returns False, then uses msg as the reason for skipping the test.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.impl_detail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::no_tracing}}({{c4::func}})",
      "Body": "Decorator to temporarily turn off tracing for the duration of the test.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.no_tracing"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::refcount_test}}({{c4::test}})",
      "Body": "Decorator for tests which involve reference counting.  The decorator does not run the test if it is not run by CPython.  Any trace function is unset for the duration of the test to prevent unexpected refcounts caused by the trace function.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.refcount_test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::reap_threads}}({{c4::func}})",
      "Body": "Decorator to ensure the threads are cleaned up even if the test fails.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.reap_threads"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::bigmemtest}}({{c4::size}}, {{c5::memuse}}, {{c6::dry_run}}={{c7::True}})",
      "Body": "Decorator for bigmem tests.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.bigmemtest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::bigaddrspacetest}}({{c4::f}})",
      "Body": "Decorator for tests that fill the address space.  f is the function to wrap.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.bigaddrspacetest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::make_bad_fd}}()",
      "Body": "Create an invalid file descriptor by opening and closing a temporary file, and returning its descriptor.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.make_bad_fd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_syntax_error}}({{c4::testcase}}, {{c5::statement}}, {{c6::errtext}}='', *, {{c7::lineno}}={{c8::None}}, {{c9::offset}}={{c10::None}})",
      "Body": "Test for syntax errors in statement by attempting to compile statement. testcase is the unittest instance for the test.  errtext is the text of the error raised by SyntaxError.  If lineno is not None, compares to the line of the SyntaxError.  If offset is not None, compares to the offset of the SyntaxError.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.check_syntax_error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::open_urlresource}}({{c4::url}}, *args, **kw)",
      "Body": "Open url.  If open fails, raises TestFailed.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.open_urlresource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::import_module}}({{c4::name}}, {{c5::deprecated}}={{c6::False}}, *, {{c7::required_on}}())",
      "Body": "This function imports and returns the named module. Unlike a normal import, this function raises unittest.SkipTest if the module cannot be imported.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.import_module"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::import_fresh_module}}({{c4::name}}, {{c5::fresh}}=(), {{c6::blocked}}=(), {{c7::deprecated}}={{c8::False}})",
      "Body": "This function imports and returns a fresh copy of the named Python module by removing the named module from sys.modules before doing the import. Note that unlike reload(), the original module is not affected by this operation.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.import_fresh_module"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::modules_setup}}()",
      "Body": "Return a copy of sys.modules.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.modules_setup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::modules_cleanup}}({{c4::oldmodules}})",
      "Body": "Remove modules except for oldmodules and encodings in order to preserve internal cache.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.modules_cleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::threading_setup}}()",
      "Body": "Return current thread count and copy of dangling threads.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.threading_setup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::threading_cleanup}}(*original_values)",
      "Body": "Cleanup up threads not specified in original_values.  Designed to emit a warning if a test leaves running threads in the background.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.threading_cleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::join_thread}}({{c4::thread}}, {{c5::timeout}}=30.0)",
      "Body": "Join a thread within timeout.  Raise an AssertionError if thread is still alive after timeout seconds.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.join_thread"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::reap_children}}()",
      "Body": "Use this at the end of test_main whenever sub-processes are started. This will help ensure that no extra children (zombies) stick around to hog resources and create problems when looking for refleaks.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.reap_children"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::get_attribute}}({{c4::obj}}, {{c5::name}})",
      "Body": "Get an attribute, raising unittest.SkipTest if AttributeError is raised.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.get_attribute"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::bind_port}}({{c4::sock}}, {{c5::host}}={{c6::HOST}})",
      "Body": "Bind the socket to a free port and return the port number.  Relies on ephemeral ports in order to ensure we are using an unbound port.  This is important as many tests may be running simultaneously, especially in a buildbot environment.  This method raises an exception if the sock.family is AF_INET and sock.type is SOCK_STREAM, and the socket has SO_REUSEADDR or SO_REUSEPORT set on it. Tests should never set these socket options for TCP/IP sockets. The only case for setting these options is testing multicasting via multiple UDP sockets.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.bind_port"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::bind_unix_socket}}({{c4::sock}}, {{c5::addr}})",
      "Body": "Bind a unix socket, raising unittest.SkipTest if PermissionError is raised.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.bind_unix_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::find_unused_port}}({{c4::family}}={{c5::socket}}.{{c6::AF_INET}}, {{c7::socktype}}={{c8::socket}}.{{c9::SOCK_STREAM}})",
      "Body": "Returns an unused port that should be suitable for binding.  This is achieved by creating a temporary socket with the same family and type as the sock parameter (default is AF_INET, SOCK_STREAM), and binding it to the specified host address (defaults to 0.0.0.0) with the port set to 0, eliciting an unused ephemeral port from the OS. The temporary socket is then closed and deleted, and the ephemeral port is returned.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.find_unused_port"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::load_package_tests}}({{c4::pkg_dir}}, {{c5::loader}}, {{c6::standard_tests}}, {{c7::pattern}})",
      "Body": "Generic implementation of the unittest load_tests protocol for use in test packages.  pkg_dir is the root directory of the package; loader, standard_tests, and pattern are the arguments expected by load_tests.  In simple cases, the test package's __init__.py can be the following:",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.load_package_tests"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::fs_is_case_insensitive}}({{c4::directory}})",
      "Body": "Return True if the file system for directory is case-insensitive.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.fs_is_case_insensitive"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::detect_api_mismatch}}({{c4::ref_api}}, {{c5::other_api}}, *, {{c6::ignore}}=())",
      "Body": "Returns the set of attributes, functions or methods of ref_api not found on other_api, except for a defined list of items to be ignored in this check specified in ignore.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.detect_api_mismatch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::patch}}({{c4::test_instance}}, {{c5::object_to_patch}}, {{c6::attr_name}}, {{c7::new_value}})",
      "Body": "Override object_to_patch.attr_name with new_value.  Also add cleanup procedure to test_instance to restore object_to_patch for attr_name.  The attr_name should be a valid attribute for object_to_patch.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.patch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_in_subinterp}}({{c4::code}})",
      "Body": "Run code in subinterpreter.  Raise unittest.SkipTest if tracemalloc is enabled.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.run_in_subinterp"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_free_after_iterating}}({{c4::test}}, {{c5::iter}}, {{c6::cls}}, {{c7::args}}=())",
      "Body": "Assert that iter is deallocated after iterating.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.check_free_after_iterating"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::missing_compiler_executable}}({{c4::cmd_names}}=[])",
      "Body": "Check for the existence of the compiler executables whose names are listed in cmd_names or all the compiler executables when cmd_names is empty and return the first missing executable or None when none is found missing.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.missing_compiler_executable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check__all__}}({{c4::test_case}}, {{c5::module}}, {{c6::name_of_module}}={{c7::None}}, {{c8::extra}}=(), {{c9::blacklist}}=())",
      "Body": "Assert that the __all__ variable of module contains all public names.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.check__all__"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::TransientResource}}({{c5::exc}}, **kwargs)",
      "Body": "Instances are a context manager that raises ResourceDenied if the specified exception type is raised.  Any keyword arguments are treated as attribute/value pairs to be compared against any exception raised within the with statement.  Only if all pairs match properly against attributes on the exception is ResourceDenied raised.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TransientResource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::EnvironmentVarGuard}}",
      "Body": "Class used to temporarily set or unset environment variables.  Instances can be used as a context manager and have a complete dictionary interface for querying/modifying the underlying os.environ. After exit from the context manager all changes to environment variables done through this instance will be rolled back.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.EnvironmentVarGuard"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::EnvironmentVarGuard}}.{{c2::set}}({{c3::envvar}}, {{c4::value}})",
      "Body": "Temporarily set the environment variable envvar to the value of value.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.EnvironmentVarGuard.set"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::EnvironmentVarGuard}}.{{c2::unset}}({{c3::envvar}})",
      "Body": "Temporarily unset the environment variable envvar.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.EnvironmentVarGuard.unset"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::SuppressCrashReport}}",
      "Body": "A context manager used to try to prevent crash dialog popups on tests that are expected to crash a subprocess.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.SuppressCrashReport"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::CleanImport}}(*module_names)",
      "Body": "A context manager to force import to return a new module reference.  This is useful for testing module-level behaviors, such as the emission of a DeprecationWarning on import.  Example usage:",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.CleanImport"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::DirsOnSysPath}}(*paths)",
      "Body": "A context manager to temporarily add directories to sys.path.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.DirsOnSysPath"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::SaveSignals}}",
      "Body": "Class to save and restore signal handlers registered by the Python signal handler.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.SaveSignals"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::Matcher}}",
      "Body": "Try to match a single dict with the supplied arguments.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.Matcher"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::Matcher}}.{{c4::matches}}({{c5::self}}, {{c6::d}}, **kwargs)",
      "Body": "Try to match a single dict with the supplied arguments.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.Matcher.matches"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::Matcher}}.{{c4::match_value}}({{c5::self}}, {{c6::k}}, {{c7::dv}}, {{c8::v}})",
      "Body": "Try to match a single stored value (dv) with a supplied value (v).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.Matcher.match_value"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::WarningsRecorder}}",
      "Body": "Class used to record warnings for unit tests. See documentation of check_warnings() above for more details.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.WarningsRecorder"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::BasicTestRunner}}",
      "Body": "Run test and return the result.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.BasicTestRunner"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::BasicTestRunner}}.{{c4::run}}({{c5::test}})",
      "Body": "Run test and return the result.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.BasicTestRunner.run"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::TestHandler}}({{c5::logging}}.{{c6::handlers}}.{{c7::BufferingHandler}})",
      "Body": "Class for logging support.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.TestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::FakePath}}({{c5::path}})",
      "Body": "Simple path-like object.  It implements the __fspath__() method which just returns the path argument.  If path is an exception, it will be raised in __fspath__().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.FakePath"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::interpreter_requires_environment}}()",
      "Body": "Return True if sys.executable interpreter requires environment variables in order to be able to run at all.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.interpreter_requires_environment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::run_python_until_end}}(*args, **env_vars)",
      "Body": "Set up the environment based on env_vars for running the interpreter in a subprocess.  The values can include __isolated, __cleanenv, __cwd, and TERM.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.run_python_until_end"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::assert_python_ok}}(*args, **env_vars)",
      "Body": "Assert that running the interpreter with args and optional environment variables env_vars succeeds (rc == 0) and return a (return code, stdout, stderr) tuple.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.assert_python_ok"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::assert_python_failure}}(*args, **env_vars)",
      "Body": "Assert that running the interpreter with args and optional environment variables env_vars fails (rc != 0) and return a (return code, stdout, stderr) tuple.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.assert_python_failure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::spawn_python}}(*args, {{c5::stdout}}={{c6::subprocess}}.{{c7::PIPE}}, {{c8::stderr}}={{c9::subprocess}}.{{c10::STDOUT}}, **kw)",
      "Body": "Run a Python subprocess with the given arguments.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.spawn_python"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::kill_python}}({{c5::p}})",
      "Body": "Run the given subprocess.Popen process until completion and return stdout.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.kill_python"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_script}}({{c5::script_dir}}, {{c6::script_basename}}, {{c7::source}}, {{c8::omit_suffix}}={{c9::False}})",
      "Body": "Create script containing source in path script_dir and script_basename. If omit_suffix is False, append .py to the name.  Return the full script path.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.make_script"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_zip_script}}({{c5::zip_dir}}, {{c6::zip_basename}}, {{c7::script_name}}, {{c8::name_in_zip}}={{c9::None}})",
      "Body": "Create zip file at zip_dir and zip_basename with extension zip which contains the files in script_name. name_in_zip is the archive name. Return a tuple containing (full path, full path of archive name).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.make_zip_script"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_pkg}}({{c5::pkg_dir}}, {{c6::init_source}}='')",
      "Body": "Create a directory named pkg_dir containing an __init__ file with init_source as its contents.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.make_pkg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_zip_pkg}}({{c5::zip_dir}}, {{c6::zip_basename}}, {{c7::pkg_name}}, {{c8::script_basename}}, {{c9::source}}, {{c10::depth}}=1, {{c11::compiled}}={{c12::False}})",
      "Body": "Create a zip package directory with a path of zip_dir and zip_basename containing an empty __init__ file and a file script_basename containing the source.  If compiled is True, both source files will be compiled and added to the zip package.  Return a tuple of the full zip path and the archive name for the zip file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support#test.support.script_helper.make_zip_pkg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::test}}.{{c3::support}}.{{c4::TestFailed}}",
      "Body": "Exception to be raised when a test fails. This is deprecated in favor of unittest-based tests and unittest.TestCase's assertion methods.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TestFailed"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["exception", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::exception}} {{c2::test}}.{{c3::support}}.{{c4::ResourceDenied}}",
      "Body": "Subclass of unittest.SkipTest. Raised when a resource (such as a network connection) is not available. Raised by the requires() function.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.ResourceDenied"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::verbose}}",
      "Body": "True when verbose output is enabled. Should be checked when more detailed information is desired about a running test. verbose is set by test.regrtest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.verbose"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_jython}}",
      "Body": "True if the running interpreter is Jython.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.is_jython"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_android}}",
      "Body": "True if the system is Android.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.is_android"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unix_shell}}",
      "Body": "Path for shell if not on Windows; otherwise None.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.unix_shell"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::FS_NONASCII}}",
      "Body": "A non-ASCII character encodable by os.fsencode().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.FS_NONASCII"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN}}",
      "Body": "Set to a name that is safe to use as the name of a temporary file.  Any temporary file that is created should be closed and unlinked (removed).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TESTFN"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNICODE}}",
      "Body": "Set to a non-ASCII name for a temporary file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TESTFN_UNICODE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_ENCODING}}",
      "Body": "Set to sys.getfilesystemencoding().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TESTFN_ENCODING"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNENCODABLE}}",
      "Body": "Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.  It may be None if it's not possible to generate such a filename.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TESTFN_UNENCODABLE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_UNDECODABLE}}",
      "Body": "Set to a filename (bytes type) that should not be able to be decoded by file system encoding in strict mode.  It may be None if it's not possible to generate such a filename.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TESTFN_UNDECODABLE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TESTFN_NONASCII}}",
      "Body": "Set to a filename containing the FS_NONASCII character.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TESTFN_NONASCII"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::IPV}}6{{c4::_ENABLED}}",
      "Body": "Set to True if IPV6 is enabled on this host, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.IPV6_ENABLED"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::SAVEDCWD}}",
      "Body": "Set to os.getcwd().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.SAVEDCWD"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::PGO}}",
      "Body": "Set when tests can be skipped when they are not useful for PGO.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.PGO"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::PIPE_MAX_SIZE}}",
      "Body": "A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.PIPE_MAX_SIZE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::SOCK_MAX_SIZE}}",
      "Body": "A constant that is likely larger than the underlying OS socket buffer size, to make writes blocking.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.SOCK_MAX_SIZE"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_SUPPORT_DIR}}",
      "Body": "Set to the top level directory that contains test.support.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TEST_SUPPORT_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_HOME_DIR}}",
      "Body": "Set to the top level directory for the test package.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TEST_HOME_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::TEST_DATA_DIR}}",
      "Body": "Set to the data directory within the test package.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TEST_DATA_DIR"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::MAX_Py_ssize_t}}",
      "Body": "Set to sys.maxsize for big memory tests.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.MAX_Py_ssize_t"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::max_memuse}}",
      "Body": "Set by set_memlimit() as the memory limit for big memory tests. Limited by MAX_Py_ssize_t.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.max_memuse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::real_max_memuse}}",
      "Body": "Set by set_memlimit() as the memory limit for big memory tests.  Not limited by MAX_Py_ssize_t.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.real_max_memuse"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::MISSING_C_DOCSTRINGS}}",
      "Body": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.MISSING_C_DOCSTRINGS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["data", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::HAVE_DOCSTRINGS}}",
      "Body": "Check for presence of docstrings.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.HAVE_DOCSTRINGS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::forget}}({{c4::module_name}})",
      "Body": "Remove the module named module_name from sys.modules and delete any byte-compiled files of the module.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.forget"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unload}}({{c4::name}})",
      "Body": "Delete name from sys.modules.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.unload"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::unlink}}({{c4::filename}})",
      "Body": "Call os.unlink() on filename.  On Windows platforms, this is wrapped with a wait loop that checks for the existence fo the file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.unlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::rmdir}}({{c4::filename}})",
      "Body": "Call os.rmdir() on filename.  On Windows platforms, this is wrapped with a wait loop that checks for the existence of the file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.rmdir"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::rmtree}}({{c4::path}})",
      "Body": "Call shutil.rmtree() on path or call os.lstat() and os.rmdir() to remove a path and its contents.  On Windows platforms, this is wrapped with a wait loop that checks for the existence of the files.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.rmtree"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::make_legacy_pyc}}({{c4::source}})",
      "Body": "Move a PEP 3147/488 pyc file to its legacy pyc location and return the file system path to the legacy pyc file.  The source value is the file system path to the source file.  It does not need to exist, however the PEP 3147/488 pyc file must exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.make_legacy_pyc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::is_resource_enabled}}({{c4::resource}})",
      "Body": "Return True if resource is enabled and available. The list of available resources is only set when test.regrtest is executing the tests.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.is_resource_enabled"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::python_is_optimized}}()",
      "Body": "Return True if Python was not built with -O0 or -Og.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.python_is_optimized"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::with_pymalloc}}()",
      "Body": "Return _testcapi.WITH_PYMALLOC.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.with_pymalloc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::requires}}({{c4::resource}}, {{c5::msg}}={{c6::None}})",
      "Body": "Raise ResourceDenied if resource is not available. msg is the argument to ResourceDenied if it is raised. Always returns True if called by a function whose __name__ is '__main__'. Used when tests are executed by test.regrtest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::system_must_validate_cert}}({{c4::f}})",
      "Body": "Raise unittest.SkipTest on TLS certification validation failures.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.system_must_validate_cert"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::sortdict}}({{c4::dict}})",
      "Body": "Return a repr of dict with keys sorted.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.sortdict"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::findfile}}({{c4::filename}}, {{c5::subdir}}={{c6::None}})",
      "Body": "Return the path to the file named filename. If no match is found filename is returned. This does not equal a failure since it could be the path to the file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.findfile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::create_empty_file}}({{c4::filename}})",
      "Body": "Create an empty file with filename.  If it already exists, truncate it.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.create_empty_file"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::fd_count}}()",
      "Body": "Count the number of open file descriptors.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.fd_count"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::match_test}}({{c4::test}})",
      "Body": "Match test to patterns set in set_match_tests().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.match_test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::set_match_tests}}({{c4::patterns}})",
      "Body": "Define match test with regular expression patterns.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.set_match_tests"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_unittest}}(*classes)",
      "Body": "Execute unittest.TestCase subclasses passed to the function. The function scans the classes for methods starting with the prefix test_ and executes the tests individually.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.run_unittest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_doctest}}({{c4::module}}, {{c5::verbosity}}={{c6::None}}, {{c7::optionflags}}=0)",
      "Body": "Run doctest.testmod() on the given module.  Return (failure_count, test_count).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.run_doctest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::setswitchinterval}}({{c4::interval}})",
      "Body": "Set the sys.setswitchinterval() to the given interval.  Defines a minimum interval for Android systems to prevent the system from hanging.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.setswitchinterval"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_impl_detail}}(**guards)",
      "Body": "Use this check to guard CPython's implementation-specific tests or to run them only on the implementations guarded by the arguments:",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.check_impl_detail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_warnings}}(*filters, {{c4::quiet}}={{c5::True}})",
      "Body": "A convenience wrapper for warnings.catch_warnings() that makes it easier to test that a warning was correctly raised.  It is approximately equivalent to calling warnings.catch_warnings(record=True) with warnings.simplefilter() set to always and with the option to automatically validate the results that are recorded.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.check_warnings"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_no_resource_warning}}({{c4::testcase}})",
      "Body": "Context manager to check that no ResourceWarning was raised.  You must remove the object which may emit ResourceWarning before the end of the context manager.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.check_no_resource_warning"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::set_memlimit}}({{c4::limit}})",
      "Body": "Set the values for max_memuse and real_max_memuse for big memory tests.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.set_memlimit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::record_original_stdout}}({{c4::stdout}})",
      "Body": "Store the value from stdout.  It is meant to hold the stdout at the time the regrtest began.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.record_original_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::get_original_stdout}}()",
      "Body": "Return the original stdout set by record_original_stdout() or sys.stdout if it's not set.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.get_original_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::strip_python_strerr}}({{c4::stderr}})",
      "Body": "Strip the stderr of a Python process from potential debug output emitted by the interpreter.  This will typically be run on the result of subprocess.Popen.communicate().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.strip_python_strerr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::args_from_interpreter_flags}}()",
      "Body": "Return a list of command line arguments reproducing the current settings in sys.flags and sys.warnoptions.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.args_from_interpreter_flags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::optim_args_from_interpreter_flags}}()",
      "Body": "Return a list of command line arguments reproducing the current optimization settings in sys.flags.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.optim_args_from_interpreter_flags"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stdin}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.captured_stdin"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stdout}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.captured_stdout"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::captured_stderr}}()",
      "Body": "A context managers that temporarily replaces the named stream with io.StringIO object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.captured_stderr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_dir}}({{c4::path}}={{c5::None}}, {{c6::quiet}}={{c7::False}})",
      "Body": "A context manager that creates a temporary directory at path and yields the directory.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.temp_dir"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::change_cwd}}({{c4::path}}, {{c5::quiet}}={{c6::False}})",
      "Body": "A context manager that temporarily changes the current working directory to path and yields the directory.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.change_cwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_cwd}}({{c4::name}}='{{c5::tempcwd}}', {{c6::quiet}}={{c7::False}})",
      "Body": "A context manager that temporarily creates a new directory and changes the current working directory (CWD).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.temp_cwd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::temp_umask}}({{c4::umask}})",
      "Body": "A context manager that temporarily sets the process umask.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.temp_umask"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::transient_internet}}({{c4::resource_name}}, *, {{c5::timeout}}=30.0, {{c6::errnos}}=())",
      "Body": "A context manager that raises ResourceDenied when various issues with the internet connection manifest themselves as exceptions.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.transient_internet"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::disable_faulthandler}}()",
      "Body": "A context manager that replaces sys.stderr with sys.__stderr__.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.disable_faulthandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::gc_collect}}()",
      "Body": "Force as many objects as possible to be collected.  This is needed because timely deallocation is not guaranteed by the garbage collector.  This means that __del__ methods may be called later than expected and weakrefs may remain alive for longer than expected.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.gc_collect"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::disable_gc}}()",
      "Body": "A context manager that disables the garbage collector upon entry and reenables it upon exit.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.disable_gc"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::swap_attr}}({{c4::obj}}, {{c5::attr}}, {{c6::new_val}})",
      "Body": "Context manager to swap out an attribute with a new object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.swap_attr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::swap_item}}({{c4::obj}}, {{c5::attr}}, {{c6::new_val}})",
      "Body": "Context manager to swap out an item with a new object.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.swap_item"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::wait_threads_exit}}({{c4::timeout}}=60.0)",
      "Body": "Context manager to wait until all threads created in the with statement exit.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.wait_threads_exit"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::start_threads}}({{c4::threads}}, {{c5::unlock}}={{c6::None}})",
      "Body": "Context manager to start threads.  It attempts to join the threads upon exit.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.start_threads"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::calcobjsize}}({{c4::fmt}})",
      "Body": "Return struct.calcsize() for nP{fmt}0n or, if gettotalrefcount exists, 2PnP{fmt}0P.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.calcobjsize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::calcvobjsize}}({{c4::fmt}})",
      "Body": "Return struct.calcsize() for nPn{fmt}0n or, if gettotalrefcount exists, 2PnPn{fmt}0P.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.calcvobjsize"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::checksizeof}}({{c4::test}}, {{c5::o}}, {{c6::size}})",
      "Body": "For testcase test, assert that the sys.getsizeof for o plus the GC header size equals size.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.checksizeof"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::can_symlink}}()",
      "Body": "Return True if the OS supports symbolic links, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.can_symlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::can_xattr}}()",
      "Body": "Return True if the OS supports xattr, False otherwise.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.can_xattr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_symlink}}",
      "Body": "A decorator for running tests that require support for symbolic links.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.skip_unless_symlink"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_xattr}}",
      "Body": "A decorator for running tests that require support for xattr.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.skip_unless_xattr"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::skip_unless_bind_unix_socket}}",
      "Body": "A decorator for running tests that require a functional bind() for Unix sockets.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.skip_unless_bind_unix_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::anticipate_failure}}({{c4::condition}})",
      "Body": "A decorator to conditionally mark tests with unittest.expectedFailure(). Any use of this decorator should have an associated comment identifying the relevant tracker issue.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.anticipate_failure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::run_with_locale}}({{c4::catstr}}, *locales)",
      "Body": "A decorator for running a function in a different locale, correctly resetting it after it has finished.  catstr is the locale category as a string (for example \"LC_ALL\").  The locales passed will be tried sequentially, and the first valid locale will be used.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.run_with_locale"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::run_with_tz}}({{c4::tz}})",
      "Body": "A decorator for running a function in a specific timezone, correctly resetting it after it has finished.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.run_with_tz"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_freebsd_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on FreeBSD.  If the FreeBSD version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_freebsd_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_linux_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on Linux.  If the Linux version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_linux_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_mac_version}}(*min_version)",
      "Body": "Decorator for the minimum version when running test on Mac OS X.  If the MAC OS X version is less than the minimum, raise unittest.SkipTest.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_mac_version"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_IEEE_}}754",
      "Body": "Decorator for skipping tests on non-IEEE 754 platforms.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_IEEE_754"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_zlib}}",
      "Body": "Decorator for skipping tests if zlib doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_zlib"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_gzip}}",
      "Body": "Decorator for skipping tests if gzip doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_gzip"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_bz}}2",
      "Body": "Decorator for skipping tests if bz2 doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_bz2"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_lzma}}",
      "Body": "Decorator for skipping tests if lzma doesn't exist.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_lzma"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_resource}}({{c4::resource}})",
      "Body": "Decorator for skipping tests if resource is not available.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_resource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::requires_docstrings}}",
      "Body": "Decorator for only running the test if HAVE_DOCSTRINGS.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.requires_docstrings"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::cpython_only}}({{c4::test}})",
      "Body": "Decorator for tests only applicable to CPython.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.cpython_only"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::impl_detail}}({{c4::msg}}={{c5::None}}, **guards)",
      "Body": "Decorator for invoking check_impl_detail() on guards.  If that returns False, then uses msg as the reason for skipping the test.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.impl_detail"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::no_tracing}}({{c4::func}})",
      "Body": "Decorator to temporarily turn off tracing for the duration of the test.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.no_tracing"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::refcount_test}}({{c4::test}})",
      "Body": "Decorator for tests which involve reference counting.  The decorator does not run the test if it is not run by CPython.  Any trace function is unset for the duration of the test to prevent unexpected refcounts caused by the trace function.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.refcount_test"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::reap_threads}}({{c4::func}})",
      "Body": "Decorator to ensure the threads are cleaned up even if the test fails.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.reap_threads"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::bigmemtest}}({{c4::size}}, {{c5::memuse}}, {{c6::dry_run}}={{c7::True}})",
      "Body": "Decorator for bigmem tests.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.bigmemtest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "@{{c1::test}}.{{c2::support}}.{{c3::bigaddrspacetest}}({{c4::f}})",
      "Body": "Decorator for tests that fill the address space.  f is the function to wrap.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.bigaddrspacetest"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::make_bad_fd}}()",
      "Body": "Create an invalid file descriptor by opening and closing a temporary file, and returning its descriptor.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.make_bad_fd"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_syntax_error}}({{c4::testcase}}, {{c5::statement}}, {{c6::errtext}}='', *, {{c7::lineno}}={{c8::None}}, {{c9::offset}}={{c10::None}})",
      "Body": "Test for syntax errors in statement by attempting to compile statement. testcase is the unittest instance for the test.  errtext is the text of the error raised by SyntaxError.  If lineno is not None, compares to the line of the SyntaxError.  If offset is not None, compares to the offset of the SyntaxError.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.check_syntax_error"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::open_urlresource}}({{c4::url}}, *args, **kw)",
      "Body": "Open url.  If open fails, raises TestFailed.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.open_urlresource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::import_module}}({{c4::name}}, {{c5::deprecated}}={{c6::False}}, *, {{c7::required_on}}())",
      "Body": "This function imports and returns the named module. Unlike a normal import, this function raises unittest.SkipTest if the module cannot be imported.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.import_module"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::import_fresh_module}}({{c4::name}}, {{c5::fresh}}=(), {{c6::blocked}}=(), {{c7::deprecated}}={{c8::False}})",
      "Body": "This function imports and returns a fresh copy of the named Python module by removing the named module from sys.modules before doing the import. Note that unlike reload(), the original module is not affected by this operation.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.import_fresh_module"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::modules_setup}}()",
      "Body": "Return a copy of sys.modules.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.modules_setup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::modules_cleanup}}({{c4::oldmodules}})",
      "Body": "Remove modules except for oldmodules and encodings in order to preserve internal cache.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.modules_cleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::threading_setup}}()",
      "Body": "Return current thread count and copy of dangling threads.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.threading_setup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::threading_cleanup}}(*original_values)",
      "Body": "Cleanup up threads not specified in original_values.  Designed to emit a warning if a test leaves running threads in the background.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.threading_cleanup"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::join_thread}}({{c4::thread}}, {{c5::timeout}}=30.0)",
      "Body": "Join a thread within timeout.  Raise an AssertionError if thread is still alive after timeout seconds.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.join_thread"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::reap_children}}()",
      "Body": "Use this at the end of test_main whenever sub-processes are started. This will help ensure that no extra children (zombies) stick around to hog resources and create problems when looking for refleaks.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.reap_children"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::get_attribute}}({{c4::obj}}, {{c5::name}})",
      "Body": "Get an attribute, raising unittest.SkipTest if AttributeError is raised.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.get_attribute"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::bind_port}}({{c4::sock}}, {{c5::host}}={{c6::HOST}})",
      "Body": "Bind the socket to a free port and return the port number.  Relies on ephemeral ports in order to ensure we are using an unbound port.  This is important as many tests may be running simultaneously, especially in a buildbot environment.  This method raises an exception if the sock.family is AF_INET and sock.type is SOCK_STREAM, and the socket has SO_REUSEADDR or SO_REUSEPORT set on it. Tests should never set these socket options for TCP/IP sockets. The only case for setting these options is testing multicasting via multiple UDP sockets.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.bind_port"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::bind_unix_socket}}({{c4::sock}}, {{c5::addr}})",
      "Body": "Bind a unix socket, raising unittest.SkipTest if PermissionError is raised.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.bind_unix_socket"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::find_unused_port}}({{c4::family}}={{c5::socket}}.{{c6::AF_INET}}, {{c7::socktype}}={{c8::socket}}.{{c9::SOCK_STREAM}})",
      "Body": "Returns an unused port that should be suitable for binding.  This is achieved by creating a temporary socket with the same family and type as the sock parameter (default is AF_INET, SOCK_STREAM), and binding it to the specified host address (defaults to 0.0.0.0) with the port set to 0, eliciting an unused ephemeral port from the OS. The temporary socket is then closed and deleted, and the ephemeral port is returned.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.find_unused_port"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::load_package_tests}}({{c4::pkg_dir}}, {{c5::loader}}, {{c6::standard_tests}}, {{c7::pattern}})",
      "Body": "Generic implementation of the unittest load_tests protocol for use in test packages.  pkg_dir is the root directory of the package; loader, standard_tests, and pattern are the arguments expected by load_tests.  In simple cases, the test package's __init__.py can be the following:",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.load_package_tests"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::fs_is_case_insensitive}}({{c4::directory}})",
      "Body": "Return True if the file system for directory is case-insensitive.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.fs_is_case_insensitive"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::detect_api_mismatch}}({{c4::ref_api}}, {{c5::other_api}}, *, {{c6::ignore}}=())",
      "Body": "Returns the set of attributes, functions or methods of ref_api not found on other_api, except for a defined list of items to be ignored in this check specified in ignore.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.detect_api_mismatch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::patch}}({{c4::test_instance}}, {{c5::object_to_patch}}, {{c6::attr_name}}, {{c7::new_value}})",
      "Body": "Override object_to_patch.attr_name with new_value.  Also add cleanup procedure to test_instance to restore object_to_patch for attr_name.  The attr_name should be a valid attribute for object_to_patch.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.patch"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::run_in_subinterp}}({{c4::code}})",
      "Body": "Run code in subinterpreter.  Raise unittest.SkipTest if tracemalloc is enabled.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.run_in_subinterp"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check_free_after_iterating}}({{c4::test}}, {{c5::iter}}, {{c6::cls}}, {{c7::args}}=())",
      "Body": "Assert that iter is deallocated after iterating.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.check_free_after_iterating"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::missing_compiler_executable}}({{c4::cmd_names}}=[])",
      "Body": "Check for the existence of the compiler executables whose names are listed in cmd_names or all the compiler executables when cmd_names is empty and return the first missing executable or None when none is found missing.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.missing_compiler_executable"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::check__all__}}({{c4::test_case}}, {{c5::module}}, {{c6::name_of_module}}={{c7::None}}, {{c8::extra}}=(), {{c9::blacklist}}=())",
      "Body": "Assert that the __all__ variable of module contains all public names.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.check__all__"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::TransientResource}}({{c5::exc}}, **kwargs)",
      "Body": "Instances are a context manager that raises ResourceDenied if the specified exception type is raised.  Any keyword arguments are treated as attribute/value pairs to be compared against any exception raised within the with statement.  Only if all pairs match properly against attributes on the exception is ResourceDenied raised.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TransientResource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::EnvironmentVarGuard}}",
      "Body": "Class used to temporarily set or unset environment variables.  Instances can be used as a context manager and have a complete dictionary interface for querying/modifying the underlying os.environ. After exit from the context manager all changes to environment variables done through this instance will be rolled back.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.EnvironmentVarGuard"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::EnvironmentVarGuard}}.{{c2::set}}({{c3::envvar}}, {{c4::value}})",
      "Body": "Temporarily set the environment variable envvar to the value of value.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.EnvironmentVarGuard.set"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::EnvironmentVarGuard}}.{{c2::unset}}({{c3::envvar}})",
      "Body": "Temporarily unset the environment variable envvar.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.EnvironmentVarGuard.unset"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::SuppressCrashReport}}",
      "Body": "A context manager used to try to prevent crash dialog popups on tests that are expected to crash a subprocess.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.SuppressCrashReport"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::CleanImport}}(*module_names)",
      "Body": "A context manager to force import to return a new module reference.  This is useful for testing module-level behaviors, such as the emission of a DeprecationWarning on import.  Example usage:",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.CleanImport"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::DirsOnSysPath}}(*paths)",
      "Body": "A context manager to temporarily add directories to sys.path.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.DirsOnSysPath"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::SaveSignals}}",
      "Body": "Class to save and restore signal handlers registered by the Python signal handler.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.SaveSignals"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::Matcher}}",
      "Body": "Try to match a single dict with the supplied arguments.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.Matcher"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::Matcher}}.{{c4::matches}}({{c5::self}}, {{c6::d}}, **kwargs)",
      "Body": "Try to match a single dict with the supplied arguments.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.Matcher.matches"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::Matcher}}.{{c4::match_value}}({{c5::self}}, {{c6::k}}, {{c7::dv}}, {{c8::v}})",
      "Body": "Try to match a single stored value (dv) with a supplied value (v).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.Matcher.match_value"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::WarningsRecorder}}",
      "Body": "Class used to record warnings for unit tests. See documentation of check_warnings() above for more details.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.WarningsRecorder"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::BasicTestRunner}}",
      "Body": "Run test and return the result.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.BasicTestRunner"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::BasicTestRunner}}.{{c4::run}}({{c5::test}})",
      "Body": "Run test and return the result.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.BasicTestRunner.run"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::TestHandler}}({{c5::logging}}.{{c6::handlers}}.{{c7::BufferingHandler}})",
      "Body": "Class for logging support.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.TestHandler"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::test}}.{{c3::support}}.{{c4::FakePath}}({{c5::path}})",
      "Body": "Simple path-like object.  It implements the __fspath__() method which just returns the path argument.  If path is an exception, it will be raised in __fspath__().",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.FakePath"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::interpreter_requires_environment}}()",
      "Body": "Return True if sys.executable interpreter requires environment variables in order to be able to run at all.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.interpreter_requires_environment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::run_python_until_end}}(*args, **env_vars)",
      "Body": "Set up the environment based on env_vars for running the interpreter in a subprocess.  The values can include __isolated, __cleanenv, __cwd, and TERM.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.run_python_until_end"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::assert_python_ok}}(*args, **env_vars)",
      "Body": "Assert that running the interpreter with args and optional environment variables env_vars succeeds (rc == 0) and return a (return code, stdout, stderr) tuple.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.assert_python_ok"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::assert_python_failure}}(*args, **env_vars)",
      "Body": "Assert that running the interpreter with args and optional environment variables env_vars fails (rc != 0) and return a (return code, stdout, stderr) tuple.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.assert_python_failure"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::spawn_python}}(*args, {{c5::stdout}}={{c6::subprocess}}.{{c7::PIPE}}, {{c8::stderr}}={{c9::subprocess}}.{{c10::STDOUT}}, **kw)",
      "Body": "Run a Python subprocess with the given arguments.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.spawn_python"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::kill_python}}({{c5::p}})",
      "Body": "Run the given subprocess.Popen process until completion and return stdout.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.kill_python"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_script}}({{c5::script_dir}}, {{c6::script_basename}}, {{c7::source}}, {{c8::omit_suffix}}={{c9::False}})",
      "Body": "Create script containing source in path script_dir and script_basename. If omit_suffix is False, append .py to the name.  Return the full script path.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.make_script"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_zip_script}}({{c5::zip_dir}}, {{c6::zip_basename}}, {{c7::script_name}}, {{c8::name_in_zip}}={{c9::None}})",
      "Body": "Create zip file at zip_dir and zip_basename with extension zip which contains the files in script_name. name_in_zip is the archive name. Return a tuple containing (full path, full path of archive name).",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.make_zip_script"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_pkg}}({{c5::pkg_dir}}, {{c6::init_source}}='')",
      "Body": "Create a directory named pkg_dir containing an __init__ file with init_source as its contents.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.make_pkg"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["function", "Development Tools", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::test}}.{{c2::support}}.{{c3::script_helper}}.{{c4::make_zip_pkg}}({{c5::zip_dir}}, {{c6::zip_basename}}, {{c7::pkg_name}}, {{c8::script_basename}}, {{c9::source}}, {{c10::depth}}=1, {{c11::compiled}}={{c12::False}})",
      "Body": "Create a zip package directory with a path of zip_dir and zip_basename containing an empty __init__ file and a file script_basename containing the source.  If compiled is True, both source files will be compiled and added to the zip package.  Return a tuple of the full zip path and the archive name for the zip file.",
      "Link": "https://docs.python.org/3/library/test.html#module-test.support.script_helper#test.support.script_helper.make_zip_pkg"
    },
    "modelName": "ClozePy"
  }
]
