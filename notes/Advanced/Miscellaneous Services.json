[
  {
    "tags": ["data", "Miscellaneous Services", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::AS_IS}}",
      "Body": "Value which can be used in the font specification passed to the push_font() method described below, or as the new value to any other push_property() method.  Pushing the AS_IS value allows the corresponding pop_property() method to be called without having to track whether the property was changed.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.AS_IS"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "attribute",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::writer}}",
      "Body": "The writer instance with which the formatter interacts.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.writer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::end_paragraph}}({{c3::blanklines}})",
      "Body": "Close any open paragraphs and insert at least blanklines before the next paragraph.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.end_paragraph"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::add_line_break}}()",
      "Body": "Add a hard line break if one does not already exist.  This does not break the logical paragraph.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.add_line_break"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::add_hor_rule}}(*args, **kw)",
      "Body": "Insert a horizontal rule in the output.  A hard break is inserted if there is data in the current paragraph, but the logical paragraph is not broken.  The arguments and keywords are passed on to the writer's send_line_break() method.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.add_hor_rule"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::add_flowing_data}}({{c3::data}})",
      "Body": "Provide data which should be formatted with collapsed whitespace. Whitespace from preceding and successive calls to add_flowing_data() is considered as well when the whitespace collapse is performed.  The data which is passed to this method is expected to be word-wrapped by the output device.  Note that any word-wrapping still must be performed by the writer object due to the need to rely on device and font information.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.add_flowing_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::add_literal_data}}({{c3::data}})",
      "Body": "Provide data which should be passed to the writer unchanged. Whitespace, including newline and tab characters, are considered legal in the value of data.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.add_literal_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::add_label_data}}({{c3::format}}, {{c4::counter}})",
      "Body": "Insert a label which should be placed to the left of the current left margin. This should be used for constructing bulleted or numbered lists.  If the format value is a string, it is interpreted as a format specification for counter, which should be an integer. The result of this formatting becomes the value of the label; if format is not a string it is used as the label value directly. The label value is passed as the only argument to the writer's send_label_data() method.  Interpretation of non-string label values is dependent on the associated writer.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.add_label_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::flush_softspace}}()",
      "Body": "Send any pending whitespace buffered from a previous call to add_flowing_data() to the associated writer object.  This should be called before any direct manipulation of the writer object.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.flush_softspace"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::push_alignment}}({{c3::align}})",
      "Body": "Push a new alignment setting onto the alignment stack.  This may be AS_IS if no change is desired.  If the alignment value is changed from the previous setting, the writer's new_alignment() method is called with the align value.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.push_alignment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::pop_alignment}}()",
      "Body": "Restore the previous alignment.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.pop_alignment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::push_font}}(({{c3::size}}, {{c4::italic}}, {{c5::bold}}, {{c6::teletype}}))",
      "Body": "Change some or all font properties of the writer object.  Properties which are not set to AS_IS are set to the values passed in while others are maintained at their current settings.  The writer's new_font() method is called with the fully resolved font specification.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.push_font"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::pop_font}}()",
      "Body": "Restore the previous font.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.pop_font"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::push_margin}}({{c3::margin}})",
      "Body": "Increase the number of left margin indentations by one, associating the logical tag margin with the new indentation.  The initial margin level is 0. Changed values of the logical tag must be true values; false values other than AS_IS are not sufficient to change the margin.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.push_margin"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::pop_margin}}()",
      "Body": "Restore the previous margin.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.pop_margin"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::push_style}}(*styles)",
      "Body": "Push any number of arbitrary style specifications.  All styles are pushed onto the styles stack in order.  A tuple representing the entire stack, including AS_IS values, is passed to the writer's new_styles() method.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.push_style"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::pop_style}}({{c3::n}}=1)",
      "Body": "Pop the last n style specifications passed to push_style().  A tuple representing the revised stack, including AS_IS values, is passed to the writer's new_styles() method.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.pop_style"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::set_spacing}}({{c3::spacing}})",
      "Body": "Set the spacing style for the writer.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.set_spacing"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::formatter}}.{{c2::assert_line_data}}({{c3::flag}}=1)",
      "Body": "Inform the formatter that data has been added to the current paragraph out-of-band.  This should be used when the writer has been manipulated directly.  The optional flag argument can be set to false if the writer manipulations produced a hard line break at the end of the output.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.formatter.assert_line_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::formatter}}.{{c3::NullFormatter}}({{c4::writer}}={{c5::None}})",
      "Body": "A formatter which does nothing.  If writer is omitted, a NullWriter instance is created.  No methods of the writer are called by NullFormatter instances.  Implementations should inherit from this class if implementing a writer interface but don't need to inherit any implementation.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.NullFormatter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::formatter}}.{{c3::AbstractFormatter}}({{c4::writer}})",
      "Body": "The standard formatter.  This implementation has demonstrated wide applicability to many writers, and may be used directly in most circumstances.  It has been used to implement a full-featured World Wide Web browser.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.AbstractFormatter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::flush}}()",
      "Body": "Flush any buffered output or device control events.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.flush"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::new_alignment}}({{c3::align}})",
      "Body": "Set the alignment style.  The align value can be any object, but by convention is a string or None, where None indicates that the writer's preferred alignment should be used. Conventional align values are 'left', 'center', 'right', and 'justify'.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.new_alignment"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::new_font}}({{c3::font}})",
      "Body": "Set the font style.  The value of font will be None, indicating that the device's default font should be used, or a tuple of the form (size, italic, bold, teletype).  Size will be a string indicating the size of font that should be used; specific strings and their interpretation must be defined by the application.  The italic, bold, and teletype values are Boolean values specifying which of those font attributes should be used.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.new_font"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::new_margin}}({{c3::margin}}, {{c4::level}})",
      "Body": "Set the margin level to the integer level and the logical tag to margin. Interpretation of the logical tag is at the writer's discretion; the only restriction on the value of the logical tag is that it not be a false value for non-zero values of level.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.new_margin"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::new_spacing}}({{c3::spacing}})",
      "Body": "Set the spacing style to spacing.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.new_spacing"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::new_styles}}({{c3::styles}})",
      "Body": "Set additional styles.  The styles value is a tuple of arbitrary values; the value AS_IS should be ignored.  The styles tuple may be interpreted either as a set or as a stack depending on the requirements of the application and writer implementation.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.new_styles"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::send_line_break}}()",
      "Body": "Break the current line.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.send_line_break"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::send_paragraph}}({{c3::blankline}})",
      "Body": "Produce a paragraph separation of at least blankline blank lines, or the equivalent.  The blankline value will be an integer.  Note that the implementation will receive a call to send_line_break() before this call if a line break is needed;  this method should not include ending the last line of the paragraph. It is only responsible for vertical spacing between paragraphs.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.send_paragraph"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::send_hor_rule}}(*args, **kw)",
      "Body": "Display a horizontal rule on the output device.  The arguments to this method are entirely application- and writer-specific, and should be interpreted with care.  The method implementation may assume that a line break has already been issued via send_line_break().",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.send_hor_rule"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::send_flowing_data}}({{c3::data}})",
      "Body": "Output character data which may be word-wrapped and re-flowed as needed.  Within any sequence of calls to this method, the writer may assume that spans of multiple whitespace characters have been collapsed to single space characters.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.send_flowing_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::send_literal_data}}({{c3::data}})",
      "Body": "Output character data which has already been formatted for display.  Generally, this should be interpreted to mean that line breaks indicated by newline characters should be preserved and no new line breaks should be introduced.  The data may contain embedded newline and tab characters, unlike data provided to the send_formatted_data() interface.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.send_literal_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "method",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::writer}}.{{c2::send_label_data}}({{c3::data}})",
      "Body": "Set data to the left of the current left margin, if possible. The value of data is not restricted; treatment of non-string values is entirely application- and writer-dependent.  This method will only be called at the beginning of a line.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.writer.send_label_data"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::formatter}}.{{c3::NullWriter}}",
      "Body": "A writer which only provides the interface definition; no actions are taken on any methods.  This should be the base class for all writers which do not need to inherit any implementation methods.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.NullWriter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::formatter}}.{{c3::AbstractWriter}}",
      "Body": "A writer which can be used in debugging formatters, but not much else.  Each method simply announces itself by printing its name and arguments on standard output.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.AbstractWriter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "class",
      "Miscellaneous Services",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::class}} {{c2::formatter}}.{{c3::DumbWriter}}({{c4::file}}={{c5::None}}, {{c6::maxcol}}=72)",
      "Body": "Simple writer class which writes output on the file object passed in as file or, if file is omitted, on standard output.  The output is simply word-wrapped to the number of columns specified by maxcol.  This class is suitable for reflowing a sequence of paragraphs.",
      "Link": "https://docs.python.org/3/library/formatter.html#formatter.DumbWriter"
    },
    "modelName": "ClozePy"
  }
]
