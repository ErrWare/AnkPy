[
  {
    "tags": ["class", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::code}}.{{c3::InteractiveInterpreter}}({{c4::locals}}={{c5::None}})",
      "Body": "This class deals with parsing and interpreter state (the user's namespace); it does not deal with input buffering or prompting or input file naming (the filename is always passed in explicitly). The optional locals argument specifies the dictionary in which code will be executed; it defaults to a newly created dictionary with key '__name__' set to '__console__' and key '__doc__' set to None.",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveInterpreter"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::code}}.{{c3::InteractiveConsole}}({{c4::locals}}={{c5::None}}, {{c6::filename}}=\"<{{c7::console}}>\")",
      "Body": "Closely emulate the behavior of the interactive Python interpreter. This class builds on InteractiveInterpreter and adds prompting using the familiar sys.ps1 and sys.ps2, and input buffering.",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveConsole"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Custom Python Interpreters",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::code}}.{{c2::interact}}({{c3::banner}}={{c4::None}}, {{c5::readfunc}}={{c6::None}}, {{c7::local}}={{c8::None}}, {{c9::exitmsg}}={{c10::None}})",
      "Body": "Convenience function to run a read-eval-print loop.  This creates a new instance of InteractiveConsole and sets readfunc to be used as the InteractiveConsole.raw_input() method, if provided.  If local is provided, it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop.  The interact() method of the instance is then run with banner and exitmsg passed as the banner and exit message to use, if provided.  The console object is discarded after use.",
      "Link": "https://docs.python.org/3/library/code.html#code.interact"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Custom Python Interpreters",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::code}}.{{c2::compile_command}}({{c3::source}}, {{c4::filename}}=\"<{{c5::input}}>\", {{c6::symbol}}=\"{{c7::single}}\")",
      "Body": "This function is useful for programs that want to emulate Python's interpreter main loop (a.k.a. the read-eval-print loop).  The tricky part is to determine when the user has entered an incomplete command that can be completed by entering more text (as opposed to a complete command or a syntax error).  This function almost always makes the same decision as the real interpreter main loop.",
      "Link": "https://docs.python.org/3/library/code.html#code.compile_command"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveInterpreter}}.{{c2::runsource}}({{c3::source}}, {{c4::filename}}=\"<{{c5::input}}>\", {{c6::symbol}}=\"{{c7::single}}\")",
      "Body": "Compile and run some source in the interpreter. Arguments are the same as for compile_command(); the default for filename is '<input>', and for symbol is 'single'.  One several things can happen:",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.runsource"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveInterpreter}}.{{c2::runcode}}({{c3::code}})",
      "Body": "Execute a code object. When an exception occurs, showtraceback() is called to display a traceback.  All exceptions are caught except SystemExit, which is allowed to propagate.",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.runcode"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveInterpreter}}.{{c2::showsyntaxerror}}({{c3::filename}}={{c4::None}})",
      "Body": "Display the syntax error that just occurred.  This does not display a stack trace because there isn't one for syntax errors. If filename is given, it is stuffed into the exception instead of the default filename provided by Python's parser, because it always uses '<string>' when reading from a string. The output is written by the write() method.",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.showsyntaxerror"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveInterpreter}}.{{c2::showtraceback}}()",
      "Body": "Display the exception that just occurred.  We remove the first stack item because it is within the interpreter object implementation. The output is written by the write() method.",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.showtraceback"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveInterpreter}}.{{c2::write}}({{c3::data}})",
      "Body": "Write a string to the standard error stream (sys.stderr). Derived classes should override this to provide the appropriate output handling as needed.",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.write"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveConsole}}.{{c2::interact}}({{c3::banner}}={{c4::None}}, {{c5::exitmsg}}={{c6::None}})",
      "Body": "Closely emulate the interactive Python console. The optional banner argument specify the banner to print before the first interaction; by default it prints a banner similar to the one printed by the standard Python interpreter, followed by the class name of the console object in parentheses (so as not to confuse this with the real interpreter  since it's so close!).",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveConsole.interact"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveConsole}}.{{c2::push}}({{c3::line}})",
      "Body": "Push a line of source text to the interpreter. The line should not have a trailing newline; it may have internal newlines.  The line is appended to a buffer and the interpreter's runsource() method is called with the concatenated contents of the buffer as source.  If this indicates that the command was executed or invalid, the buffer is reset; otherwise, the command is incomplete, and the buffer is left as it was after the line was appended.  The return value is True if more input is required, False if the line was dealt with in some way (this is the same as runsource()).",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveConsole.push"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveConsole}}.{{c2::resetbuffer}}()",
      "Body": "Remove any unhandled source text from the input buffer.",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveConsole.resetbuffer"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["method", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::InteractiveConsole}}.{{c2::raw_input}}({{c3::prompt}}=\"\")",
      "Body": "Write a prompt and read a line.  The returned line does not include the trailing newline.  When the user enters the EOF key sequence, EOFError is raised. The base implementation reads from sys.stdin; a subclass may replace this with a different implementation.",
      "Link": "https://docs.python.org/3/library/code.html#code.InteractiveConsole.raw_input"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": [
      "function",
      "Custom Python Interpreters",
      "Python",
      "py",
      "native"
    ],
    "fields": {
      "Signature": "{{c1::codeop}}.{{c2::compile_command}}({{c3::source}}, {{c4::filename}}=\"<{{c5::input}}>\", {{c6::symbol}}=\"{{c7::single}}\")",
      "Body": "Tries to compile source, which should be a string of Python code and return a code object if source is valid Python code. In that case, the filename attribute of the code object will be filename, which defaults to '<input>'. Returns None if source is not valid Python code, but is a prefix of valid Python code.",
      "Link": "https://docs.python.org/3/library/codeop.html#codeop.compile_command"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::codeop}}.{{c3::Compile}}",
      "Body": "Instances of this class have __call__() methods identical in signature to the built-in function compile(), but with the difference that if the instance compiles program text containing a __future__ statement, the instance 'remembers' and compiles all subsequent program texts with the statement in force.",
      "Link": "https://docs.python.org/3/library/codeop.html#codeop.Compile"
    },
    "modelName": "ClozePy"
  },
  {
    "tags": ["class", "Custom Python Interpreters", "Python", "py", "native"],
    "fields": {
      "Signature": "{{c1::class}} {{c2::codeop}}.{{c3::CommandCompiler}}",
      "Body": "Instances of this class have __call__() methods identical in signature to compile_command(); the difference is that if the instance compiles program text containing a __future__ statement, the instance 'remembers' and compiles all subsequent program texts with the statement in force.",
      "Link": "https://docs.python.org/3/library/codeop.html#codeop.CommandCompiler"
    },
    "modelName": "ClozePy"
  }
]
